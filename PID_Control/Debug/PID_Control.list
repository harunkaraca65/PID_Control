
PID_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007910  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  08007aa0  08007aa0  00008aa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d00  08007d00  00009088  2**0
                  CONTENTS
  4 .ARM          00000008  08007d00  08007d00  00008d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d08  08007d08  00009088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d08  08007d08  00008d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d0c  08007d0c  00008d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08007d10  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009088  2**0
                  CONTENTS
 10 .bss          0000030c  20000088  20000088  00009088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000394  20000394  00009088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c962  00000000  00000000  000090b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e14  00000000  00000000  00015a1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d98  00000000  00000000  00017830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aa4  00000000  00000000  000185c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021fc0  00000000  00000000  0001906c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010432  00000000  00000000  0003b02c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cda19  00000000  00000000  0004b45e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00118e77  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000463c  00000000  00000000  00118ebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0011d4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007a88 	.word	0x08007a88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08007a88 	.word	0x08007a88

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b96a 	b.w	8000f24 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	460c      	mov	r4, r1
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d14e      	bne.n	8000d12 <__udivmoddi4+0xaa>
 8000c74:	4694      	mov	ip, r2
 8000c76:	458c      	cmp	ip, r1
 8000c78:	4686      	mov	lr, r0
 8000c7a:	fab2 f282 	clz	r2, r2
 8000c7e:	d962      	bls.n	8000d46 <__udivmoddi4+0xde>
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0320 	rsb	r3, r2, #32
 8000c86:	4091      	lsls	r1, r2
 8000c88:	fa20 f303 	lsr.w	r3, r0, r3
 8000c8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c90:	4319      	orrs	r1, r3
 8000c92:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9a:	fa1f f68c 	uxth.w	r6, ip
 8000c9e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ca2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ca6:	fb07 1114 	mls	r1, r7, r4, r1
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb04 f106 	mul.w	r1, r4, r6
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x64>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cbe:	f080 8112 	bcs.w	8000ee6 <__udivmoddi4+0x27e>
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	f240 810f 	bls.w	8000ee6 <__udivmoddi4+0x27e>
 8000cc8:	3c02      	subs	r4, #2
 8000cca:	4463      	add	r3, ip
 8000ccc:	1a59      	subs	r1, r3, r1
 8000cce:	fa1f f38e 	uxth.w	r3, lr
 8000cd2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cd6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb00 f606 	mul.w	r6, r0, r6
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x94>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cee:	f080 80fc 	bcs.w	8000eea <__udivmoddi4+0x282>
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	f240 80f9 	bls.w	8000eea <__udivmoddi4+0x282>
 8000cf8:	4463      	add	r3, ip
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d02:	2100      	movs	r1, #0
 8000d04:	b11d      	cbz	r5, 8000d0e <__udivmoddi4+0xa6>
 8000d06:	40d3      	lsrs	r3, r2
 8000d08:	2200      	movs	r2, #0
 8000d0a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d905      	bls.n	8000d22 <__udivmoddi4+0xba>
 8000d16:	b10d      	cbz	r5, 8000d1c <__udivmoddi4+0xb4>
 8000d18:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e7f5      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000d22:	fab3 f183 	clz	r1, r3
 8000d26:	2900      	cmp	r1, #0
 8000d28:	d146      	bne.n	8000db8 <__udivmoddi4+0x150>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d302      	bcc.n	8000d34 <__udivmoddi4+0xcc>
 8000d2e:	4290      	cmp	r0, r2
 8000d30:	f0c0 80f0 	bcc.w	8000f14 <__udivmoddi4+0x2ac>
 8000d34:	1a86      	subs	r6, r0, r2
 8000d36:	eb64 0303 	sbc.w	r3, r4, r3
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	2d00      	cmp	r5, #0
 8000d3e:	d0e6      	beq.n	8000d0e <__udivmoddi4+0xa6>
 8000d40:	e9c5 6300 	strd	r6, r3, [r5]
 8000d44:	e7e3      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	f040 8090 	bne.w	8000e6c <__udivmoddi4+0x204>
 8000d4c:	eba1 040c 	sub.w	r4, r1, ip
 8000d50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d54:	fa1f f78c 	uxth.w	r7, ip
 8000d58:	2101      	movs	r1, #1
 8000d5a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb08 4416 	mls	r4, r8, r6, r4
 8000d66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d6a:	fb07 f006 	mul.w	r0, r7, r6
 8000d6e:	4298      	cmp	r0, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x11c>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x11a>
 8000d7c:	4298      	cmp	r0, r3
 8000d7e:	f200 80cd 	bhi.w	8000f1c <__udivmoddi4+0x2b4>
 8000d82:	4626      	mov	r6, r4
 8000d84:	1a1c      	subs	r4, r3, r0
 8000d86:	fa1f f38e 	uxth.w	r3, lr
 8000d8a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d8e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d96:	fb00 f707 	mul.w	r7, r0, r7
 8000d9a:	429f      	cmp	r7, r3
 8000d9c:	d908      	bls.n	8000db0 <__udivmoddi4+0x148>
 8000d9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000da2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da6:	d202      	bcs.n	8000dae <__udivmoddi4+0x146>
 8000da8:	429f      	cmp	r7, r3
 8000daa:	f200 80b0 	bhi.w	8000f0e <__udivmoddi4+0x2a6>
 8000dae:	4620      	mov	r0, r4
 8000db0:	1bdb      	subs	r3, r3, r7
 8000db2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db6:	e7a5      	b.n	8000d04 <__udivmoddi4+0x9c>
 8000db8:	f1c1 0620 	rsb	r6, r1, #32
 8000dbc:	408b      	lsls	r3, r1
 8000dbe:	fa22 f706 	lsr.w	r7, r2, r6
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dc8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dcc:	ea43 030c 	orr.w	r3, r3, ip
 8000dd0:	40f4      	lsrs	r4, r6
 8000dd2:	fa00 f801 	lsl.w	r8, r0, r1
 8000dd6:	0c38      	lsrs	r0, r7, #16
 8000dd8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ddc:	fbb4 fef0 	udiv	lr, r4, r0
 8000de0:	fa1f fc87 	uxth.w	ip, r7
 8000de4:	fb00 441e 	mls	r4, r0, lr, r4
 8000de8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dec:	fb0e f90c 	mul.w	r9, lr, ip
 8000df0:	45a1      	cmp	r9, r4
 8000df2:	fa02 f201 	lsl.w	r2, r2, r1
 8000df6:	d90a      	bls.n	8000e0e <__udivmoddi4+0x1a6>
 8000df8:	193c      	adds	r4, r7, r4
 8000dfa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dfe:	f080 8084 	bcs.w	8000f0a <__udivmoddi4+0x2a2>
 8000e02:	45a1      	cmp	r9, r4
 8000e04:	f240 8081 	bls.w	8000f0a <__udivmoddi4+0x2a2>
 8000e08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e0c:	443c      	add	r4, r7
 8000e0e:	eba4 0409 	sub.w	r4, r4, r9
 8000e12:	fa1f f983 	uxth.w	r9, r3
 8000e16:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e1a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e1e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e26:	45a4      	cmp	ip, r4
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x1d2>
 8000e2a:	193c      	adds	r4, r7, r4
 8000e2c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e30:	d267      	bcs.n	8000f02 <__udivmoddi4+0x29a>
 8000e32:	45a4      	cmp	ip, r4
 8000e34:	d965      	bls.n	8000f02 <__udivmoddi4+0x29a>
 8000e36:	3b02      	subs	r3, #2
 8000e38:	443c      	add	r4, r7
 8000e3a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e3e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e42:	eba4 040c 	sub.w	r4, r4, ip
 8000e46:	429c      	cmp	r4, r3
 8000e48:	46ce      	mov	lr, r9
 8000e4a:	469c      	mov	ip, r3
 8000e4c:	d351      	bcc.n	8000ef2 <__udivmoddi4+0x28a>
 8000e4e:	d04e      	beq.n	8000eee <__udivmoddi4+0x286>
 8000e50:	b155      	cbz	r5, 8000e68 <__udivmoddi4+0x200>
 8000e52:	ebb8 030e 	subs.w	r3, r8, lr
 8000e56:	eb64 040c 	sbc.w	r4, r4, ip
 8000e5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e5e:	40cb      	lsrs	r3, r1
 8000e60:	431e      	orrs	r6, r3
 8000e62:	40cc      	lsrs	r4, r1
 8000e64:	e9c5 6400 	strd	r6, r4, [r5]
 8000e68:	2100      	movs	r1, #0
 8000e6a:	e750      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000e6c:	f1c2 0320 	rsb	r3, r2, #32
 8000e70:	fa20 f103 	lsr.w	r1, r0, r3
 8000e74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e78:	fa24 f303 	lsr.w	r3, r4, r3
 8000e7c:	4094      	lsls	r4, r2
 8000e7e:	430c      	orrs	r4, r1
 8000e80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e88:	fa1f f78c 	uxth.w	r7, ip
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3110 	mls	r1, r8, r0, r3
 8000e94:	0c23      	lsrs	r3, r4, #16
 8000e96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e9a:	fb00 f107 	mul.w	r1, r0, r7
 8000e9e:	4299      	cmp	r1, r3
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x24c>
 8000ea2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eaa:	d22c      	bcs.n	8000f06 <__udivmoddi4+0x29e>
 8000eac:	4299      	cmp	r1, r3
 8000eae:	d92a      	bls.n	8000f06 <__udivmoddi4+0x29e>
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	4463      	add	r3, ip
 8000eb4:	1a5b      	subs	r3, r3, r1
 8000eb6:	b2a4      	uxth	r4, r4
 8000eb8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ebc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ec0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ec4:	fb01 f307 	mul.w	r3, r1, r7
 8000ec8:	42a3      	cmp	r3, r4
 8000eca:	d908      	bls.n	8000ede <__udivmoddi4+0x276>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ed4:	d213      	bcs.n	8000efe <__udivmoddi4+0x296>
 8000ed6:	42a3      	cmp	r3, r4
 8000ed8:	d911      	bls.n	8000efe <__udivmoddi4+0x296>
 8000eda:	3902      	subs	r1, #2
 8000edc:	4464      	add	r4, ip
 8000ede:	1ae4      	subs	r4, r4, r3
 8000ee0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ee4:	e739      	b.n	8000d5a <__udivmoddi4+0xf2>
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	e6f0      	b.n	8000ccc <__udivmoddi4+0x64>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e706      	b.n	8000cfc <__udivmoddi4+0x94>
 8000eee:	45c8      	cmp	r8, r9
 8000ef0:	d2ae      	bcs.n	8000e50 <__udivmoddi4+0x1e8>
 8000ef2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ef6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000efa:	3801      	subs	r0, #1
 8000efc:	e7a8      	b.n	8000e50 <__udivmoddi4+0x1e8>
 8000efe:	4631      	mov	r1, r6
 8000f00:	e7ed      	b.n	8000ede <__udivmoddi4+0x276>
 8000f02:	4603      	mov	r3, r0
 8000f04:	e799      	b.n	8000e3a <__udivmoddi4+0x1d2>
 8000f06:	4630      	mov	r0, r6
 8000f08:	e7d4      	b.n	8000eb4 <__udivmoddi4+0x24c>
 8000f0a:	46d6      	mov	lr, sl
 8000f0c:	e77f      	b.n	8000e0e <__udivmoddi4+0x1a6>
 8000f0e:	4463      	add	r3, ip
 8000f10:	3802      	subs	r0, #2
 8000f12:	e74d      	b.n	8000db0 <__udivmoddi4+0x148>
 8000f14:	4606      	mov	r6, r0
 8000f16:	4623      	mov	r3, r4
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e70f      	b.n	8000d3c <__udivmoddi4+0xd4>
 8000f1c:	3e02      	subs	r6, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	e730      	b.n	8000d84 <__udivmoddi4+0x11c>
 8000f22:	bf00      	nop

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <getMillis>:


// Mikrosaniye cinsinden zamanı döndüren fonksiyon
// STM32'de bu işlevi SysTick timer sağlar.
// SysTick timer kullanarak milisaniye cinsinden zamanı döndüren fonksiyon
uint32_t getMillis(){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8000f2c:	f001 f9d2 	bl	80022d4 <HAL_GetTick>
 8000f30:	4603      	mov	r3, r0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <CCR_guncelle>:

// CCR değerini güncellemek için fonksiyon
void CCR_guncelle() {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
    static unsigned long onceki_zaman = 0; // Önceki zamanı saklamak için statik değişken
    unsigned long simdiki_zaman = getMillis(); // Geçerli zamanı al
 8000f3e:	f7ff fff3 	bl	8000f28 <getMillis>
 8000f42:	60f8      	str	r0, [r7, #12]
    unsigned long delta_zaman = simdiki_zaman - onceki_zaman; // Zaman farkını hesapla
 8000f44:	4b28      	ldr	r3, [pc, #160]	@ (8000fe8 <CCR_guncelle+0xb0>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	68fa      	ldr	r2, [r7, #12]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	60bb      	str	r3, [r7, #8]

    // Eğer sayım 0 ise, CCR değerini başlangıç değeri olan 50.0f yap ve sayımı 1 yap
     if (sayim == 0) {
 8000f4e:	4b27      	ldr	r3, [pc, #156]	@ (8000fec <CCR_guncelle+0xb4>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d108      	bne.n	8000f68 <CCR_guncelle+0x30>
         CCR_degeri = 50.0f;
 8000f56:	4b26      	ldr	r3, [pc, #152]	@ (8000ff0 <CCR_guncelle+0xb8>)
 8000f58:	4a26      	ldr	r2, [pc, #152]	@ (8000ff4 <CCR_guncelle+0xbc>)
 8000f5a:	601a      	str	r2, [r3, #0]
         sayim = 1;
 8000f5c:	4b23      	ldr	r3, [pc, #140]	@ (8000fec <CCR_guncelle+0xb4>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	601a      	str	r2, [r3, #0]
         onceki_zaman = simdiki_zaman;
 8000f62:	4a21      	ldr	r2, [pc, #132]	@ (8000fe8 <CCR_guncelle+0xb0>)
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	6013      	str	r3, [r2, #0]
     }
     // Eğer zaman farkı 100ms'den büyükse CCR değerini güncelle
    if (delta_zaman > 300) {
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000f6e:	d937      	bls.n	8000fe0 <CCR_guncelle+0xa8>
        // PID çıktısının işaretine göre CCR değerini artır veya azalt
        CCR_degeri += pid_cikti;
 8000f70:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff0 <CCR_guncelle+0xb8>)
 8000f72:	ed93 7a00 	vldr	s14, [r3]
 8000f76:	4b20      	ldr	r3, [pc, #128]	@ (8000ff8 <CCR_guncelle+0xc0>)
 8000f78:	edd3 7a00 	vldr	s15, [r3]
 8000f7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f80:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff0 <CCR_guncelle+0xb8>)
 8000f82:	edc3 7a00 	vstr	s15, [r3]
        onceki_zaman = simdiki_zaman; // Zamanı güncelle
 8000f86:	4a18      	ldr	r2, [pc, #96]	@ (8000fe8 <CCR_guncelle+0xb0>)
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	6013      	str	r3, [r2, #0]

        // CCR değerini minimum ve maksimum sınırlar içinde tut
        const float CCR_MIN = 50.0f;
 8000f8c:	4b19      	ldr	r3, [pc, #100]	@ (8000ff4 <CCR_guncelle+0xbc>)
 8000f8e:	607b      	str	r3, [r7, #4]
        const float CCR_MAX = 100.0f;
 8000f90:	4b1a      	ldr	r3, [pc, #104]	@ (8000ffc <CCR_guncelle+0xc4>)
 8000f92:	603b      	str	r3, [r7, #0]
        CCR_degeri = (CCR_degeri < CCR_MIN) ? CCR_MIN : (CCR_degeri > CCR_MAX) ? CCR_MAX : CCR_degeri;
 8000f94:	4b16      	ldr	r3, [pc, #88]	@ (8000ff0 <CCR_guncelle+0xb8>)
 8000f96:	edd3 7a00 	vldr	s15, [r3]
 8000f9a:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa6:	dd01      	ble.n	8000fac <CCR_guncelle+0x74>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	e00d      	b.n	8000fc8 <CCR_guncelle+0x90>
 8000fac:	4b10      	ldr	r3, [pc, #64]	@ (8000ff0 <CCR_guncelle+0xb8>)
 8000fae:	edd3 7a00 	vldr	s15, [r3]
 8000fb2:	ed97 7a00 	vldr	s14, [r7]
 8000fb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fbe:	d501      	bpl.n	8000fc4 <CCR_guncelle+0x8c>
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	e001      	b.n	8000fc8 <CCR_guncelle+0x90>
 8000fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff0 <CCR_guncelle+0xb8>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a09      	ldr	r2, [pc, #36]	@ (8000ff0 <CCR_guncelle+0xb8>)
 8000fca:	6013      	str	r3, [r2, #0]

        // CCR değerini PWM sinyali için güncelle
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, CCR_degeri);
 8000fcc:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <CCR_guncelle+0xb8>)
 8000fce:	edd3 7a00 	vldr	s15, [r3]
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001000 <CCR_guncelle+0xc8>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fda:	ee17 2a90 	vmov	r2, s15
 8000fde:	635a      	str	r2, [r3, #52]	@ 0x34
    }
}
 8000fe0:	bf00      	nop
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	2000023c 	.word	0x2000023c
 8000fec:	20000234 	.word	0x20000234
 8000ff0:	20000230 	.word	0x20000230
 8000ff4:	42480000 	.word	0x42480000
 8000ff8:	20000218 	.word	0x20000218
 8000ffc:	42c80000 	.word	0x42c80000
 8001000:	200000f8 	.word	0x200000f8
 8001004:	00000000 	.word	0x00000000

08001008 <mpu6050>:

// MPU6050 'den açı değerini oku
void mpu6050() {
 8001008:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af02      	add	r7, sp, #8
    // Zaman ölçümü için değişkenler
    prevtime1 = time1; // Önceki zamanı sakla
 8001010:	4bbd      	ldr	r3, [pc, #756]	@ (8001308 <mpu6050+0x300>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4abd      	ldr	r2, [pc, #756]	@ (800130c <mpu6050+0x304>)
 8001016:	6013      	str	r3, [r2, #0]
    time1 = HAL_GetTick(); // Geçerli zamanı al
 8001018:	f001 f95c 	bl	80022d4 <HAL_GetTick>
 800101c:	ee07 0a90 	vmov	s15, r0
 8001020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001024:	4bb8      	ldr	r3, [pc, #736]	@ (8001308 <mpu6050+0x300>)
 8001026:	edc3 7a00 	vstr	s15, [r3]
    elapsedtime1 = (time1 - prevtime1) * 1000; // Geçen süreyi hesapla
 800102a:	4bb7      	ldr	r3, [pc, #732]	@ (8001308 <mpu6050+0x300>)
 800102c:	ed93 7a00 	vldr	s14, [r3]
 8001030:	4bb6      	ldr	r3, [pc, #728]	@ (800130c <mpu6050+0x304>)
 8001032:	edd3 7a00 	vldr	s15, [r3]
 8001036:	ee77 7a67 	vsub.f32	s15, s14, s15
 800103a:	ed9f 7ab5 	vldr	s14, [pc, #724]	@ 8001310 <mpu6050+0x308>
 800103e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001042:	4bb4      	ldr	r3, [pc, #720]	@ (8001314 <mpu6050+0x30c>)
 8001044:	edc3 7a00 	vstr	s15, [r3]

    // İvmeölçer verilerini oku
    tuffer[0] = 0x3B; // İvmeölçer veri başlangıç adresi
 8001048:	4bb3      	ldr	r3, [pc, #716]	@ (8001318 <mpu6050+0x310>)
 800104a:	223b      	movs	r2, #59	@ 0x3b
 800104c:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, tuffer, 1, HAL_MAX_DELAY); // Adresi gönder
 800104e:	f04f 33ff 	mov.w	r3, #4294967295
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	2301      	movs	r3, #1
 8001056:	4ab0      	ldr	r2, [pc, #704]	@ (8001318 <mpu6050+0x310>)
 8001058:	21d0      	movs	r1, #208	@ 0xd0
 800105a:	48b0      	ldr	r0, [pc, #704]	@ (800131c <mpu6050+0x314>)
 800105c:	f002 f878 	bl	8003150 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDR, tuffer, 6, HAL_MAX_DELAY); // 6 bayt veri al
 8001060:	f04f 33ff 	mov.w	r3, #4294967295
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2306      	movs	r3, #6
 8001068:	4aab      	ldr	r2, [pc, #684]	@ (8001318 <mpu6050+0x310>)
 800106a:	21d0      	movs	r1, #208	@ 0xd0
 800106c:	48ab      	ldr	r0, [pc, #684]	@ (800131c <mpu6050+0x314>)
 800106e:	f002 f96d 	bl	800334c <HAL_I2C_Master_Receive>

    // Ham ivmeölçer verilerini birleştir
    acc_raw[0] = (tuffer[0] << 8 | tuffer[1]); // X ekseni
 8001072:	4ba9      	ldr	r3, [pc, #676]	@ (8001318 <mpu6050+0x310>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	b21a      	sxth	r2, r3
 800107a:	4ba7      	ldr	r3, [pc, #668]	@ (8001318 <mpu6050+0x310>)
 800107c:	785b      	ldrb	r3, [r3, #1]
 800107e:	b21b      	sxth	r3, r3
 8001080:	4313      	orrs	r3, r2
 8001082:	b21a      	sxth	r2, r3
 8001084:	4ba6      	ldr	r3, [pc, #664]	@ (8001320 <mpu6050+0x318>)
 8001086:	801a      	strh	r2, [r3, #0]
    acc_raw[1] = (tuffer[2] << 8 | tuffer[3]); // Y ekseni
 8001088:	4ba3      	ldr	r3, [pc, #652]	@ (8001318 <mpu6050+0x310>)
 800108a:	789b      	ldrb	r3, [r3, #2]
 800108c:	021b      	lsls	r3, r3, #8
 800108e:	b21a      	sxth	r2, r3
 8001090:	4ba1      	ldr	r3, [pc, #644]	@ (8001318 <mpu6050+0x310>)
 8001092:	78db      	ldrb	r3, [r3, #3]
 8001094:	b21b      	sxth	r3, r3
 8001096:	4313      	orrs	r3, r2
 8001098:	b21a      	sxth	r2, r3
 800109a:	4ba1      	ldr	r3, [pc, #644]	@ (8001320 <mpu6050+0x318>)
 800109c:	805a      	strh	r2, [r3, #2]
    acc_raw[2] = (tuffer[4] << 8 | tuffer[5]); // Z ekseni
 800109e:	4b9e      	ldr	r3, [pc, #632]	@ (8001318 <mpu6050+0x310>)
 80010a0:	791b      	ldrb	r3, [r3, #4]
 80010a2:	021b      	lsls	r3, r3, #8
 80010a4:	b21a      	sxth	r2, r3
 80010a6:	4b9c      	ldr	r3, [pc, #624]	@ (8001318 <mpu6050+0x310>)
 80010a8:	795b      	ldrb	r3, [r3, #5]
 80010aa:	b21b      	sxth	r3, r3
 80010ac:	4313      	orrs	r3, r2
 80010ae:	b21a      	sxth	r2, r3
 80010b0:	4b9b      	ldr	r3, [pc, #620]	@ (8001320 <mpu6050+0x318>)
 80010b2:	809a      	strh	r2, [r3, #4]

    // Sıcaklık verisini oku
    buffer[0] = 0x41; // Sıcaklık veri başlangıç adresi
 80010b4:	4b9b      	ldr	r3, [pc, #620]	@ (8001324 <mpu6050+0x31c>)
 80010b6:	2241      	movs	r2, #65	@ 0x41
 80010b8:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, buffer, 1, HAL_MAX_DELAY); // Adresi gönder
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2301      	movs	r3, #1
 80010c2:	4a98      	ldr	r2, [pc, #608]	@ (8001324 <mpu6050+0x31c>)
 80010c4:	21d0      	movs	r1, #208	@ 0xd0
 80010c6:	4895      	ldr	r0, [pc, #596]	@ (800131c <mpu6050+0x314>)
 80010c8:	f002 f842 	bl	8003150 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDR, buffer, 2, HAL_MAX_DELAY); // 2 bayt veri al
 80010cc:	f04f 33ff 	mov.w	r3, #4294967295
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	2302      	movs	r3, #2
 80010d4:	4a93      	ldr	r2, [pc, #588]	@ (8001324 <mpu6050+0x31c>)
 80010d6:	21d0      	movs	r1, #208	@ 0xd0
 80010d8:	4890      	ldr	r0, [pc, #576]	@ (800131c <mpu6050+0x314>)
 80010da:	f002 f937 	bl	800334c <HAL_I2C_Master_Receive>

    // Ham sıcaklık verisini birleştir ve gerçek sıcaklığa çevir
    raw_temp = (buffer[0] << 8 | buffer[1]);
 80010de:	4b91      	ldr	r3, [pc, #580]	@ (8001324 <mpu6050+0x31c>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	021b      	lsls	r3, r3, #8
 80010e4:	b21a      	sxth	r2, r3
 80010e6:	4b8f      	ldr	r3, [pc, #572]	@ (8001324 <mpu6050+0x31c>)
 80010e8:	785b      	ldrb	r3, [r3, #1]
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	4313      	orrs	r3, r2
 80010ee:	b21a      	sxth	r2, r3
 80010f0:	4b8d      	ldr	r3, [pc, #564]	@ (8001328 <mpu6050+0x320>)
 80010f2:	801a      	strh	r2, [r3, #0]
    temp = (raw_temp / 340.0) + 36.53; // MPU6050 datasheet formülüne göre hesaplama
 80010f4:	4b8c      	ldr	r3, [pc, #560]	@ (8001328 <mpu6050+0x320>)
 80010f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fa0a 	bl	8000514 <__aeabi_i2d>
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	4b89      	ldr	r3, [pc, #548]	@ (800132c <mpu6050+0x324>)
 8001106:	f7ff fb99 	bl	800083c <__aeabi_ddiv>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4610      	mov	r0, r2
 8001110:	4619      	mov	r1, r3
 8001112:	a377      	add	r3, pc, #476	@ (adr r3, 80012f0 <mpu6050+0x2e8>)
 8001114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001118:	f7ff f8b0 	bl	800027c <__adddf3>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	4610      	mov	r0, r2
 8001122:	4619      	mov	r1, r3
 8001124:	f7ff fd38 	bl	8000b98 <__aeabi_d2f>
 8001128:	4603      	mov	r3, r0
 800112a:	4a81      	ldr	r2, [pc, #516]	@ (8001330 <mpu6050+0x328>)
 800112c:	6013      	str	r3, [r2, #0]

    // Jiroskop verilerini oku
    cuffer[0] = 0x43; // Jiroskop veri başlangıç adresi
 800112e:	4b81      	ldr	r3, [pc, #516]	@ (8001334 <mpu6050+0x32c>)
 8001130:	2243      	movs	r2, #67	@ 0x43
 8001132:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, cuffer, 1, HAL_MAX_DELAY); // Adresi gönder
 8001134:	f04f 33ff 	mov.w	r3, #4294967295
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2301      	movs	r3, #1
 800113c:	4a7d      	ldr	r2, [pc, #500]	@ (8001334 <mpu6050+0x32c>)
 800113e:	21d0      	movs	r1, #208	@ 0xd0
 8001140:	4876      	ldr	r0, [pc, #472]	@ (800131c <mpu6050+0x314>)
 8001142:	f002 f805 	bl	8003150 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDR, cuffer, 6, HAL_MAX_DELAY); // 6 bayt veri al
 8001146:	f04f 33ff 	mov.w	r3, #4294967295
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	2306      	movs	r3, #6
 800114e:	4a79      	ldr	r2, [pc, #484]	@ (8001334 <mpu6050+0x32c>)
 8001150:	21d0      	movs	r1, #208	@ 0xd0
 8001152:	4872      	ldr	r0, [pc, #456]	@ (800131c <mpu6050+0x314>)
 8001154:	f002 f8fa 	bl	800334c <HAL_I2C_Master_Receive>

    // Ham jiroskop verilerini birleştir ve kalibrasyon değerlerini çıkar
    gyro_raw[0] = (cuffer[0] << 8 | cuffer[1]) - gyro_cal[0]; // X ekseni
 8001158:	4b76      	ldr	r3, [pc, #472]	@ (8001334 <mpu6050+0x32c>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	4a75      	ldr	r2, [pc, #468]	@ (8001334 <mpu6050+0x32c>)
 8001160:	7852      	ldrb	r2, [r2, #1]
 8001162:	4313      	orrs	r3, r2
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800116c:	4b72      	ldr	r3, [pc, #456]	@ (8001338 <mpu6050+0x330>)
 800116e:	edd3 7a00 	vldr	s15, [r3]
 8001172:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001176:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800117a:	ee17 3a90 	vmov	r3, s15
 800117e:	b21a      	sxth	r2, r3
 8001180:	4b6e      	ldr	r3, [pc, #440]	@ (800133c <mpu6050+0x334>)
 8001182:	801a      	strh	r2, [r3, #0]
    gyro_raw[1] = (cuffer[2] << 8 | cuffer[3]) - gyro_cal[1]; // Y ekseni
 8001184:	4b6b      	ldr	r3, [pc, #428]	@ (8001334 <mpu6050+0x32c>)
 8001186:	789b      	ldrb	r3, [r3, #2]
 8001188:	021b      	lsls	r3, r3, #8
 800118a:	4a6a      	ldr	r2, [pc, #424]	@ (8001334 <mpu6050+0x32c>)
 800118c:	78d2      	ldrb	r2, [r2, #3]
 800118e:	4313      	orrs	r3, r2
 8001190:	ee07 3a90 	vmov	s15, r3
 8001194:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001198:	4b67      	ldr	r3, [pc, #412]	@ (8001338 <mpu6050+0x330>)
 800119a:	edd3 7a01 	vldr	s15, [r3, #4]
 800119e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a6:	ee17 3a90 	vmov	r3, s15
 80011aa:	b21a      	sxth	r2, r3
 80011ac:	4b63      	ldr	r3, [pc, #396]	@ (800133c <mpu6050+0x334>)
 80011ae:	805a      	strh	r2, [r3, #2]
    gyro_raw[2] = (cuffer[4] << 8 | cuffer[5]) - gyro_cal[2]; // Z ekseni
 80011b0:	4b60      	ldr	r3, [pc, #384]	@ (8001334 <mpu6050+0x32c>)
 80011b2:	791b      	ldrb	r3, [r3, #4]
 80011b4:	021b      	lsls	r3, r3, #8
 80011b6:	4a5f      	ldr	r2, [pc, #380]	@ (8001334 <mpu6050+0x32c>)
 80011b8:	7952      	ldrb	r2, [r2, #5]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	ee07 3a90 	vmov	s15, r3
 80011c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011c4:	4b5c      	ldr	r3, [pc, #368]	@ (8001338 <mpu6050+0x330>)
 80011c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80011ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011d2:	ee17 3a90 	vmov	r3, s15
 80011d6:	b21a      	sxth	r2, r3
 80011d8:	4b58      	ldr	r3, [pc, #352]	@ (800133c <mpu6050+0x334>)
 80011da:	809a      	strh	r2, [r3, #4]

    // Jiroskop verilerini kullanarak açıları güncelle
    angle_pitch_gyro += gyro_raw[0] * 0.0000611; // Pitch açısı
 80011dc:	4b58      	ldr	r3, [pc, #352]	@ (8001340 <mpu6050+0x338>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff f9a9 	bl	8000538 <__aeabi_f2d>
 80011e6:	4604      	mov	r4, r0
 80011e8:	460d      	mov	r5, r1
 80011ea:	4b54      	ldr	r3, [pc, #336]	@ (800133c <mpu6050+0x334>)
 80011ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff f98f 	bl	8000514 <__aeabi_i2d>
 80011f6:	a340      	add	r3, pc, #256	@ (adr r3, 80012f8 <mpu6050+0x2f0>)
 80011f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fc:	f7ff f9f4 	bl	80005e8 <__aeabi_dmul>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4620      	mov	r0, r4
 8001206:	4629      	mov	r1, r5
 8001208:	f7ff f838 	bl	800027c <__adddf3>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	f7ff fcc0 	bl	8000b98 <__aeabi_d2f>
 8001218:	4603      	mov	r3, r0
 800121a:	4a49      	ldr	r2, [pc, #292]	@ (8001340 <mpu6050+0x338>)
 800121c:	6013      	str	r3, [r2, #0]
    angle_roll_gyro += gyro_raw[1] * 0.0000611; // Roll açısı
 800121e:	4b49      	ldr	r3, [pc, #292]	@ (8001344 <mpu6050+0x33c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f988 	bl	8000538 <__aeabi_f2d>
 8001228:	4604      	mov	r4, r0
 800122a:	460d      	mov	r5, r1
 800122c:	4b43      	ldr	r3, [pc, #268]	@ (800133c <mpu6050+0x334>)
 800122e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f96e 	bl	8000514 <__aeabi_i2d>
 8001238:	a32f      	add	r3, pc, #188	@ (adr r3, 80012f8 <mpu6050+0x2f0>)
 800123a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123e:	f7ff f9d3 	bl	80005e8 <__aeabi_dmul>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4620      	mov	r0, r4
 8001248:	4629      	mov	r1, r5
 800124a:	f7ff f817 	bl	800027c <__adddf3>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4610      	mov	r0, r2
 8001254:	4619      	mov	r1, r3
 8001256:	f7ff fc9f 	bl	8000b98 <__aeabi_d2f>
 800125a:	4603      	mov	r3, r0
 800125c:	4a39      	ldr	r2, [pc, #228]	@ (8001344 <mpu6050+0x33c>)
 800125e:	6013      	str	r3, [r2, #0]

    // Jiroskop verilerini kullanarak birbirine etki eden açıları güncelle
    angle_pitch_gyro += angle_roll_gyro * sin(gyro_raw[2] * 0.000001066);
 8001260:	4b37      	ldr	r3, [pc, #220]	@ (8001340 <mpu6050+0x338>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff f967 	bl	8000538 <__aeabi_f2d>
 800126a:	4604      	mov	r4, r0
 800126c:	460d      	mov	r5, r1
 800126e:	4b35      	ldr	r3, [pc, #212]	@ (8001344 <mpu6050+0x33c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff f960 	bl	8000538 <__aeabi_f2d>
 8001278:	4680      	mov	r8, r0
 800127a:	4689      	mov	r9, r1
 800127c:	4b2f      	ldr	r3, [pc, #188]	@ (800133c <mpu6050+0x334>)
 800127e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff f946 	bl	8000514 <__aeabi_i2d>
 8001288:	a31d      	add	r3, pc, #116	@ (adr r3, 8001300 <mpu6050+0x2f8>)
 800128a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128e:	f7ff f9ab 	bl	80005e8 <__aeabi_dmul>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	ec43 2b17 	vmov	d7, r2, r3
 800129a:	eeb0 0a47 	vmov.f32	s0, s14
 800129e:	eef0 0a67 	vmov.f32	s1, s15
 80012a2:	f005 f8e1 	bl	8006468 <sin>
 80012a6:	ec53 2b10 	vmov	r2, r3, d0
 80012aa:	4640      	mov	r0, r8
 80012ac:	4649      	mov	r1, r9
 80012ae:	f7ff f99b 	bl	80005e8 <__aeabi_dmul>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4620      	mov	r0, r4
 80012b8:	4629      	mov	r1, r5
 80012ba:	f7fe ffdf 	bl	800027c <__adddf3>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4610      	mov	r0, r2
 80012c4:	4619      	mov	r1, r3
 80012c6:	f7ff fc67 	bl	8000b98 <__aeabi_d2f>
 80012ca:	4603      	mov	r3, r0
 80012cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001340 <mpu6050+0x338>)
 80012ce:	6013      	str	r3, [r2, #0]
    angle_roll_gyro += angle_pitch_gyro * sin(gyro_raw[2] * 0.000001066);
 80012d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001344 <mpu6050+0x33c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff f92f 	bl	8000538 <__aeabi_f2d>
 80012da:	4604      	mov	r4, r0
 80012dc:	460d      	mov	r5, r1
 80012de:	4b18      	ldr	r3, [pc, #96]	@ (8001340 <mpu6050+0x338>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff f928 	bl	8000538 <__aeabi_f2d>
 80012e8:	4680      	mov	r8, r0
 80012ea:	4689      	mov	r9, r1
 80012ec:	e02c      	b.n	8001348 <mpu6050+0x340>
 80012ee:	bf00      	nop
 80012f0:	0a3d70a4 	.word	0x0a3d70a4
 80012f4:	404243d7 	.word	0x404243d7
 80012f8:	01d41596 	.word	0x01d41596
 80012fc:	3f10045a 	.word	0x3f10045a
 8001300:	652c6e62 	.word	0x652c6e62
 8001304:	3eb1e26f 	.word	0x3eb1e26f
 8001308:	200001fc 	.word	0x200001fc
 800130c:	200001f8 	.word	0x200001f8
 8001310:	447a0000 	.word	0x447a0000
 8001314:	20000200 	.word	0x20000200
 8001318:	200001ac 	.word	0x200001ac
 800131c:	200000a4 	.word	0x200000a4
 8001320:	200001b8 	.word	0x200001b8
 8001324:	200001a4 	.word	0x200001a4
 8001328:	200001e8 	.word	0x200001e8
 800132c:	40754000 	.word	0x40754000
 8001330:	200001ec 	.word	0x200001ec
 8001334:	200001a8 	.word	0x200001a8
 8001338:	200001c0 	.word	0x200001c0
 800133c:	200001b0 	.word	0x200001b0
 8001340:	200001d0 	.word	0x200001d0
 8001344:	200001d4 	.word	0x200001d4
 8001348:	4ba3      	ldr	r3, [pc, #652]	@ (80015d8 <mpu6050+0x5d0>)
 800134a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff f8e0 	bl	8000514 <__aeabi_i2d>
 8001354:	a396      	add	r3, pc, #600	@ (adr r3, 80015b0 <mpu6050+0x5a8>)
 8001356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135a:	f7ff f945 	bl	80005e8 <__aeabi_dmul>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	ec43 2b17 	vmov	d7, r2, r3
 8001366:	eeb0 0a47 	vmov.f32	s0, s14
 800136a:	eef0 0a67 	vmov.f32	s1, s15
 800136e:	f005 f87b 	bl	8006468 <sin>
 8001372:	ec53 2b10 	vmov	r2, r3, d0
 8001376:	4640      	mov	r0, r8
 8001378:	4649      	mov	r1, r9
 800137a:	f7ff f935 	bl	80005e8 <__aeabi_dmul>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4620      	mov	r0, r4
 8001384:	4629      	mov	r1, r5
 8001386:	f7fe ff79 	bl	800027c <__adddf3>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4610      	mov	r0, r2
 8001390:	4619      	mov	r1, r3
 8001392:	f7ff fc01 	bl	8000b98 <__aeabi_d2f>
 8001396:	4603      	mov	r3, r0
 8001398:	4a90      	ldr	r2, [pc, #576]	@ (80015dc <mpu6050+0x5d4>)
 800139a:	6013      	str	r3, [r2, #0]

    // İvmeölçer verilerinin toplam vektörünü hesapla
    acc_total_vector = sqrt((acc_raw[0] * acc_raw[0]) + (acc_raw[1] * acc_raw[1]) + (acc_raw[2] * acc_raw[2]));
 800139c:	4b90      	ldr	r3, [pc, #576]	@ (80015e0 <mpu6050+0x5d8>)
 800139e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b8e      	ldr	r3, [pc, #568]	@ (80015e0 <mpu6050+0x5d8>)
 80013a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013aa:	fb03 f202 	mul.w	r2, r3, r2
 80013ae:	4b8c      	ldr	r3, [pc, #560]	@ (80015e0 <mpu6050+0x5d8>)
 80013b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013b4:	4619      	mov	r1, r3
 80013b6:	4b8a      	ldr	r3, [pc, #552]	@ (80015e0 <mpu6050+0x5d8>)
 80013b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013bc:	fb01 f303 	mul.w	r3, r1, r3
 80013c0:	441a      	add	r2, r3
 80013c2:	4b87      	ldr	r3, [pc, #540]	@ (80015e0 <mpu6050+0x5d8>)
 80013c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013c8:	4619      	mov	r1, r3
 80013ca:	4b85      	ldr	r3, [pc, #532]	@ (80015e0 <mpu6050+0x5d8>)
 80013cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013d0:	fb01 f303 	mul.w	r3, r1, r3
 80013d4:	4413      	add	r3, r2
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff f89c 	bl	8000514 <__aeabi_i2d>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	ec43 2b10 	vmov	d0, r2, r3
 80013e4:	f005 f80c 	bl	8006400 <sqrt>
 80013e8:	ec53 2b10 	vmov	r2, r3, d0
 80013ec:	4610      	mov	r0, r2
 80013ee:	4619      	mov	r1, r3
 80013f0:	f7ff fbaa 	bl	8000b48 <__aeabi_d2iz>
 80013f4:	4603      	mov	r3, r0
 80013f6:	b21a      	sxth	r2, r3
 80013f8:	4b7a      	ldr	r3, [pc, #488]	@ (80015e4 <mpu6050+0x5dc>)
 80013fa:	801a      	strh	r2, [r3, #0]

    // İvmeölçer verilerini kullanarak açıları hesapla
    angle_pitch_acc = asin((float)acc_raw[1] / acc_total_vector) * 57.296; // Pitch açısı
 80013fc:	4b78      	ldr	r3, [pc, #480]	@ (80015e0 <mpu6050+0x5d8>)
 80013fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001402:	ee07 3a90 	vmov	s15, r3
 8001406:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800140a:	4b76      	ldr	r3, [pc, #472]	@ (80015e4 <mpu6050+0x5dc>)
 800140c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001410:	ee07 3a90 	vmov	s15, r3
 8001414:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001418:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800141c:	ee16 0a90 	vmov	r0, s13
 8001420:	f7ff f88a 	bl	8000538 <__aeabi_f2d>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	ec43 2b10 	vmov	d0, r2, r3
 800142c:	f004 ffb4 	bl	8006398 <asin>
 8001430:	ec51 0b10 	vmov	r0, r1, d0
 8001434:	a360      	add	r3, pc, #384	@ (adr r3, 80015b8 <mpu6050+0x5b0>)
 8001436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143a:	f7ff f8d5 	bl	80005e8 <__aeabi_dmul>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4610      	mov	r0, r2
 8001444:	4619      	mov	r1, r3
 8001446:	f7ff fba7 	bl	8000b98 <__aeabi_d2f>
 800144a:	4603      	mov	r3, r0
 800144c:	4a66      	ldr	r2, [pc, #408]	@ (80015e8 <mpu6050+0x5e0>)
 800144e:	6013      	str	r3, [r2, #0]
    angle_roll_acc = asin((float)acc_raw[0] / acc_total_vector) * -57.296; // Roll açısı
 8001450:	4b63      	ldr	r3, [pc, #396]	@ (80015e0 <mpu6050+0x5d8>)
 8001452:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001456:	ee07 3a90 	vmov	s15, r3
 800145a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800145e:	4b61      	ldr	r3, [pc, #388]	@ (80015e4 <mpu6050+0x5dc>)
 8001460:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001464:	ee07 3a90 	vmov	s15, r3
 8001468:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800146c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001470:	ee16 0a90 	vmov	r0, s13
 8001474:	f7ff f860 	bl	8000538 <__aeabi_f2d>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	ec43 2b10 	vmov	d0, r2, r3
 8001480:	f004 ff8a 	bl	8006398 <asin>
 8001484:	ec51 0b10 	vmov	r0, r1, d0
 8001488:	a34d      	add	r3, pc, #308	@ (adr r3, 80015c0 <mpu6050+0x5b8>)
 800148a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148e:	f7ff f8ab 	bl	80005e8 <__aeabi_dmul>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	4610      	mov	r0, r2
 8001498:	4619      	mov	r1, r3
 800149a:	f7ff fb7d 	bl	8000b98 <__aeabi_d2f>
 800149e:	4603      	mov	r3, r0
 80014a0:	4a52      	ldr	r2, [pc, #328]	@ (80015ec <mpu6050+0x5e4>)
 80014a2:	6013      	str	r3, [r2, #0]

    // Açıları kalibre et (gerekirse)
    angle_pitch_acc -= 0.00;
 80014a4:	4b50      	ldr	r3, [pc, #320]	@ (80015e8 <mpu6050+0x5e0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a4f      	ldr	r2, [pc, #316]	@ (80015e8 <mpu6050+0x5e0>)
 80014aa:	6013      	str	r3, [r2, #0]
    angle_roll_acc -= 0.00;
 80014ac:	4b4f      	ldr	r3, [pc, #316]	@ (80015ec <mpu6050+0x5e4>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a4e      	ldr	r2, [pc, #312]	@ (80015ec <mpu6050+0x5e4>)
 80014b2:	6013      	str	r3, [r2, #0]

    // Jiroskop verilerini ivmeölçer verileriyle birleştir
    if (set_gyro) {
 80014b4:	4b4e      	ldr	r3, [pc, #312]	@ (80015f0 <mpu6050+0x5e8>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d04e      	beq.n	800155a <mpu6050+0x552>
        angle_pitch = angle_pitch_gyro * 0.9996 + angle_pitch_acc * 0.0004; // Pitch açısı
 80014bc:	4b4d      	ldr	r3, [pc, #308]	@ (80015f4 <mpu6050+0x5ec>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff f839 	bl	8000538 <__aeabi_f2d>
 80014c6:	a340      	add	r3, pc, #256	@ (adr r3, 80015c8 <mpu6050+0x5c0>)
 80014c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014cc:	f7ff f88c 	bl	80005e8 <__aeabi_dmul>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4614      	mov	r4, r2
 80014d6:	461d      	mov	r5, r3
 80014d8:	4b43      	ldr	r3, [pc, #268]	@ (80015e8 <mpu6050+0x5e0>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff f82b 	bl	8000538 <__aeabi_f2d>
 80014e2:	a33b      	add	r3, pc, #236	@ (adr r3, 80015d0 <mpu6050+0x5c8>)
 80014e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e8:	f7ff f87e 	bl	80005e8 <__aeabi_dmul>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4620      	mov	r0, r4
 80014f2:	4629      	mov	r1, r5
 80014f4:	f7fe fec2 	bl	800027c <__adddf3>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	4610      	mov	r0, r2
 80014fe:	4619      	mov	r1, r3
 8001500:	f7ff fb4a 	bl	8000b98 <__aeabi_d2f>
 8001504:	4603      	mov	r3, r0
 8001506:	4a3c      	ldr	r2, [pc, #240]	@ (80015f8 <mpu6050+0x5f0>)
 8001508:	6013      	str	r3, [r2, #0]
        angle_roll = angle_roll_gyro * 0.9996 + angle_roll_acc * 0.0004; // Roll açısı
 800150a:	4b34      	ldr	r3, [pc, #208]	@ (80015dc <mpu6050+0x5d4>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff f812 	bl	8000538 <__aeabi_f2d>
 8001514:	a32c      	add	r3, pc, #176	@ (adr r3, 80015c8 <mpu6050+0x5c0>)
 8001516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151a:	f7ff f865 	bl	80005e8 <__aeabi_dmul>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4614      	mov	r4, r2
 8001524:	461d      	mov	r5, r3
 8001526:	4b31      	ldr	r3, [pc, #196]	@ (80015ec <mpu6050+0x5e4>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff f804 	bl	8000538 <__aeabi_f2d>
 8001530:	a327      	add	r3, pc, #156	@ (adr r3, 80015d0 <mpu6050+0x5c8>)
 8001532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001536:	f7ff f857 	bl	80005e8 <__aeabi_dmul>
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	4620      	mov	r0, r4
 8001540:	4629      	mov	r1, r5
 8001542:	f7fe fe9b 	bl	800027c <__adddf3>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4610      	mov	r0, r2
 800154c:	4619      	mov	r1, r3
 800154e:	f7ff fb23 	bl	8000b98 <__aeabi_d2f>
 8001552:	4603      	mov	r3, r0
 8001554:	4a29      	ldr	r2, [pc, #164]	@ (80015fc <mpu6050+0x5f4>)
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	e006      	b.n	8001568 <mpu6050+0x560>
    } else {
        angle_pitch = angle_pitch_acc; // İlk okumada sadece ivmeölçer verilerini kullan
 800155a:	4b23      	ldr	r3, [pc, #140]	@ (80015e8 <mpu6050+0x5e0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a26      	ldr	r2, [pc, #152]	@ (80015f8 <mpu6050+0x5f0>)
 8001560:	6013      	str	r3, [r2, #0]
        set_gyro = true;
 8001562:	4b23      	ldr	r3, [pc, #140]	@ (80015f0 <mpu6050+0x5e8>)
 8001564:	2201      	movs	r2, #1
 8001566:	701a      	strb	r2, [r3, #0]
    }

    // Belirli bir süre beklemek için döngü
    while ((HAL_GetTick() - prevtime) * 1000 < 4000);
 8001568:	bf00      	nop
 800156a:	f000 feb3 	bl	80022d4 <HAL_GetTick>
 800156e:	ee07 0a90 	vmov	s15, r0
 8001572:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001576:	4b22      	ldr	r3, [pc, #136]	@ (8001600 <mpu6050+0x5f8>)
 8001578:	edd3 7a00 	vldr	s15, [r3]
 800157c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001580:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001604 <mpu6050+0x5fc>
 8001584:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001588:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001608 <mpu6050+0x600>
 800158c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001594:	d4e9      	bmi.n	800156a <mpu6050+0x562>
    prevtime = getMillis(); // Zamanı güncelle
 8001596:	f7ff fcc7 	bl	8000f28 <getMillis>
 800159a:	ee07 0a90 	vmov	s15, r0
 800159e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015a2:	4b17      	ldr	r3, [pc, #92]	@ (8001600 <mpu6050+0x5f8>)
 80015a4:	edc3 7a00 	vstr	s15, [r3]
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015b0:	652c6e62 	.word	0x652c6e62
 80015b4:	3eb1e26f 	.word	0x3eb1e26f
 80015b8:	53f7ced9 	.word	0x53f7ced9
 80015bc:	404ca5e3 	.word	0x404ca5e3
 80015c0:	53f7ced9 	.word	0x53f7ced9
 80015c4:	c04ca5e3 	.word	0xc04ca5e3
 80015c8:	23a29c78 	.word	0x23a29c78
 80015cc:	3feffcb9 	.word	0x3feffcb9
 80015d0:	eb1c432d 	.word	0xeb1c432d
 80015d4:	3f3a36e2 	.word	0x3f3a36e2
 80015d8:	200001b0 	.word	0x200001b0
 80015dc:	200001d4 	.word	0x200001d4
 80015e0:	200001b8 	.word	0x200001b8
 80015e4:	200001cc 	.word	0x200001cc
 80015e8:	200001d8 	.word	0x200001d8
 80015ec:	200001dc 	.word	0x200001dc
 80015f0:	20000210 	.word	0x20000210
 80015f4:	200001d0 	.word	0x200001d0
 80015f8:	200001e0 	.word	0x200001e0
 80015fc:	200001e4 	.word	0x200001e4
 8001600:	200001f4 	.word	0x200001f4
 8001604:	447a0000 	.word	0x447a0000
 8001608:	457a0000 	.word	0x457a0000

0800160c <pid_kontrol_dongusu>:

// PID kontrol döngüsü
// Bu fonksiyon bir timer interrupt içinde çağrılmalıdır.
void pid_kontrol_dongusu() {
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0

	 // Delta zamanı hesapla
	 uint32_t simdiki_zaman = getMillis();
 8001612:	f7ff fc89 	bl	8000f28 <getMillis>
 8001616:	6078      	str	r0, [r7, #4]
	 uint32_t delta_zaman = simdiki_zaman - onceki_zaman;
 8001618:	4b41      	ldr	r3, [pc, #260]	@ (8001720 <pid_kontrol_dongusu+0x114>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	603b      	str	r3, [r7, #0]

    // Açı değerini oku
    mevcut_aci = fabs(angle_pitch);
 8001622:	4b40      	ldr	r3, [pc, #256]	@ (8001724 <pid_kontrol_dongusu+0x118>)
 8001624:	edd3 7a00 	vldr	s15, [r3]
 8001628:	eef0 7ae7 	vabs.f32	s15, s15
 800162c:	4b3e      	ldr	r3, [pc, #248]	@ (8001728 <pid_kontrol_dongusu+0x11c>)
 800162e:	edc3 7a00 	vstr	s15, [r3]
    printf("Mevcut aci: %f\n", mevcut_aci); // @suppress("Float formatting support")
 8001632:	4b3d      	ldr	r3, [pc, #244]	@ (8001728 <pid_kontrol_dongusu+0x11c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe ff7e 	bl	8000538 <__aeabi_f2d>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	483a      	ldr	r0, [pc, #232]	@ (800172c <pid_kontrol_dongusu+0x120>)
 8001642:	f004 f83b 	bl	80056bc <iprintf>

    // Hata hesapla
    hata = hedef_aci - mevcut_aci;
 8001646:	4b3a      	ldr	r3, [pc, #232]	@ (8001730 <pid_kontrol_dongusu+0x124>)
 8001648:	ed93 7a00 	vldr	s14, [r3]
 800164c:	4b36      	ldr	r3, [pc, #216]	@ (8001728 <pid_kontrol_dongusu+0x11c>)
 800164e:	edd3 7a00 	vldr	s15, [r3]
 8001652:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001656:	4b37      	ldr	r3, [pc, #220]	@ (8001734 <pid_kontrol_dongusu+0x128>)
 8001658:	edc3 7a00 	vstr	s15, [r3]

    // İntegral hata hesapla
    toplam_hata = toplam_hata + (hata * delta_zaman);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	ee07 3a90 	vmov	s15, r3
 8001662:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001666:	4b33      	ldr	r3, [pc, #204]	@ (8001734 <pid_kontrol_dongusu+0x128>)
 8001668:	edd3 7a00 	vldr	s15, [r3]
 800166c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001670:	4b31      	ldr	r3, [pc, #196]	@ (8001738 <pid_kontrol_dongusu+0x12c>)
 8001672:	edd3 7a00 	vldr	s15, [r3]
 8001676:	ee77 7a27 	vadd.f32	s15, s14, s15
 800167a:	4b2f      	ldr	r3, [pc, #188]	@ (8001738 <pid_kontrol_dongusu+0x12c>)
 800167c:	edc3 7a00 	vstr	s15, [r3]

    // Türevsel hata hesapla
    turevsel_hata = (hata - onceki_hata) / delta_zaman;
 8001680:	4b2c      	ldr	r3, [pc, #176]	@ (8001734 <pid_kontrol_dongusu+0x128>)
 8001682:	ed93 7a00 	vldr	s14, [r3]
 8001686:	4b2d      	ldr	r3, [pc, #180]	@ (800173c <pid_kontrol_dongusu+0x130>)
 8001688:	edd3 7a00 	vldr	s15, [r3]
 800168c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	ee07 3a90 	vmov	s15, r3
 8001696:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800169a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800169e:	4b28      	ldr	r3, [pc, #160]	@ (8001740 <pid_kontrol_dongusu+0x134>)
 80016a0:	edc3 7a00 	vstr	s15, [r3]

    // PID çıktısını hesapla
    pid_cikti = (Kp * hata) + (Ki * toplam_hata) + (Kd * turevsel_hata);
 80016a4:	4b27      	ldr	r3, [pc, #156]	@ (8001744 <pid_kontrol_dongusu+0x138>)
 80016a6:	ed93 7a00 	vldr	s14, [r3]
 80016aa:	4b22      	ldr	r3, [pc, #136]	@ (8001734 <pid_kontrol_dongusu+0x128>)
 80016ac:	edd3 7a00 	vldr	s15, [r3]
 80016b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016b4:	4b24      	ldr	r3, [pc, #144]	@ (8001748 <pid_kontrol_dongusu+0x13c>)
 80016b6:	edd3 6a00 	vldr	s13, [r3]
 80016ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001738 <pid_kontrol_dongusu+0x12c>)
 80016bc:	edd3 7a00 	vldr	s15, [r3]
 80016c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016c8:	4b20      	ldr	r3, [pc, #128]	@ (800174c <pid_kontrol_dongusu+0x140>)
 80016ca:	edd3 6a00 	vldr	s13, [r3]
 80016ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001740 <pid_kontrol_dongusu+0x134>)
 80016d0:	edd3 7a00 	vldr	s15, [r3]
 80016d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001750 <pid_kontrol_dongusu+0x144>)
 80016de:	edc3 7a00 	vstr	s15, [r3]

    // Önceki hatayı ve zamanı güncelle
    onceki_hata = hata;
 80016e2:	4b14      	ldr	r3, [pc, #80]	@ (8001734 <pid_kontrol_dongusu+0x128>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a15      	ldr	r2, [pc, #84]	@ (800173c <pid_kontrol_dongusu+0x130>)
 80016e8:	6013      	str	r3, [r2, #0]
    onceki_zaman = simdiki_zaman;
 80016ea:	4a0d      	ldr	r2, [pc, #52]	@ (8001720 <pid_kontrol_dongusu+0x114>)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6013      	str	r3, [r2, #0]

    printf("Mevcut aci: %f\t", mevcut_aci); // @suppress("Float formatting support")
 80016f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001728 <pid_kontrol_dongusu+0x11c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7fe ff1f 	bl	8000538 <__aeabi_f2d>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4815      	ldr	r0, [pc, #84]	@ (8001754 <pid_kontrol_dongusu+0x148>)
 8001700:	f003 ffdc 	bl	80056bc <iprintf>
    printf("PID cikti: %f\n", pid_cikti); // @suppress("Float formatting support")
 8001704:	4b12      	ldr	r3, [pc, #72]	@ (8001750 <pid_kontrol_dongusu+0x144>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe ff15 	bl	8000538 <__aeabi_f2d>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4811      	ldr	r0, [pc, #68]	@ (8001758 <pid_kontrol_dongusu+0x14c>)
 8001714:	f003 ffd2 	bl	80056bc <iprintf>
}
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	2000022c 	.word	0x2000022c
 8001724:	200001e0 	.word	0x200001e0
 8001728:	20000214 	.word	0x20000214
 800172c:	08007aa0 	.word	0x08007aa0
 8001730:	2000000c 	.word	0x2000000c
 8001734:	2000021c 	.word	0x2000021c
 8001738:	20000228 	.word	0x20000228
 800173c:	20000224 	.word	0x20000224
 8001740:	20000220 	.word	0x20000220
 8001744:	20000000 	.word	0x20000000
 8001748:	20000004 	.word	0x20000004
 800174c:	20000008 	.word	0x20000008
 8001750:	20000218 	.word	0x20000218
 8001754:	08007ab0 	.word	0x08007ab0
 8001758:	08007ac0 	.word	0x08007ac0

0800175c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001762:	f000 fd51 	bl	8002208 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001766:	f000 f997 	bl	8001a98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800176a:	f000 fad1 	bl	8001d10 <MX_GPIO_Init>
  MX_DMA_Init();
 800176e:	f000 faaf 	bl	8001cd0 <MX_DMA_Init>
  MX_TIM1_Init();
 8001772:	f000 fa29 	bl	8001bc8 <MX_TIM1_Init>
  MX_I2C1_Init();
 8001776:	f000 f9f9 	bl	8001b6c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

// MPU6050 Konfigürasyonu

  data = 0x00;
 800177a:	4bb6      	ldr	r3, [pc, #728]	@ (8001a54 <main+0x2f8>)
 800177c:	2200      	movs	r2, #0
 800177e:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, HAL_MAX_DELAY);
 8001780:	f04f 33ff 	mov.w	r3, #4294967295
 8001784:	9302      	str	r3, [sp, #8]
 8001786:	2301      	movs	r3, #1
 8001788:	9301      	str	r3, [sp, #4]
 800178a:	4bb2      	ldr	r3, [pc, #712]	@ (8001a54 <main+0x2f8>)
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	2301      	movs	r3, #1
 8001790:	226b      	movs	r2, #107	@ 0x6b
 8001792:	21d0      	movs	r1, #208	@ 0xd0
 8001794:	48b0      	ldr	r0, [pc, #704]	@ (8001a58 <main+0x2fc>)
 8001796:	f002 f80b 	bl	80037b0 <HAL_I2C_Mem_Write>
  // Sensörü uyandır ve iç saatini kullanmak üzere ayarla

  data = 0x08;
 800179a:	4bae      	ldr	r3, [pc, #696]	@ (8001a54 <main+0x2f8>)
 800179c:	2208      	movs	r2, #8
 800179e:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CNFG_REG, 1, &data, 1, HAL_MAX_DELAY);
 80017a0:	f04f 33ff 	mov.w	r3, #4294967295
 80017a4:	9302      	str	r3, [sp, #8]
 80017a6:	2301      	movs	r3, #1
 80017a8:	9301      	str	r3, [sp, #4]
 80017aa:	4baa      	ldr	r3, [pc, #680]	@ (8001a54 <main+0x2f8>)
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	2301      	movs	r3, #1
 80017b0:	221b      	movs	r2, #27
 80017b2:	21d0      	movs	r1, #208	@ 0xd0
 80017b4:	48a8      	ldr	r0, [pc, #672]	@ (8001a58 <main+0x2fc>)
 80017b6:	f001 fffb 	bl	80037b0 <HAL_I2C_Mem_Write>
  // Jiroskop için hassasiyeti ayarla (±500 derece/saniye)

  data = 0x10;
 80017ba:	4ba6      	ldr	r3, [pc, #664]	@ (8001a54 <main+0x2f8>)
 80017bc:	2210      	movs	r2, #16
 80017be:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACC_CNFG_REG, 1, &data, 1, HAL_MAX_DELAY);
 80017c0:	f04f 33ff 	mov.w	r3, #4294967295
 80017c4:	9302      	str	r3, [sp, #8]
 80017c6:	2301      	movs	r3, #1
 80017c8:	9301      	str	r3, [sp, #4]
 80017ca:	4ba2      	ldr	r3, [pc, #648]	@ (8001a54 <main+0x2f8>)
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	2301      	movs	r3, #1
 80017d0:	221c      	movs	r2, #28
 80017d2:	21d0      	movs	r1, #208	@ 0xd0
 80017d4:	48a0      	ldr	r0, [pc, #640]	@ (8001a58 <main+0x2fc>)
 80017d6:	f001 ffeb 	bl	80037b0 <HAL_I2C_Mem_Write>
  // İvmeölçer için hassasiyeti ayarla (±8g)

  // Jiroskop kalibrasyonu için 2000 ölçüm yap
  for (i = 0; i < 2000; i++) {
 80017da:	4ba0      	ldr	r3, [pc, #640]	@ (8001a5c <main+0x300>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	e086      	b.n	80018f0 <main+0x194>
      prevtime2 = time2; // Önceki zamanı sakla
 80017e2:	4b9f      	ldr	r3, [pc, #636]	@ (8001a60 <main+0x304>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a9f      	ldr	r2, [pc, #636]	@ (8001a64 <main+0x308>)
 80017e8:	6013      	str	r3, [r2, #0]
      time2 = HAL_GetTick(); // Geçerli zamanı al
 80017ea:	f000 fd73 	bl	80022d4 <HAL_GetTick>
 80017ee:	ee07 0a90 	vmov	s15, r0
 80017f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017f6:	4b9a      	ldr	r3, [pc, #616]	@ (8001a60 <main+0x304>)
 80017f8:	edc3 7a00 	vstr	s15, [r3]
      elapsedtime2 = (time2 - prevtime2) * 1000; // Geçen süreyi hesapla
 80017fc:	4b98      	ldr	r3, [pc, #608]	@ (8001a60 <main+0x304>)
 80017fe:	ed93 7a00 	vldr	s14, [r3]
 8001802:	4b98      	ldr	r3, [pc, #608]	@ (8001a64 <main+0x308>)
 8001804:	edd3 7a00 	vldr	s15, [r3]
 8001808:	ee77 7a67 	vsub.f32	s15, s14, s15
 800180c:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8001a68 <main+0x30c>
 8001810:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001814:	4b95      	ldr	r3, [pc, #596]	@ (8001a6c <main+0x310>)
 8001816:	edc3 7a00 	vstr	s15, [r3]

      cuffer[0] = 0x43; // Jiroskop veri başlangıç adresi
 800181a:	4b95      	ldr	r3, [pc, #596]	@ (8001a70 <main+0x314>)
 800181c:	2243      	movs	r2, #67	@ 0x43
 800181e:	701a      	strb	r2, [r3, #0]
      HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, cuffer, 1, HAL_MAX_DELAY); // Adresi gönder
 8001820:	f04f 33ff 	mov.w	r3, #4294967295
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	2301      	movs	r3, #1
 8001828:	4a91      	ldr	r2, [pc, #580]	@ (8001a70 <main+0x314>)
 800182a:	21d0      	movs	r1, #208	@ 0xd0
 800182c:	488a      	ldr	r0, [pc, #552]	@ (8001a58 <main+0x2fc>)
 800182e:	f001 fc8f 	bl	8003150 <HAL_I2C_Master_Transmit>
      HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDR, cuffer, 6, HAL_MAX_DELAY); // 6 bayt veri al
 8001832:	f04f 33ff 	mov.w	r3, #4294967295
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2306      	movs	r3, #6
 800183a:	4a8d      	ldr	r2, [pc, #564]	@ (8001a70 <main+0x314>)
 800183c:	21d0      	movs	r1, #208	@ 0xd0
 800183e:	4886      	ldr	r0, [pc, #536]	@ (8001a58 <main+0x2fc>)
 8001840:	f001 fd84 	bl	800334c <HAL_I2C_Master_Receive>

      // Ham jiroskop verilerini birleştir
      gyro_raw[0] = (cuffer[0] << 8 | cuffer[1]); // X ekseni
 8001844:	4b8a      	ldr	r3, [pc, #552]	@ (8001a70 <main+0x314>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	021b      	lsls	r3, r3, #8
 800184a:	b21a      	sxth	r2, r3
 800184c:	4b88      	ldr	r3, [pc, #544]	@ (8001a70 <main+0x314>)
 800184e:	785b      	ldrb	r3, [r3, #1]
 8001850:	b21b      	sxth	r3, r3
 8001852:	4313      	orrs	r3, r2
 8001854:	b21a      	sxth	r2, r3
 8001856:	4b87      	ldr	r3, [pc, #540]	@ (8001a74 <main+0x318>)
 8001858:	801a      	strh	r2, [r3, #0]
      gyro_raw[1] = (cuffer[2] << 8 | cuffer[3]); // Y ekseni
 800185a:	4b85      	ldr	r3, [pc, #532]	@ (8001a70 <main+0x314>)
 800185c:	789b      	ldrb	r3, [r3, #2]
 800185e:	021b      	lsls	r3, r3, #8
 8001860:	b21a      	sxth	r2, r3
 8001862:	4b83      	ldr	r3, [pc, #524]	@ (8001a70 <main+0x314>)
 8001864:	78db      	ldrb	r3, [r3, #3]
 8001866:	b21b      	sxth	r3, r3
 8001868:	4313      	orrs	r3, r2
 800186a:	b21a      	sxth	r2, r3
 800186c:	4b81      	ldr	r3, [pc, #516]	@ (8001a74 <main+0x318>)
 800186e:	805a      	strh	r2, [r3, #2]
      gyro_raw[2] = (cuffer[4] << 8 | cuffer[5]); // Z ekseni
 8001870:	4b7f      	ldr	r3, [pc, #508]	@ (8001a70 <main+0x314>)
 8001872:	791b      	ldrb	r3, [r3, #4]
 8001874:	021b      	lsls	r3, r3, #8
 8001876:	b21a      	sxth	r2, r3
 8001878:	4b7d      	ldr	r3, [pc, #500]	@ (8001a70 <main+0x314>)
 800187a:	795b      	ldrb	r3, [r3, #5]
 800187c:	b21b      	sxth	r3, r3
 800187e:	4313      	orrs	r3, r2
 8001880:	b21a      	sxth	r2, r3
 8001882:	4b7c      	ldr	r3, [pc, #496]	@ (8001a74 <main+0x318>)
 8001884:	809a      	strh	r2, [r3, #4]

      // Kalibrasyon değerlerini topla
      gyro_cal[0] += gyro_raw[0];
 8001886:	4b7c      	ldr	r3, [pc, #496]	@ (8001a78 <main+0x31c>)
 8001888:	ed93 7a00 	vldr	s14, [r3]
 800188c:	4b79      	ldr	r3, [pc, #484]	@ (8001a74 <main+0x318>)
 800188e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001892:	ee07 3a90 	vmov	s15, r3
 8001896:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800189a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800189e:	4b76      	ldr	r3, [pc, #472]	@ (8001a78 <main+0x31c>)
 80018a0:	edc3 7a00 	vstr	s15, [r3]
      gyro_cal[1] += gyro_raw[1];
 80018a4:	4b74      	ldr	r3, [pc, #464]	@ (8001a78 <main+0x31c>)
 80018a6:	ed93 7a01 	vldr	s14, [r3, #4]
 80018aa:	4b72      	ldr	r3, [pc, #456]	@ (8001a74 <main+0x318>)
 80018ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018b0:	ee07 3a90 	vmov	s15, r3
 80018b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018bc:	4b6e      	ldr	r3, [pc, #440]	@ (8001a78 <main+0x31c>)
 80018be:	edc3 7a01 	vstr	s15, [r3, #4]
      gyro_cal[2] += gyro_raw[2];
 80018c2:	4b6d      	ldr	r3, [pc, #436]	@ (8001a78 <main+0x31c>)
 80018c4:	ed93 7a02 	vldr	s14, [r3, #8]
 80018c8:	4b6a      	ldr	r3, [pc, #424]	@ (8001a74 <main+0x318>)
 80018ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018ce:	ee07 3a90 	vmov	s15, r3
 80018d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018da:	4b67      	ldr	r3, [pc, #412]	@ (8001a78 <main+0x31c>)
 80018dc:	edc3 7a02 	vstr	s15, [r3, #8]

      HAL_Delay(3); // 3 milisaniye bekle
 80018e0:	2003      	movs	r0, #3
 80018e2:	f000 fd03 	bl	80022ec <HAL_Delay>
  for (i = 0; i < 2000; i++) {
 80018e6:	4b5d      	ldr	r3, [pc, #372]	@ (8001a5c <main+0x300>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	3301      	adds	r3, #1
 80018ec:	4a5b      	ldr	r2, [pc, #364]	@ (8001a5c <main+0x300>)
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	4b5a      	ldr	r3, [pc, #360]	@ (8001a5c <main+0x300>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80018f8:	f6ff af73 	blt.w	80017e2 <main+0x86>
  }

  // Kalibrasyon değerlerinin ortalamasını al
  gyro_cal[0] /= 2000;
 80018fc:	4b5e      	ldr	r3, [pc, #376]	@ (8001a78 <main+0x31c>)
 80018fe:	ed93 7a00 	vldr	s14, [r3]
 8001902:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8001a7c <main+0x320>
 8001906:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800190a:	4b5b      	ldr	r3, [pc, #364]	@ (8001a78 <main+0x31c>)
 800190c:	edc3 7a00 	vstr	s15, [r3]
  gyro_cal[1] /= 2000;
 8001910:	4b59      	ldr	r3, [pc, #356]	@ (8001a78 <main+0x31c>)
 8001912:	ed93 7a01 	vldr	s14, [r3, #4]
 8001916:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8001a7c <main+0x320>
 800191a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800191e:	4b56      	ldr	r3, [pc, #344]	@ (8001a78 <main+0x31c>)
 8001920:	edc3 7a01 	vstr	s15, [r3, #4]
  gyro_cal[2] /= 2000;
 8001924:	4b54      	ldr	r3, [pc, #336]	@ (8001a78 <main+0x31c>)
 8001926:	ed93 7a02 	vldr	s14, [r3, #8]
 800192a:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8001a7c <main+0x320>
 800192e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001932:	4b51      	ldr	r3, [pc, #324]	@ (8001a78 <main+0x31c>)
 8001934:	edc3 7a02 	vstr	s15, [r3, #8]

  // Kalibrasyon işlemi başladığında LED'i yakın
  HAL_GPIO_WritePin(LED_PIN_MPU6050_GPIO_Port, LED_PIN_MPU6050_Pin,GPIO_PIN_SET);
 8001938:	2201      	movs	r2, #1
 800193a:	2120      	movs	r1, #32
 800193c:	4850      	ldr	r0, [pc, #320]	@ (8001a80 <main+0x324>)
 800193e:	f001 faa9 	bl	8002e94 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8001942:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001946:	f000 fcd1 	bl	80022ec <HAL_Delay>
  HAL_GPIO_WritePin(LED_PIN_MPU6050_GPIO_Port, LED_PIN_MPU6050_Pin,GPIO_PIN_RESET);
 800194a:	2200      	movs	r2, #0
 800194c:	2120      	movs	r1, #32
 800194e:	484c      	ldr	r0, [pc, #304]	@ (8001a80 <main+0x324>)
 8001950:	f001 faa0 	bl	8002e94 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8001954:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001958:	f000 fcc8 	bl	80022ec <HAL_Delay>



 // ESC başlangıcı ve kalibrasyonu
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // PWM sinyalini başlat
 800195c:	2100      	movs	r1, #0
 800195e:	4849      	ldr	r0, [pc, #292]	@ (8001a84 <main+0x328>)
 8001960:	f003 f910 	bl	8004b84 <HAL_TIM_PWM_Start>

  #if Calibrate

      TIM1->CCR1 = 100; // CCR1'i 100'e ayarla (genellikle maksimum gaz anlamına gelir)
 8001964:	4b48      	ldr	r3, [pc, #288]	@ (8001a88 <main+0x32c>)
 8001966:	2264      	movs	r2, #100	@ 0x64
 8001968:	635a      	str	r2, [r3, #52]	@ 0x34
      HAL_Delay(2000); // 2 saniye bekle (ESC'nin maksimum gazı algılaması için)
 800196a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800196e:	f000 fcbd 	bl	80022ec <HAL_Delay>
      TIM1->CCR1 = 50; // CCR1'i 50'ye ayarla (genellikle minimum gaz anlamına gelir)
 8001972:	4b45      	ldr	r3, [pc, #276]	@ (8001a88 <main+0x32c>)
 8001974:	2232      	movs	r2, #50	@ 0x32
 8001976:	635a      	str	r2, [r3, #52]	@ 0x34
      HAL_Delay(1000); // 1 saniye bekle (ESC'nin minimum gazı algılaması için)
 8001978:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800197c:	f000 fcb6 	bl	80022ec <HAL_Delay>
      TIM1->CCR1 = 0; // CCR1'i 0'a ayarla (ESC'nin kalibrasyonunu tamamlaması için)
 8001980:	4b41      	ldr	r3, [pc, #260]	@ (8001a88 <main+0x32c>)
 8001982:	2200      	movs	r2, #0
 8001984:	635a      	str	r2, [r3, #52]	@ 0x34
      // Kalibrasyon işlemi tamamlandığında LED'i söndür
      HAL_GPIO_WritePin(LED_PIN_ESC_GPIO_Port, LED_PIN_ESC_Pin,GPIO_PIN_SET);
 8001986:	2201      	movs	r2, #1
 8001988:	2110      	movs	r1, #16
 800198a:	483d      	ldr	r0, [pc, #244]	@ (8001a80 <main+0x324>)
 800198c:	f001 fa82 	bl	8002e94 <HAL_GPIO_WritePin>
      HAL_Delay(500);
 8001990:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001994:	f000 fcaa 	bl	80022ec <HAL_Delay>
      HAL_GPIO_WritePin(LED_PIN_ESC_GPIO_Port, LED_PIN_ESC_Pin,GPIO_PIN_RESET);
 8001998:	2200      	movs	r2, #0
 800199a:	2110      	movs	r1, #16
 800199c:	4838      	ldr	r0, [pc, #224]	@ (8001a80 <main+0x324>)
 800199e:	f001 fa79 	bl	8002e94 <HAL_GPIO_WritePin>
      HAL_Delay(500);
 80019a2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019a6:	f000 fca1 	bl	80022ec <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Buton kontrolü
	  if(HAL_GPIO_ReadPin(BUTON_GPIO_Port, BUTON_Pin) == GPIO_PIN_SET) // Butona basıldı mı kontrol et
 80019aa:	2101      	movs	r1, #1
 80019ac:	4834      	ldr	r0, [pc, #208]	@ (8001a80 <main+0x324>)
 80019ae:	f001 fa59 	bl	8002e64 <HAL_GPIO_ReadPin>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d121      	bne.n	80019fc <main+0x2a0>
	  {
	    motorAktif = !motorAktif; // Motor aktiflik durumunu değiştir
 80019b8:	4b34      	ldr	r3, [pc, #208]	@ (8001a8c <main+0x330>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	bf14      	ite	ne
 80019c0:	2301      	movne	r3, #1
 80019c2:	2300      	moveq	r3, #0
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	f083 0301 	eor.w	r3, r3, #1
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	4b2e      	ldr	r3, [pc, #184]	@ (8001a8c <main+0x330>)
 80019d4:	701a      	strb	r2, [r3, #0]
	    if(motorAktif)
 80019d6:	4b2d      	ldr	r3, [pc, #180]	@ (8001a8c <main+0x330>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d005      	beq.n	80019ea <main+0x28e>
	    {
	      // Motor aktif olduğunda LED'i yak
	      HAL_GPIO_WritePin(LED_PIN_MOTOR_AKTIF_GPIO_Port, LED_PIN_MOTOR_AKTIF_Pin, GPIO_PIN_SET);
 80019de:	2201      	movs	r2, #1
 80019e0:	2102      	movs	r1, #2
 80019e2:	4827      	ldr	r0, [pc, #156]	@ (8001a80 <main+0x324>)
 80019e4:	f001 fa56 	bl	8002e94 <HAL_GPIO_WritePin>
 80019e8:	e004      	b.n	80019f4 <main+0x298>
	    }
	    else
	    {
	      // Motor pasif olduğunda LED'i söndür
	      HAL_GPIO_WritePin(LED_PIN_MOTOR_AKTIF_GPIO_Port, LED_PIN_MOTOR_AKTIF_Pin, GPIO_PIN_RESET);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2102      	movs	r1, #2
 80019ee:	4824      	ldr	r0, [pc, #144]	@ (8001a80 <main+0x324>)
 80019f0:	f001 fa50 	bl	8002e94 <HAL_GPIO_WritePin>
	    }
	    HAL_Delay(500); // Buton debouncing için bekleme süresi
 80019f4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019f8:	f000 fc78 	bl	80022ec <HAL_Delay>
	  }

	  // Motor aktif ise işlemleri yap
	  if(motorAktif)
 80019fc:	4b23      	ldr	r3, [pc, #140]	@ (8001a8c <main+0x330>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d01c      	beq.n	8001a3e <main+0x2e2>
	  {
	    // Motor aktifken yapılacak işlemler
	    mpu6050(); // MPU6050 sensöründen açı ve sıcaklık verilerini okur ve işler.
 8001a04:	f7ff fb00 	bl	8001008 <mpu6050>
	    pid_kontrol_dongusu(); // PID kontrol döngüsünü çalıştırır, hedef açıya ulaşmak için gerekli düzeltmeleri hesaplar.
 8001a08:	f7ff fe00 	bl	800160c <pid_kontrol_dongusu>
	    CCR_guncelle(); // PWM sinyalinin karşılaştırma değerini (CCR), PID kontrol çıktısına göre günceller.
 8001a0c:	f7ff fa94 	bl	8000f38 <CCR_guncelle>
 8001a10:	e7cb      	b.n	80019aa <main+0x24e>
	  else
	  {
	    // Motor pasif ise CCR_degeri'ni yavaşça 50'ye çek
	    while(CCR_degeri > 50.0f)
	    {
	      CCR_degeri -= 0.5; // CCR_degeri'ni 0.5 birim azalt
 8001a12:	4b1f      	ldr	r3, [pc, #124]	@ (8001a90 <main+0x334>)
 8001a14:	edd3 7a00 	vldr	s15, [r3]
 8001a18:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001a1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a20:	4b1b      	ldr	r3, [pc, #108]	@ (8001a90 <main+0x334>)
 8001a22:	edc3 7a00 	vstr	s15, [r3]
	      HAL_Delay(100); // 0.25 saniye bekle
 8001a26:	2064      	movs	r0, #100	@ 0x64
 8001a28:	f000 fc60 	bl	80022ec <HAL_Delay>
	      TIM1->CCR1 = CCR_degeri; // Güncellenen CCR_degeri'ni CCR1'e ata
 8001a2c:	4b18      	ldr	r3, [pc, #96]	@ (8001a90 <main+0x334>)
 8001a2e:	edd3 7a00 	vldr	s15, [r3]
 8001a32:	4b15      	ldr	r3, [pc, #84]	@ (8001a88 <main+0x32c>)
 8001a34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a38:	ee17 2a90 	vmov	r2, s15
 8001a3c:	635a      	str	r2, [r3, #52]	@ 0x34
	    while(CCR_degeri > 50.0f)
 8001a3e:	4b14      	ldr	r3, [pc, #80]	@ (8001a90 <main+0x334>)
 8001a40:	edd3 7a00 	vldr	s15, [r3]
 8001a44:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001a94 <main+0x338>
 8001a48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a50:	dcdf      	bgt.n	8001a12 <main+0x2b6>
	  if(HAL_GPIO_ReadPin(BUTON_GPIO_Port, BUTON_Pin) == GPIO_PIN_SET) // Butona basıldı mı kontrol et
 8001a52:	e7aa      	b.n	80019aa <main+0x24e>
 8001a54:	200001a0 	.word	0x200001a0
 8001a58:	200000a4 	.word	0x200000a4
 8001a5c:	200001f0 	.word	0x200001f0
 8001a60:	20000208 	.word	0x20000208
 8001a64:	20000204 	.word	0x20000204
 8001a68:	447a0000 	.word	0x447a0000
 8001a6c:	2000020c 	.word	0x2000020c
 8001a70:	200001a8 	.word	0x200001a8
 8001a74:	200001b0 	.word	0x200001b0
 8001a78:	200001c0 	.word	0x200001c0
 8001a7c:	44fa0000 	.word	0x44fa0000
 8001a80:	40020000 	.word	0x40020000
 8001a84:	200000f8 	.word	0x200000f8
 8001a88:	40010000 	.word	0x40010000
 8001a8c:	20000238 	.word	0x20000238
 8001a90:	20000230 	.word	0x20000230
 8001a94:	42480000 	.word	0x42480000

08001a98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b094      	sub	sp, #80	@ 0x50
 8001a9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a9e:	f107 0320 	add.w	r3, r7, #32
 8001aa2:	2230      	movs	r2, #48	@ 0x30
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f003 fe5d 	bl	8005766 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aac:	f107 030c 	add.w	r3, r7, #12
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001abc:	2300      	movs	r3, #0
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	4b28      	ldr	r3, [pc, #160]	@ (8001b64 <SystemClock_Config+0xcc>)
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac4:	4a27      	ldr	r2, [pc, #156]	@ (8001b64 <SystemClock_Config+0xcc>)
 8001ac6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aca:	6413      	str	r3, [r2, #64]	@ 0x40
 8001acc:	4b25      	ldr	r3, [pc, #148]	@ (8001b64 <SystemClock_Config+0xcc>)
 8001ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ad8:	2300      	movs	r3, #0
 8001ada:	607b      	str	r3, [r7, #4]
 8001adc:	4b22      	ldr	r3, [pc, #136]	@ (8001b68 <SystemClock_Config+0xd0>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a21      	ldr	r2, [pc, #132]	@ (8001b68 <SystemClock_Config+0xd0>)
 8001ae2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	4b1f      	ldr	r3, [pc, #124]	@ (8001b68 <SystemClock_Config+0xd0>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001af0:	607b      	str	r3, [r7, #4]
 8001af2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001af4:	2301      	movs	r3, #1
 8001af6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001af8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001afc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001afe:	2302      	movs	r3, #2
 8001b00:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b02:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b08:	2304      	movs	r3, #4
 8001b0a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b0c:	23a8      	movs	r3, #168	@ 0xa8
 8001b0e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b10:	2302      	movs	r3, #2
 8001b12:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b14:	2307      	movs	r3, #7
 8001b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b18:	f107 0320 	add.w	r3, r7, #32
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f002 fb5d 	bl	80041dc <HAL_RCC_OscConfig>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b28:	f000 f950 	bl	8001dcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b2c:	230f      	movs	r3, #15
 8001b2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b30:	2302      	movs	r3, #2
 8001b32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8001b38:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001b3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8001b3e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001b42:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b44:	f107 030c 	add.w	r3, r7, #12
 8001b48:	2105      	movs	r1, #5
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f002 fdbe 	bl	80046cc <HAL_RCC_ClockConfig>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b56:	f000 f939 	bl	8001dcc <Error_Handler>
  }
}
 8001b5a:	bf00      	nop
 8001b5c:	3750      	adds	r7, #80	@ 0x50
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40007000 	.word	0x40007000

08001b6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b70:	4b12      	ldr	r3, [pc, #72]	@ (8001bbc <MX_I2C1_Init+0x50>)
 8001b72:	4a13      	ldr	r2, [pc, #76]	@ (8001bc0 <MX_I2C1_Init+0x54>)
 8001b74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001b76:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <MX_I2C1_Init+0x50>)
 8001b78:	4a12      	ldr	r2, [pc, #72]	@ (8001bc4 <MX_I2C1_Init+0x58>)
 8001b7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bbc <MX_I2C1_Init+0x50>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b82:	4b0e      	ldr	r3, [pc, #56]	@ (8001bbc <MX_I2C1_Init+0x50>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b88:	4b0c      	ldr	r3, [pc, #48]	@ (8001bbc <MX_I2C1_Init+0x50>)
 8001b8a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b90:	4b0a      	ldr	r3, [pc, #40]	@ (8001bbc <MX_I2C1_Init+0x50>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b96:	4b09      	ldr	r3, [pc, #36]	@ (8001bbc <MX_I2C1_Init+0x50>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b9c:	4b07      	ldr	r3, [pc, #28]	@ (8001bbc <MX_I2C1_Init+0x50>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ba2:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <MX_I2C1_Init+0x50>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ba8:	4804      	ldr	r0, [pc, #16]	@ (8001bbc <MX_I2C1_Init+0x50>)
 8001baa:	f001 f98d 	bl	8002ec8 <HAL_I2C_Init>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001bb4:	f000 f90a 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	200000a4 	.word	0x200000a4
 8001bc0:	40005400 	.word	0x40005400
 8001bc4:	00061a80 	.word	0x00061a80

08001bc8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b092      	sub	sp, #72	@ 0x48
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bce:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
 8001be8:	615a      	str	r2, [r3, #20]
 8001bea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	2220      	movs	r2, #32
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f003 fdb7 	bl	8005766 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bf8:	4b33      	ldr	r3, [pc, #204]	@ (8001cc8 <MX_TIM1_Init+0x100>)
 8001bfa:	4a34      	ldr	r2, [pc, #208]	@ (8001ccc <MX_TIM1_Init+0x104>)
 8001bfc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 420-1;
 8001bfe:	4b32      	ldr	r3, [pc, #200]	@ (8001cc8 <MX_TIM1_Init+0x100>)
 8001c00:	f240 12a3 	movw	r2, #419	@ 0x1a3
 8001c04:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c06:	4b30      	ldr	r3, [pc, #192]	@ (8001cc8 <MX_TIM1_Init+0x100>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001c0c:	4b2e      	ldr	r3, [pc, #184]	@ (8001cc8 <MX_TIM1_Init+0x100>)
 8001c0e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c12:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c14:	4b2c      	ldr	r3, [pc, #176]	@ (8001cc8 <MX_TIM1_Init+0x100>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c1a:	4b2b      	ldr	r3, [pc, #172]	@ (8001cc8 <MX_TIM1_Init+0x100>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c20:	4b29      	ldr	r3, [pc, #164]	@ (8001cc8 <MX_TIM1_Init+0x100>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c26:	4828      	ldr	r0, [pc, #160]	@ (8001cc8 <MX_TIM1_Init+0x100>)
 8001c28:	f002 ff5c 	bl	8004ae4 <HAL_TIM_PWM_Init>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001c32:	f000 f8cb 	bl	8001dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c36:	2300      	movs	r3, #0
 8001c38:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c3e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c42:	4619      	mov	r1, r3
 8001c44:	4820      	ldr	r0, [pc, #128]	@ (8001cc8 <MX_TIM1_Init+0x100>)
 8001c46:	f003 fba9 	bl	800539c <HAL_TIMEx_MasterConfigSynchronization>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8001c50:	f000 f8bc 	bl	8001dcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c54:	2360      	movs	r3, #96	@ 0x60
 8001c56:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c60:	2300      	movs	r3, #0
 8001c62:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c64:	2300      	movs	r3, #0
 8001c66:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c74:	2200      	movs	r2, #0
 8001c76:	4619      	mov	r1, r3
 8001c78:	4813      	ldr	r0, [pc, #76]	@ (8001cc8 <MX_TIM1_Init+0x100>)
 8001c7a:	f003 f84b 	bl	8004d14 <HAL_TIM_PWM_ConfigChannel>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001c84:	f000 f8a2 	bl	8001dcc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ca0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ca6:	1d3b      	adds	r3, r7, #4
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4807      	ldr	r0, [pc, #28]	@ (8001cc8 <MX_TIM1_Init+0x100>)
 8001cac:	f003 fbf2 	bl	8005494 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8001cb6:	f000 f889 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001cba:	4803      	ldr	r0, [pc, #12]	@ (8001cc8 <MX_TIM1_Init+0x100>)
 8001cbc:	f000 f950 	bl	8001f60 <HAL_TIM_MspPostInit>

}
 8001cc0:	bf00      	nop
 8001cc2:	3748      	adds	r7, #72	@ 0x48
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	200000f8 	.word	0x200000f8
 8001ccc:	40010000 	.word	0x40010000

08001cd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	607b      	str	r3, [r7, #4]
 8001cda:	4b0c      	ldr	r3, [pc, #48]	@ (8001d0c <MX_DMA_Init+0x3c>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cde:	4a0b      	ldr	r2, [pc, #44]	@ (8001d0c <MX_DMA_Init+0x3c>)
 8001ce0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ce6:	4b09      	ldr	r3, [pc, #36]	@ (8001d0c <MX_DMA_Init+0x3c>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cee:	607b      	str	r3, [r7, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	2039      	movs	r0, #57	@ 0x39
 8001cf8:	f000 fbf7 	bl	80024ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001cfc:	2039      	movs	r0, #57	@ 0x39
 8001cfe:	f000 fc10 	bl	8002522 <HAL_NVIC_EnableIRQ>

}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40023800 	.word	0x40023800

08001d10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08a      	sub	sp, #40	@ 0x28
 8001d14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d16:	f107 0314 	add.w	r3, r7, #20
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	605a      	str	r2, [r3, #4]
 8001d20:	609a      	str	r2, [r3, #8]
 8001d22:	60da      	str	r2, [r3, #12]
 8001d24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	4b26      	ldr	r3, [pc, #152]	@ (8001dc4 <MX_GPIO_Init+0xb4>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2e:	4a25      	ldr	r2, [pc, #148]	@ (8001dc4 <MX_GPIO_Init+0xb4>)
 8001d30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d36:	4b23      	ldr	r3, [pc, #140]	@ (8001dc4 <MX_GPIO_Init+0xb4>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	4b1f      	ldr	r3, [pc, #124]	@ (8001dc4 <MX_GPIO_Init+0xb4>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4a:	4a1e      	ldr	r2, [pc, #120]	@ (8001dc4 <MX_GPIO_Init+0xb4>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d52:	4b1c      	ldr	r3, [pc, #112]	@ (8001dc4 <MX_GPIO_Init+0xb4>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	4b18      	ldr	r3, [pc, #96]	@ (8001dc4 <MX_GPIO_Init+0xb4>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d66:	4a17      	ldr	r2, [pc, #92]	@ (8001dc4 <MX_GPIO_Init+0xb4>)
 8001d68:	f043 0310 	orr.w	r3, r3, #16
 8001d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d6e:	4b15      	ldr	r3, [pc, #84]	@ (8001dc4 <MX_GPIO_Init+0xb4>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	f003 0310 	and.w	r3, r3, #16
 8001d76:	60bb      	str	r3, [r7, #8]
 8001d78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	607b      	str	r3, [r7, #4]
 8001d7e:	4b11      	ldr	r3, [pc, #68]	@ (8001dc4 <MX_GPIO_Init+0xb4>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d82:	4a10      	ldr	r2, [pc, #64]	@ (8001dc4 <MX_GPIO_Init+0xb4>)
 8001d84:	f043 0302 	orr.w	r3, r3, #2
 8001d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc4 <MX_GPIO_Init+0xb4>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BUTON_Pin|LED_PIN_MOTOR_AKTIF_Pin|LED_PIN_ESC_Pin|LED_PIN_MPU6050_Pin, GPIO_PIN_RESET);
 8001d96:	2200      	movs	r2, #0
 8001d98:	2133      	movs	r1, #51	@ 0x33
 8001d9a:	480b      	ldr	r0, [pc, #44]	@ (8001dc8 <MX_GPIO_Init+0xb8>)
 8001d9c:	f001 f87a 	bl	8002e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTON_Pin LED_PIN_MOTOR_AKTIF_Pin LED_PIN_ESC_Pin LED_PIN_MPU6050_Pin */
  GPIO_InitStruct.Pin = BUTON_Pin|LED_PIN_MOTOR_AKTIF_Pin|LED_PIN_ESC_Pin|LED_PIN_MPU6050_Pin;
 8001da0:	2333      	movs	r3, #51	@ 0x33
 8001da2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da4:	2301      	movs	r3, #1
 8001da6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dac:	2300      	movs	r3, #0
 8001dae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	4619      	mov	r1, r3
 8001db6:	4804      	ldr	r0, [pc, #16]	@ (8001dc8 <MX_GPIO_Init+0xb8>)
 8001db8:	f000 feb8 	bl	8002b2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001dbc:	bf00      	nop
 8001dbe:	3728      	adds	r7, #40	@ 0x28
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40020000 	.word	0x40020000

08001dcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd0:	b672      	cpsid	i
}
 8001dd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dd4:	bf00      	nop
 8001dd6:	e7fd      	b.n	8001dd4 <Error_Handler+0x8>

08001dd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	607b      	str	r3, [r7, #4]
 8001de2:	4b10      	ldr	r3, [pc, #64]	@ (8001e24 <HAL_MspInit+0x4c>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de6:	4a0f      	ldr	r2, [pc, #60]	@ (8001e24 <HAL_MspInit+0x4c>)
 8001de8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dee:	4b0d      	ldr	r3, [pc, #52]	@ (8001e24 <HAL_MspInit+0x4c>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001df6:	607b      	str	r3, [r7, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	603b      	str	r3, [r7, #0]
 8001dfe:	4b09      	ldr	r3, [pc, #36]	@ (8001e24 <HAL_MspInit+0x4c>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e02:	4a08      	ldr	r2, [pc, #32]	@ (8001e24 <HAL_MspInit+0x4c>)
 8001e04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e0a:	4b06      	ldr	r3, [pc, #24]	@ (8001e24 <HAL_MspInit+0x4c>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e12:	603b      	str	r3, [r7, #0]
 8001e14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e16:	2007      	movs	r0, #7
 8001e18:	f000 fb5c 	bl	80024d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e1c:	bf00      	nop
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40023800 	.word	0x40023800

08001e28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08a      	sub	sp, #40	@ 0x28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a19      	ldr	r2, [pc, #100]	@ (8001eac <HAL_I2C_MspInit+0x84>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d12b      	bne.n	8001ea2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	4b18      	ldr	r3, [pc, #96]	@ (8001eb0 <HAL_I2C_MspInit+0x88>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	4a17      	ldr	r2, [pc, #92]	@ (8001eb0 <HAL_I2C_MspInit+0x88>)
 8001e54:	f043 0302 	orr.w	r3, r3, #2
 8001e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e5a:	4b15      	ldr	r3, [pc, #84]	@ (8001eb0 <HAL_I2C_MspInit+0x88>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e66:	23c0      	movs	r3, #192	@ 0xc0
 8001e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e6a:	2312      	movs	r3, #18
 8001e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e72:	2303      	movs	r3, #3
 8001e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e76:	2304      	movs	r3, #4
 8001e78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7a:	f107 0314 	add.w	r3, r7, #20
 8001e7e:	4619      	mov	r1, r3
 8001e80:	480c      	ldr	r0, [pc, #48]	@ (8001eb4 <HAL_I2C_MspInit+0x8c>)
 8001e82:	f000 fe53 	bl	8002b2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	4b09      	ldr	r3, [pc, #36]	@ (8001eb0 <HAL_I2C_MspInit+0x88>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8e:	4a08      	ldr	r2, [pc, #32]	@ (8001eb0 <HAL_I2C_MspInit+0x88>)
 8001e90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e96:	4b06      	ldr	r3, [pc, #24]	@ (8001eb0 <HAL_I2C_MspInit+0x88>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ea2:	bf00      	nop
 8001ea4:	3728      	adds	r7, #40	@ 0x28
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40005400 	.word	0x40005400
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40020400 	.word	0x40020400

08001eb8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a22      	ldr	r2, [pc, #136]	@ (8001f50 <HAL_TIM_PWM_MspInit+0x98>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d13e      	bne.n	8001f48 <HAL_TIM_PWM_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	4b21      	ldr	r3, [pc, #132]	@ (8001f54 <HAL_TIM_PWM_MspInit+0x9c>)
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed2:	4a20      	ldr	r2, [pc, #128]	@ (8001f54 <HAL_TIM_PWM_MspInit+0x9c>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eda:	4b1e      	ldr	r3, [pc, #120]	@ (8001f54 <HAL_TIM_PWM_MspInit+0x9c>)
 8001edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8001ee6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f58 <HAL_TIM_PWM_MspInit+0xa0>)
 8001ee8:	4a1c      	ldr	r2, [pc, #112]	@ (8001f5c <HAL_TIM_PWM_MspInit+0xa4>)
 8001eea:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001eec:	4b1a      	ldr	r3, [pc, #104]	@ (8001f58 <HAL_TIM_PWM_MspInit+0xa0>)
 8001eee:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8001ef2:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ef4:	4b18      	ldr	r3, [pc, #96]	@ (8001f58 <HAL_TIM_PWM_MspInit+0xa0>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001efa:	4b17      	ldr	r3, [pc, #92]	@ (8001f58 <HAL_TIM_PWM_MspInit+0xa0>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001f00:	4b15      	ldr	r3, [pc, #84]	@ (8001f58 <HAL_TIM_PWM_MspInit+0xa0>)
 8001f02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f06:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f08:	4b13      	ldr	r3, [pc, #76]	@ (8001f58 <HAL_TIM_PWM_MspInit+0xa0>)
 8001f0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f0e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f10:	4b11      	ldr	r3, [pc, #68]	@ (8001f58 <HAL_TIM_PWM_MspInit+0xa0>)
 8001f12:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f16:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8001f18:	4b0f      	ldr	r3, [pc, #60]	@ (8001f58 <HAL_TIM_PWM_MspInit+0xa0>)
 8001f1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f1e:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001f20:	4b0d      	ldr	r3, [pc, #52]	@ (8001f58 <HAL_TIM_PWM_MspInit+0xa0>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f26:	4b0c      	ldr	r3, [pc, #48]	@ (8001f58 <HAL_TIM_PWM_MspInit+0xa0>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001f2c:	480a      	ldr	r0, [pc, #40]	@ (8001f58 <HAL_TIM_PWM_MspInit+0xa0>)
 8001f2e:	f000 fb13 	bl	8002558 <HAL_DMA_Init>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <HAL_TIM_PWM_MspInit+0x84>
    {
      Error_Handler();
 8001f38:	f7ff ff48 	bl	8001dcc <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a06      	ldr	r2, [pc, #24]	@ (8001f58 <HAL_TIM_PWM_MspInit+0xa0>)
 8001f40:	625a      	str	r2, [r3, #36]	@ 0x24
 8001f42:	4a05      	ldr	r2, [pc, #20]	@ (8001f58 <HAL_TIM_PWM_MspInit+0xa0>)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001f48:	bf00      	nop
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40010000 	.word	0x40010000
 8001f54:	40023800 	.word	0x40023800
 8001f58:	20000140 	.word	0x20000140
 8001f5c:	40026428 	.word	0x40026428

08001f60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b088      	sub	sp, #32
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	f107 030c 	add.w	r3, r7, #12
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a12      	ldr	r2, [pc, #72]	@ (8001fc8 <HAL_TIM_MspPostInit+0x68>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d11e      	bne.n	8001fc0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	4b11      	ldr	r3, [pc, #68]	@ (8001fcc <HAL_TIM_MspPostInit+0x6c>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8a:	4a10      	ldr	r2, [pc, #64]	@ (8001fcc <HAL_TIM_MspPostInit+0x6c>)
 8001f8c:	f043 0310 	orr.w	r3, r3, #16
 8001f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f92:	4b0e      	ldr	r3, [pc, #56]	@ (8001fcc <HAL_TIM_MspPostInit+0x6c>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f96:	f003 0310 	and.w	r3, r3, #16
 8001f9a:	60bb      	str	r3, [r7, #8]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fa2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fac:	2300      	movs	r3, #0
 8001fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fb4:	f107 030c 	add.w	r3, r7, #12
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4805      	ldr	r0, [pc, #20]	@ (8001fd0 <HAL_TIM_MspPostInit+0x70>)
 8001fbc:	f000 fdb6 	bl	8002b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001fc0:	bf00      	nop
 8001fc2:	3720      	adds	r7, #32
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40010000 	.word	0x40010000
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40021000 	.word	0x40021000

08001fd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fd8:	bf00      	nop
 8001fda:	e7fd      	b.n	8001fd8 <NMI_Handler+0x4>

08001fdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fe0:	bf00      	nop
 8001fe2:	e7fd      	b.n	8001fe0 <HardFault_Handler+0x4>

08001fe4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fe8:	bf00      	nop
 8001fea:	e7fd      	b.n	8001fe8 <MemManage_Handler+0x4>

08001fec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ff0:	bf00      	nop
 8001ff2:	e7fd      	b.n	8001ff0 <BusFault_Handler+0x4>

08001ff4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ff8:	bf00      	nop
 8001ffa:	e7fd      	b.n	8001ff8 <UsageFault_Handler+0x4>

08001ffc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002000:	bf00      	nop
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800201c:	bf00      	nop
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800202a:	f000 f93f 	bl	80022ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002038:	4802      	ldr	r0, [pc, #8]	@ (8002044 <DMA2_Stream1_IRQHandler+0x10>)
 800203a:	f000 fb3b 	bl	80026b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000140 	.word	0x20000140

08002048 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]
 8002058:	e00a      	b.n	8002070 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800205a:	f3af 8000 	nop.w
 800205e:	4601      	mov	r1, r0
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	1c5a      	adds	r2, r3, #1
 8002064:	60ba      	str	r2, [r7, #8]
 8002066:	b2ca      	uxtb	r2, r1
 8002068:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	3301      	adds	r3, #1
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	429a      	cmp	r2, r3
 8002076:	dbf0      	blt.n	800205a <_read+0x12>
  }

  return len;
 8002078:	687b      	ldr	r3, [r7, #4]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b086      	sub	sp, #24
 8002086:	af00      	add	r7, sp, #0
 8002088:	60f8      	str	r0, [r7, #12]
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	e009      	b.n	80020a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	1c5a      	adds	r2, r3, #1
 8002098:	60ba      	str	r2, [r7, #8]
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	3301      	adds	r3, #1
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	697a      	ldr	r2, [r7, #20]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	dbf1      	blt.n	8002094 <_write+0x12>
  }
  return len;
 80020b0:	687b      	ldr	r3, [r7, #4]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <_close>:

int _close(int file)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020e2:	605a      	str	r2, [r3, #4]
  return 0;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <_isatty>:

int _isatty(int file)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020fa:	2301      	movs	r3, #1
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
	...

08002124 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800212c:	4a14      	ldr	r2, [pc, #80]	@ (8002180 <_sbrk+0x5c>)
 800212e:	4b15      	ldr	r3, [pc, #84]	@ (8002184 <_sbrk+0x60>)
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002138:	4b13      	ldr	r3, [pc, #76]	@ (8002188 <_sbrk+0x64>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d102      	bne.n	8002146 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002140:	4b11      	ldr	r3, [pc, #68]	@ (8002188 <_sbrk+0x64>)
 8002142:	4a12      	ldr	r2, [pc, #72]	@ (800218c <_sbrk+0x68>)
 8002144:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002146:	4b10      	ldr	r3, [pc, #64]	@ (8002188 <_sbrk+0x64>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4413      	add	r3, r2
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	429a      	cmp	r2, r3
 8002152:	d207      	bcs.n	8002164 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002154:	f003 fb56 	bl	8005804 <__errno>
 8002158:	4603      	mov	r3, r0
 800215a:	220c      	movs	r2, #12
 800215c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800215e:	f04f 33ff 	mov.w	r3, #4294967295
 8002162:	e009      	b.n	8002178 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002164:	4b08      	ldr	r3, [pc, #32]	@ (8002188 <_sbrk+0x64>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800216a:	4b07      	ldr	r3, [pc, #28]	@ (8002188 <_sbrk+0x64>)
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4413      	add	r3, r2
 8002172:	4a05      	ldr	r2, [pc, #20]	@ (8002188 <_sbrk+0x64>)
 8002174:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002176:	68fb      	ldr	r3, [r7, #12]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20020000 	.word	0x20020000
 8002184:	00000400 	.word	0x00000400
 8002188:	20000240 	.word	0x20000240
 800218c:	20000398 	.word	0x20000398

08002190 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002194:	4b06      	ldr	r3, [pc, #24]	@ (80021b0 <SystemInit+0x20>)
 8002196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800219a:	4a05      	ldr	r2, [pc, #20]	@ (80021b0 <SystemInit+0x20>)
 800219c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80021b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80021b8:	f7ff ffea 	bl	8002190 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021bc:	480c      	ldr	r0, [pc, #48]	@ (80021f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021be:	490d      	ldr	r1, [pc, #52]	@ (80021f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021c0:	4a0d      	ldr	r2, [pc, #52]	@ (80021f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021c4:	e002      	b.n	80021cc <LoopCopyDataInit>

080021c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ca:	3304      	adds	r3, #4

080021cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021d0:	d3f9      	bcc.n	80021c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021d2:	4a0a      	ldr	r2, [pc, #40]	@ (80021fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021d4:	4c0a      	ldr	r4, [pc, #40]	@ (8002200 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021d8:	e001      	b.n	80021de <LoopFillZerobss>

080021da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021dc:	3204      	adds	r2, #4

080021de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021e0:	d3fb      	bcc.n	80021da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021e2:	f003 fb15 	bl	8005810 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021e6:	f7ff fab9 	bl	800175c <main>
  bx  lr    
 80021ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80021ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021f4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80021f8:	08007d10 	.word	0x08007d10
  ldr r2, =_sbss
 80021fc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002200:	20000394 	.word	0x20000394

08002204 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002204:	e7fe      	b.n	8002204 <ADC_IRQHandler>
	...

08002208 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800220c:	4b0e      	ldr	r3, [pc, #56]	@ (8002248 <HAL_Init+0x40>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a0d      	ldr	r2, [pc, #52]	@ (8002248 <HAL_Init+0x40>)
 8002212:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002216:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002218:	4b0b      	ldr	r3, [pc, #44]	@ (8002248 <HAL_Init+0x40>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a0a      	ldr	r2, [pc, #40]	@ (8002248 <HAL_Init+0x40>)
 800221e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002222:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002224:	4b08      	ldr	r3, [pc, #32]	@ (8002248 <HAL_Init+0x40>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a07      	ldr	r2, [pc, #28]	@ (8002248 <HAL_Init+0x40>)
 800222a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800222e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002230:	2003      	movs	r0, #3
 8002232:	f000 f94f 	bl	80024d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002236:	2000      	movs	r0, #0
 8002238:	f000 f808 	bl	800224c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800223c:	f7ff fdcc 	bl	8001dd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40023c00 	.word	0x40023c00

0800224c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002254:	4b12      	ldr	r3, [pc, #72]	@ (80022a0 <HAL_InitTick+0x54>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	4b12      	ldr	r3, [pc, #72]	@ (80022a4 <HAL_InitTick+0x58>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	4619      	mov	r1, r3
 800225e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002262:	fbb3 f3f1 	udiv	r3, r3, r1
 8002266:	fbb2 f3f3 	udiv	r3, r2, r3
 800226a:	4618      	mov	r0, r3
 800226c:	f000 f967 	bl	800253e <HAL_SYSTICK_Config>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e00e      	b.n	8002298 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b0f      	cmp	r3, #15
 800227e:	d80a      	bhi.n	8002296 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002280:	2200      	movs	r2, #0
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	f04f 30ff 	mov.w	r0, #4294967295
 8002288:	f000 f92f 	bl	80024ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800228c:	4a06      	ldr	r2, [pc, #24]	@ (80022a8 <HAL_InitTick+0x5c>)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002292:	2300      	movs	r3, #0
 8002294:	e000      	b.n	8002298 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
}
 8002298:	4618      	mov	r0, r3
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	20000010 	.word	0x20000010
 80022a4:	20000018 	.word	0x20000018
 80022a8:	20000014 	.word	0x20000014

080022ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022b0:	4b06      	ldr	r3, [pc, #24]	@ (80022cc <HAL_IncTick+0x20>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	461a      	mov	r2, r3
 80022b6:	4b06      	ldr	r3, [pc, #24]	@ (80022d0 <HAL_IncTick+0x24>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4413      	add	r3, r2
 80022bc:	4a04      	ldr	r2, [pc, #16]	@ (80022d0 <HAL_IncTick+0x24>)
 80022be:	6013      	str	r3, [r2, #0]
}
 80022c0:	bf00      	nop
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000018 	.word	0x20000018
 80022d0:	20000244 	.word	0x20000244

080022d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return uwTick;
 80022d8:	4b03      	ldr	r3, [pc, #12]	@ (80022e8 <HAL_GetTick+0x14>)
 80022da:	681b      	ldr	r3, [r3, #0]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	20000244 	.word	0x20000244

080022ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022f4:	f7ff ffee 	bl	80022d4 <HAL_GetTick>
 80022f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002304:	d005      	beq.n	8002312 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002306:	4b0a      	ldr	r3, [pc, #40]	@ (8002330 <HAL_Delay+0x44>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	461a      	mov	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4413      	add	r3, r2
 8002310:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002312:	bf00      	nop
 8002314:	f7ff ffde 	bl	80022d4 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	429a      	cmp	r2, r3
 8002322:	d8f7      	bhi.n	8002314 <HAL_Delay+0x28>
  {
  }
}
 8002324:	bf00      	nop
 8002326:	bf00      	nop
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000018 	.word	0x20000018

08002334 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002344:	4b0c      	ldr	r3, [pc, #48]	@ (8002378 <__NVIC_SetPriorityGrouping+0x44>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002350:	4013      	ands	r3, r2
 8002352:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800235c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002360:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002366:	4a04      	ldr	r2, [pc, #16]	@ (8002378 <__NVIC_SetPriorityGrouping+0x44>)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	60d3      	str	r3, [r2, #12]
}
 800236c:	bf00      	nop
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002380:	4b04      	ldr	r3, [pc, #16]	@ (8002394 <__NVIC_GetPriorityGrouping+0x18>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	0a1b      	lsrs	r3, r3, #8
 8002386:	f003 0307 	and.w	r3, r3, #7
}
 800238a:	4618      	mov	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	db0b      	blt.n	80023c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	f003 021f 	and.w	r2, r3, #31
 80023b0:	4907      	ldr	r1, [pc, #28]	@ (80023d0 <__NVIC_EnableIRQ+0x38>)
 80023b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b6:	095b      	lsrs	r3, r3, #5
 80023b8:	2001      	movs	r0, #1
 80023ba:	fa00 f202 	lsl.w	r2, r0, r2
 80023be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	e000e100 	.word	0xe000e100

080023d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	6039      	str	r1, [r7, #0]
 80023de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	db0a      	blt.n	80023fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	490c      	ldr	r1, [pc, #48]	@ (8002420 <__NVIC_SetPriority+0x4c>)
 80023ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f2:	0112      	lsls	r2, r2, #4
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	440b      	add	r3, r1
 80023f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023fc:	e00a      	b.n	8002414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	b2da      	uxtb	r2, r3
 8002402:	4908      	ldr	r1, [pc, #32]	@ (8002424 <__NVIC_SetPriority+0x50>)
 8002404:	79fb      	ldrb	r3, [r7, #7]
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	3b04      	subs	r3, #4
 800240c:	0112      	lsls	r2, r2, #4
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	440b      	add	r3, r1
 8002412:	761a      	strb	r2, [r3, #24]
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	e000e100 	.word	0xe000e100
 8002424:	e000ed00 	.word	0xe000ed00

08002428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002428:	b480      	push	{r7}
 800242a:	b089      	sub	sp, #36	@ 0x24
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f1c3 0307 	rsb	r3, r3, #7
 8002442:	2b04      	cmp	r3, #4
 8002444:	bf28      	it	cs
 8002446:	2304      	movcs	r3, #4
 8002448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	3304      	adds	r3, #4
 800244e:	2b06      	cmp	r3, #6
 8002450:	d902      	bls.n	8002458 <NVIC_EncodePriority+0x30>
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	3b03      	subs	r3, #3
 8002456:	e000      	b.n	800245a <NVIC_EncodePriority+0x32>
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800245c:	f04f 32ff 	mov.w	r2, #4294967295
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43da      	mvns	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	401a      	ands	r2, r3
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002470:	f04f 31ff 	mov.w	r1, #4294967295
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	fa01 f303 	lsl.w	r3, r1, r3
 800247a:	43d9      	mvns	r1, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002480:	4313      	orrs	r3, r2
         );
}
 8002482:	4618      	mov	r0, r3
 8002484:	3724      	adds	r7, #36	@ 0x24
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
	...

08002490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3b01      	subs	r3, #1
 800249c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024a0:	d301      	bcc.n	80024a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024a2:	2301      	movs	r3, #1
 80024a4:	e00f      	b.n	80024c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024a6:	4a0a      	ldr	r2, [pc, #40]	@ (80024d0 <SysTick_Config+0x40>)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ae:	210f      	movs	r1, #15
 80024b0:	f04f 30ff 	mov.w	r0, #4294967295
 80024b4:	f7ff ff8e 	bl	80023d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b8:	4b05      	ldr	r3, [pc, #20]	@ (80024d0 <SysTick_Config+0x40>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024be:	4b04      	ldr	r3, [pc, #16]	@ (80024d0 <SysTick_Config+0x40>)
 80024c0:	2207      	movs	r2, #7
 80024c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	e000e010 	.word	0xe000e010

080024d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f7ff ff29 	bl	8002334 <__NVIC_SetPriorityGrouping>
}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b086      	sub	sp, #24
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	4603      	mov	r3, r0
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	607a      	str	r2, [r7, #4]
 80024f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024fc:	f7ff ff3e 	bl	800237c <__NVIC_GetPriorityGrouping>
 8002500:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	68b9      	ldr	r1, [r7, #8]
 8002506:	6978      	ldr	r0, [r7, #20]
 8002508:	f7ff ff8e 	bl	8002428 <NVIC_EncodePriority>
 800250c:	4602      	mov	r2, r0
 800250e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002512:	4611      	mov	r1, r2
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff ff5d 	bl	80023d4 <__NVIC_SetPriority>
}
 800251a:	bf00      	nop
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	4603      	mov	r3, r0
 800252a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800252c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff ff31 	bl	8002398 <__NVIC_EnableIRQ>
}
 8002536:	bf00      	nop
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b082      	sub	sp, #8
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7ff ffa2 	bl	8002490 <SysTick_Config>
 800254c:	4603      	mov	r3, r0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
	...

08002558 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002560:	2300      	movs	r3, #0
 8002562:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002564:	f7ff feb6 	bl	80022d4 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e099      	b.n	80026a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 0201 	bic.w	r2, r2, #1
 8002592:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002594:	e00f      	b.n	80025b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002596:	f7ff fe9d 	bl	80022d4 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b05      	cmp	r3, #5
 80025a2:	d908      	bls.n	80025b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2220      	movs	r2, #32
 80025a8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2203      	movs	r2, #3
 80025ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e078      	b.n	80026a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1e8      	bne.n	8002596 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	4b38      	ldr	r3, [pc, #224]	@ (80026b0 <HAL_DMA_Init+0x158>)
 80025d0:	4013      	ands	r3, r2
 80025d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	4313      	orrs	r3, r2
 8002606:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260c:	2b04      	cmp	r3, #4
 800260e:	d107      	bne.n	8002620 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002618:	4313      	orrs	r3, r2
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	4313      	orrs	r3, r2
 800261e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f023 0307 	bic.w	r3, r3, #7
 8002636:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	4313      	orrs	r3, r2
 8002640:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002646:	2b04      	cmp	r3, #4
 8002648:	d117      	bne.n	800267a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	4313      	orrs	r3, r2
 8002652:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00e      	beq.n	800267a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f9e9 	bl	8002a34 <DMA_CheckFifoParam>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d008      	beq.n	800267a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2240      	movs	r2, #64	@ 0x40
 800266c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002676:	2301      	movs	r3, #1
 8002678:	e016      	b.n	80026a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f9a0 	bl	80029c8 <DMA_CalcBaseAndBitshift>
 8002688:	4603      	mov	r3, r0
 800268a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002690:	223f      	movs	r2, #63	@ 0x3f
 8002692:	409a      	lsls	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3718      	adds	r7, #24
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	f010803f 	.word	0xf010803f

080026b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026bc:	2300      	movs	r3, #0
 80026be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026c0:	4b8e      	ldr	r3, [pc, #568]	@ (80028fc <HAL_DMA_IRQHandler+0x248>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a8e      	ldr	r2, [pc, #568]	@ (8002900 <HAL_DMA_IRQHandler+0x24c>)
 80026c6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ca:	0a9b      	lsrs	r3, r3, #10
 80026cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026de:	2208      	movs	r2, #8
 80026e0:	409a      	lsls	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	4013      	ands	r3, r2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d01a      	beq.n	8002720 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d013      	beq.n	8002720 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 0204 	bic.w	r2, r2, #4
 8002706:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800270c:	2208      	movs	r2, #8
 800270e:	409a      	lsls	r2, r3
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002718:	f043 0201 	orr.w	r2, r3, #1
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002724:	2201      	movs	r2, #1
 8002726:	409a      	lsls	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4013      	ands	r3, r2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d012      	beq.n	8002756 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00b      	beq.n	8002756 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002742:	2201      	movs	r2, #1
 8002744:	409a      	lsls	r2, r3
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800274e:	f043 0202 	orr.w	r2, r3, #2
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800275a:	2204      	movs	r2, #4
 800275c:	409a      	lsls	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	4013      	ands	r3, r2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d012      	beq.n	800278c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00b      	beq.n	800278c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002778:	2204      	movs	r2, #4
 800277a:	409a      	lsls	r2, r3
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002784:	f043 0204 	orr.w	r2, r3, #4
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002790:	2210      	movs	r2, #16
 8002792:	409a      	lsls	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4013      	ands	r3, r2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d043      	beq.n	8002824 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d03c      	beq.n	8002824 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ae:	2210      	movs	r2, #16
 80027b0:	409a      	lsls	r2, r3
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d018      	beq.n	80027f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d108      	bne.n	80027e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d024      	beq.n	8002824 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	4798      	blx	r3
 80027e2:	e01f      	b.n	8002824 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d01b      	beq.n	8002824 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	4798      	blx	r3
 80027f4:	e016      	b.n	8002824 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002800:	2b00      	cmp	r3, #0
 8002802:	d107      	bne.n	8002814 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 0208 	bic.w	r2, r2, #8
 8002812:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002828:	2220      	movs	r2, #32
 800282a:	409a      	lsls	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4013      	ands	r3, r2
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 808f 	beq.w	8002954 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0310 	and.w	r3, r3, #16
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 8087 	beq.w	8002954 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800284a:	2220      	movs	r2, #32
 800284c:	409a      	lsls	r2, r3
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b05      	cmp	r3, #5
 800285c:	d136      	bne.n	80028cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 0216 	bic.w	r2, r2, #22
 800286c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	695a      	ldr	r2, [r3, #20]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800287c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002882:	2b00      	cmp	r3, #0
 8002884:	d103      	bne.n	800288e <HAL_DMA_IRQHandler+0x1da>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800288a:	2b00      	cmp	r3, #0
 800288c:	d007      	beq.n	800289e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0208 	bic.w	r2, r2, #8
 800289c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a2:	223f      	movs	r2, #63	@ 0x3f
 80028a4:	409a      	lsls	r2, r3
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d07e      	beq.n	80029c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	4798      	blx	r3
        }
        return;
 80028ca:	e079      	b.n	80029c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d01d      	beq.n	8002916 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10d      	bne.n	8002904 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d031      	beq.n	8002954 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	4798      	blx	r3
 80028f8:	e02c      	b.n	8002954 <HAL_DMA_IRQHandler+0x2a0>
 80028fa:	bf00      	nop
 80028fc:	20000010 	.word	0x20000010
 8002900:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002908:	2b00      	cmp	r3, #0
 800290a:	d023      	beq.n	8002954 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	4798      	blx	r3
 8002914:	e01e      	b.n	8002954 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10f      	bne.n	8002944 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0210 	bic.w	r2, r2, #16
 8002932:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002958:	2b00      	cmp	r3, #0
 800295a:	d032      	beq.n	80029c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	2b00      	cmp	r3, #0
 8002966:	d022      	beq.n	80029ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2205      	movs	r2, #5
 800296c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0201 	bic.w	r2, r2, #1
 800297e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	3301      	adds	r3, #1
 8002984:	60bb      	str	r3, [r7, #8]
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	429a      	cmp	r2, r3
 800298a:	d307      	bcc.n	800299c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f2      	bne.n	8002980 <HAL_DMA_IRQHandler+0x2cc>
 800299a:	e000      	b.n	800299e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800299c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d005      	beq.n	80029c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	4798      	blx	r3
 80029be:	e000      	b.n	80029c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80029c0:	bf00      	nop
    }
  }
}
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	3b10      	subs	r3, #16
 80029d8:	4a14      	ldr	r2, [pc, #80]	@ (8002a2c <DMA_CalcBaseAndBitshift+0x64>)
 80029da:	fba2 2303 	umull	r2, r3, r2, r3
 80029de:	091b      	lsrs	r3, r3, #4
 80029e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029e2:	4a13      	ldr	r2, [pc, #76]	@ (8002a30 <DMA_CalcBaseAndBitshift+0x68>)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4413      	add	r3, r2
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	461a      	mov	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	d909      	bls.n	8002a0a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029fe:	f023 0303 	bic.w	r3, r3, #3
 8002a02:	1d1a      	adds	r2, r3, #4
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a08:	e007      	b.n	8002a1a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002a12:	f023 0303 	bic.w	r3, r3, #3
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	aaaaaaab 	.word	0xaaaaaaab
 8002a30:	08007ae8 	.word	0x08007ae8

08002a34 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d11f      	bne.n	8002a8e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	2b03      	cmp	r3, #3
 8002a52:	d856      	bhi.n	8002b02 <DMA_CheckFifoParam+0xce>
 8002a54:	a201      	add	r2, pc, #4	@ (adr r2, 8002a5c <DMA_CheckFifoParam+0x28>)
 8002a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a5a:	bf00      	nop
 8002a5c:	08002a6d 	.word	0x08002a6d
 8002a60:	08002a7f 	.word	0x08002a7f
 8002a64:	08002a6d 	.word	0x08002a6d
 8002a68:	08002b03 	.word	0x08002b03
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d046      	beq.n	8002b06 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a7c:	e043      	b.n	8002b06 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a82:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a86:	d140      	bne.n	8002b0a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a8c:	e03d      	b.n	8002b0a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a96:	d121      	bne.n	8002adc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	2b03      	cmp	r3, #3
 8002a9c:	d837      	bhi.n	8002b0e <DMA_CheckFifoParam+0xda>
 8002a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8002aa4 <DMA_CheckFifoParam+0x70>)
 8002aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa4:	08002ab5 	.word	0x08002ab5
 8002aa8:	08002abb 	.word	0x08002abb
 8002aac:	08002ab5 	.word	0x08002ab5
 8002ab0:	08002acd 	.word	0x08002acd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ab8:	e030      	b.n	8002b1c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002abe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d025      	beq.n	8002b12 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aca:	e022      	b.n	8002b12 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ad4:	d11f      	bne.n	8002b16 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ada:	e01c      	b.n	8002b16 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d903      	bls.n	8002aea <DMA_CheckFifoParam+0xb6>
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	2b03      	cmp	r3, #3
 8002ae6:	d003      	beq.n	8002af0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ae8:	e018      	b.n	8002b1c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	73fb      	strb	r3, [r7, #15]
      break;
 8002aee:	e015      	b.n	8002b1c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00e      	beq.n	8002b1a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	73fb      	strb	r3, [r7, #15]
      break;
 8002b00:	e00b      	b.n	8002b1a <DMA_CheckFifoParam+0xe6>
      break;
 8002b02:	bf00      	nop
 8002b04:	e00a      	b.n	8002b1c <DMA_CheckFifoParam+0xe8>
      break;
 8002b06:	bf00      	nop
 8002b08:	e008      	b.n	8002b1c <DMA_CheckFifoParam+0xe8>
      break;
 8002b0a:	bf00      	nop
 8002b0c:	e006      	b.n	8002b1c <DMA_CheckFifoParam+0xe8>
      break;
 8002b0e:	bf00      	nop
 8002b10:	e004      	b.n	8002b1c <DMA_CheckFifoParam+0xe8>
      break;
 8002b12:	bf00      	nop
 8002b14:	e002      	b.n	8002b1c <DMA_CheckFifoParam+0xe8>
      break;   
 8002b16:	bf00      	nop
 8002b18:	e000      	b.n	8002b1c <DMA_CheckFifoParam+0xe8>
      break;
 8002b1a:	bf00      	nop
    }
  } 
  
  return status; 
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop

08002b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b089      	sub	sp, #36	@ 0x24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b42:	2300      	movs	r3, #0
 8002b44:	61fb      	str	r3, [r7, #28]
 8002b46:	e16b      	b.n	8002e20 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b48:	2201      	movs	r2, #1
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	f040 815a 	bne.w	8002e1a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d005      	beq.n	8002b7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d130      	bne.n	8002be0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	2203      	movs	r2, #3
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4013      	ands	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	091b      	lsrs	r3, r3, #4
 8002bca:	f003 0201 	and.w	r2, r3, #1
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 0303 	and.w	r3, r3, #3
 8002be8:	2b03      	cmp	r3, #3
 8002bea:	d017      	beq.n	8002c1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	2203      	movs	r2, #3
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	4013      	ands	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 0303 	and.w	r3, r3, #3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d123      	bne.n	8002c70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	08da      	lsrs	r2, r3, #3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3208      	adds	r2, #8
 8002c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	220f      	movs	r2, #15
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	43db      	mvns	r3, r3
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	691a      	ldr	r2, [r3, #16]
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	08da      	lsrs	r2, r3, #3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	3208      	adds	r2, #8
 8002c6a:	69b9      	ldr	r1, [r7, #24]
 8002c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	2203      	movs	r2, #3
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	43db      	mvns	r3, r3
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4013      	ands	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f003 0203 	and.w	r2, r3, #3
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 80b4 	beq.w	8002e1a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	4b60      	ldr	r3, [pc, #384]	@ (8002e38 <HAL_GPIO_Init+0x30c>)
 8002cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cba:	4a5f      	ldr	r2, [pc, #380]	@ (8002e38 <HAL_GPIO_Init+0x30c>)
 8002cbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cc2:	4b5d      	ldr	r3, [pc, #372]	@ (8002e38 <HAL_GPIO_Init+0x30c>)
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cce:	4a5b      	ldr	r2, [pc, #364]	@ (8002e3c <HAL_GPIO_Init+0x310>)
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	089b      	lsrs	r3, r3, #2
 8002cd4:	3302      	adds	r3, #2
 8002cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	220f      	movs	r2, #15
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	43db      	mvns	r3, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a52      	ldr	r2, [pc, #328]	@ (8002e40 <HAL_GPIO_Init+0x314>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d02b      	beq.n	8002d52 <HAL_GPIO_Init+0x226>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a51      	ldr	r2, [pc, #324]	@ (8002e44 <HAL_GPIO_Init+0x318>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d025      	beq.n	8002d4e <HAL_GPIO_Init+0x222>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a50      	ldr	r2, [pc, #320]	@ (8002e48 <HAL_GPIO_Init+0x31c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d01f      	beq.n	8002d4a <HAL_GPIO_Init+0x21e>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a4f      	ldr	r2, [pc, #316]	@ (8002e4c <HAL_GPIO_Init+0x320>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d019      	beq.n	8002d46 <HAL_GPIO_Init+0x21a>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a4e      	ldr	r2, [pc, #312]	@ (8002e50 <HAL_GPIO_Init+0x324>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d013      	beq.n	8002d42 <HAL_GPIO_Init+0x216>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a4d      	ldr	r2, [pc, #308]	@ (8002e54 <HAL_GPIO_Init+0x328>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d00d      	beq.n	8002d3e <HAL_GPIO_Init+0x212>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a4c      	ldr	r2, [pc, #304]	@ (8002e58 <HAL_GPIO_Init+0x32c>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d007      	beq.n	8002d3a <HAL_GPIO_Init+0x20e>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a4b      	ldr	r2, [pc, #300]	@ (8002e5c <HAL_GPIO_Init+0x330>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d101      	bne.n	8002d36 <HAL_GPIO_Init+0x20a>
 8002d32:	2307      	movs	r3, #7
 8002d34:	e00e      	b.n	8002d54 <HAL_GPIO_Init+0x228>
 8002d36:	2308      	movs	r3, #8
 8002d38:	e00c      	b.n	8002d54 <HAL_GPIO_Init+0x228>
 8002d3a:	2306      	movs	r3, #6
 8002d3c:	e00a      	b.n	8002d54 <HAL_GPIO_Init+0x228>
 8002d3e:	2305      	movs	r3, #5
 8002d40:	e008      	b.n	8002d54 <HAL_GPIO_Init+0x228>
 8002d42:	2304      	movs	r3, #4
 8002d44:	e006      	b.n	8002d54 <HAL_GPIO_Init+0x228>
 8002d46:	2303      	movs	r3, #3
 8002d48:	e004      	b.n	8002d54 <HAL_GPIO_Init+0x228>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	e002      	b.n	8002d54 <HAL_GPIO_Init+0x228>
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e000      	b.n	8002d54 <HAL_GPIO_Init+0x228>
 8002d52:	2300      	movs	r3, #0
 8002d54:	69fa      	ldr	r2, [r7, #28]
 8002d56:	f002 0203 	and.w	r2, r2, #3
 8002d5a:	0092      	lsls	r2, r2, #2
 8002d5c:	4093      	lsls	r3, r2
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d64:	4935      	ldr	r1, [pc, #212]	@ (8002e3c <HAL_GPIO_Init+0x310>)
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	089b      	lsrs	r3, r3, #2
 8002d6a:	3302      	adds	r3, #2
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d72:	4b3b      	ldr	r3, [pc, #236]	@ (8002e60 <HAL_GPIO_Init+0x334>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d96:	4a32      	ldr	r2, [pc, #200]	@ (8002e60 <HAL_GPIO_Init+0x334>)
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d9c:	4b30      	ldr	r3, [pc, #192]	@ (8002e60 <HAL_GPIO_Init+0x334>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	43db      	mvns	r3, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4013      	ands	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dc0:	4a27      	ldr	r2, [pc, #156]	@ (8002e60 <HAL_GPIO_Init+0x334>)
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dc6:	4b26      	ldr	r3, [pc, #152]	@ (8002e60 <HAL_GPIO_Init+0x334>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dea:	4a1d      	ldr	r2, [pc, #116]	@ (8002e60 <HAL_GPIO_Init+0x334>)
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002df0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e60 <HAL_GPIO_Init+0x334>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e14:	4a12      	ldr	r2, [pc, #72]	@ (8002e60 <HAL_GPIO_Init+0x334>)
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	61fb      	str	r3, [r7, #28]
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	2b0f      	cmp	r3, #15
 8002e24:	f67f ae90 	bls.w	8002b48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e28:	bf00      	nop
 8002e2a:	bf00      	nop
 8002e2c:	3724      	adds	r7, #36	@ 0x24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	40013800 	.word	0x40013800
 8002e40:	40020000 	.word	0x40020000
 8002e44:	40020400 	.word	0x40020400
 8002e48:	40020800 	.word	0x40020800
 8002e4c:	40020c00 	.word	0x40020c00
 8002e50:	40021000 	.word	0x40021000
 8002e54:	40021400 	.word	0x40021400
 8002e58:	40021800 	.word	0x40021800
 8002e5c:	40021c00 	.word	0x40021c00
 8002e60:	40013c00 	.word	0x40013c00

08002e64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	691a      	ldr	r2, [r3, #16]
 8002e74:	887b      	ldrh	r3, [r7, #2]
 8002e76:	4013      	ands	r3, r2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d002      	beq.n	8002e82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	73fb      	strb	r3, [r7, #15]
 8002e80:	e001      	b.n	8002e86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e82:	2300      	movs	r3, #0
 8002e84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	807b      	strh	r3, [r7, #2]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ea4:	787b      	ldrb	r3, [r7, #1]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eaa:	887a      	ldrh	r2, [r7, #2]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002eb0:	e003      	b.n	8002eba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002eb2:	887b      	ldrh	r3, [r7, #2]
 8002eb4:	041a      	lsls	r2, r3, #16
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	619a      	str	r2, [r3, #24]
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
	...

08002ec8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e12b      	b.n	8003132 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d106      	bne.n	8002ef4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7fe ff9a 	bl	8001e28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2224      	movs	r2, #36	@ 0x24
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0201 	bic.w	r2, r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f2c:	f001 fdc6 	bl	8004abc <HAL_RCC_GetPCLK1Freq>
 8002f30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	4a81      	ldr	r2, [pc, #516]	@ (800313c <HAL_I2C_Init+0x274>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d807      	bhi.n	8002f4c <HAL_I2C_Init+0x84>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	4a80      	ldr	r2, [pc, #512]	@ (8003140 <HAL_I2C_Init+0x278>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	bf94      	ite	ls
 8002f44:	2301      	movls	r3, #1
 8002f46:	2300      	movhi	r3, #0
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	e006      	b.n	8002f5a <HAL_I2C_Init+0x92>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4a7d      	ldr	r2, [pc, #500]	@ (8003144 <HAL_I2C_Init+0x27c>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	bf94      	ite	ls
 8002f54:	2301      	movls	r3, #1
 8002f56:	2300      	movhi	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e0e7      	b.n	8003132 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	4a78      	ldr	r2, [pc, #480]	@ (8003148 <HAL_I2C_Init+0x280>)
 8002f66:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6a:	0c9b      	lsrs	r3, r3, #18
 8002f6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	4a6a      	ldr	r2, [pc, #424]	@ (800313c <HAL_I2C_Init+0x274>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d802      	bhi.n	8002f9c <HAL_I2C_Init+0xd4>
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	e009      	b.n	8002fb0 <HAL_I2C_Init+0xe8>
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002fa2:	fb02 f303 	mul.w	r3, r2, r3
 8002fa6:	4a69      	ldr	r2, [pc, #420]	@ (800314c <HAL_I2C_Init+0x284>)
 8002fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fac:	099b      	lsrs	r3, r3, #6
 8002fae:	3301      	adds	r3, #1
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6812      	ldr	r2, [r2, #0]
 8002fb4:	430b      	orrs	r3, r1
 8002fb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002fc2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	495c      	ldr	r1, [pc, #368]	@ (800313c <HAL_I2C_Init+0x274>)
 8002fcc:	428b      	cmp	r3, r1
 8002fce:	d819      	bhi.n	8003004 <HAL_I2C_Init+0x13c>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	1e59      	subs	r1, r3, #1
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fde:	1c59      	adds	r1, r3, #1
 8002fe0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002fe4:	400b      	ands	r3, r1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00a      	beq.n	8003000 <HAL_I2C_Init+0x138>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	1e59      	subs	r1, r3, #1
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ffe:	e051      	b.n	80030a4 <HAL_I2C_Init+0x1dc>
 8003000:	2304      	movs	r3, #4
 8003002:	e04f      	b.n	80030a4 <HAL_I2C_Init+0x1dc>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d111      	bne.n	8003030 <HAL_I2C_Init+0x168>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	1e58      	subs	r0, r3, #1
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6859      	ldr	r1, [r3, #4]
 8003014:	460b      	mov	r3, r1
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	440b      	add	r3, r1
 800301a:	fbb0 f3f3 	udiv	r3, r0, r3
 800301e:	3301      	adds	r3, #1
 8003020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003024:	2b00      	cmp	r3, #0
 8003026:	bf0c      	ite	eq
 8003028:	2301      	moveq	r3, #1
 800302a:	2300      	movne	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	e012      	b.n	8003056 <HAL_I2C_Init+0x18e>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	1e58      	subs	r0, r3, #1
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6859      	ldr	r1, [r3, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	440b      	add	r3, r1
 800303e:	0099      	lsls	r1, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	fbb0 f3f3 	udiv	r3, r0, r3
 8003046:	3301      	adds	r3, #1
 8003048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800304c:	2b00      	cmp	r3, #0
 800304e:	bf0c      	ite	eq
 8003050:	2301      	moveq	r3, #1
 8003052:	2300      	movne	r3, #0
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <HAL_I2C_Init+0x196>
 800305a:	2301      	movs	r3, #1
 800305c:	e022      	b.n	80030a4 <HAL_I2C_Init+0x1dc>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10e      	bne.n	8003084 <HAL_I2C_Init+0x1bc>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	1e58      	subs	r0, r3, #1
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6859      	ldr	r1, [r3, #4]
 800306e:	460b      	mov	r3, r1
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	440b      	add	r3, r1
 8003074:	fbb0 f3f3 	udiv	r3, r0, r3
 8003078:	3301      	adds	r3, #1
 800307a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800307e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003082:	e00f      	b.n	80030a4 <HAL_I2C_Init+0x1dc>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	1e58      	subs	r0, r3, #1
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6859      	ldr	r1, [r3, #4]
 800308c:	460b      	mov	r3, r1
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	0099      	lsls	r1, r3, #2
 8003094:	440b      	add	r3, r1
 8003096:	fbb0 f3f3 	udiv	r3, r0, r3
 800309a:	3301      	adds	r3, #1
 800309c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	6809      	ldr	r1, [r1, #0]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69da      	ldr	r2, [r3, #28]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80030d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6911      	ldr	r1, [r2, #16]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	68d2      	ldr	r2, [r2, #12]
 80030de:	4311      	orrs	r1, r2
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6812      	ldr	r2, [r2, #0]
 80030e4:	430b      	orrs	r3, r1
 80030e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	695a      	ldr	r2, [r3, #20]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	430a      	orrs	r2, r1
 8003102:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0201 	orr.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2220      	movs	r2, #32
 800311e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	000186a0 	.word	0x000186a0
 8003140:	001e847f 	.word	0x001e847f
 8003144:	003d08ff 	.word	0x003d08ff
 8003148:	431bde83 	.word	0x431bde83
 800314c:	10624dd3 	.word	0x10624dd3

08003150 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b088      	sub	sp, #32
 8003154:	af02      	add	r7, sp, #8
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	607a      	str	r2, [r7, #4]
 800315a:	461a      	mov	r2, r3
 800315c:	460b      	mov	r3, r1
 800315e:	817b      	strh	r3, [r7, #10]
 8003160:	4613      	mov	r3, r2
 8003162:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003164:	f7ff f8b6 	bl	80022d4 <HAL_GetTick>
 8003168:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b20      	cmp	r3, #32
 8003174:	f040 80e0 	bne.w	8003338 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	2319      	movs	r3, #25
 800317e:	2201      	movs	r2, #1
 8003180:	4970      	ldr	r1, [pc, #448]	@ (8003344 <HAL_I2C_Master_Transmit+0x1f4>)
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 fdf4 	bl	8003d70 <I2C_WaitOnFlagUntilTimeout>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800318e:	2302      	movs	r3, #2
 8003190:	e0d3      	b.n	800333a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003198:	2b01      	cmp	r3, #1
 800319a:	d101      	bne.n	80031a0 <HAL_I2C_Master_Transmit+0x50>
 800319c:	2302      	movs	r3, #2
 800319e:	e0cc      	b.n	800333a <HAL_I2C_Master_Transmit+0x1ea>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d007      	beq.n	80031c6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f042 0201 	orr.w	r2, r2, #1
 80031c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2221      	movs	r2, #33	@ 0x21
 80031da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2210      	movs	r2, #16
 80031e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	893a      	ldrh	r2, [r7, #8]
 80031f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4a50      	ldr	r2, [pc, #320]	@ (8003348 <HAL_I2C_Master_Transmit+0x1f8>)
 8003206:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003208:	8979      	ldrh	r1, [r7, #10]
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	6a3a      	ldr	r2, [r7, #32]
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 fbc8 	bl	80039a4 <I2C_MasterRequestWrite>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e08d      	b.n	800333a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800321e:	2300      	movs	r3, #0
 8003220:	613b      	str	r3, [r7, #16]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	613b      	str	r3, [r7, #16]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	613b      	str	r3, [r7, #16]
 8003232:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003234:	e066      	b.n	8003304 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	6a39      	ldr	r1, [r7, #32]
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 feb2 	bl	8003fa4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00d      	beq.n	8003262 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324a:	2b04      	cmp	r3, #4
 800324c:	d107      	bne.n	800325e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800325c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e06b      	b.n	800333a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003266:	781a      	ldrb	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003272:	1c5a      	adds	r2, r3, #1
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800327c:	b29b      	uxth	r3, r3
 800327e:	3b01      	subs	r3, #1
 8003280:	b29a      	uxth	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800328a:	3b01      	subs	r3, #1
 800328c:	b29a      	uxth	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b04      	cmp	r3, #4
 800329e:	d11b      	bne.n	80032d8 <HAL_I2C_Master_Transmit+0x188>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d017      	beq.n	80032d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ac:	781a      	ldrb	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b8:	1c5a      	adds	r2, r3, #1
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	6a39      	ldr	r1, [r7, #32]
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 fea9 	bl	8004034 <I2C_WaitOnBTFFlagUntilTimeout>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00d      	beq.n	8003304 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ec:	2b04      	cmp	r3, #4
 80032ee:	d107      	bne.n	8003300 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e01a      	b.n	800333a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003308:	2b00      	cmp	r3, #0
 800330a:	d194      	bne.n	8003236 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800331a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003334:	2300      	movs	r3, #0
 8003336:	e000      	b.n	800333a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003338:	2302      	movs	r3, #2
  }
}
 800333a:	4618      	mov	r0, r3
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	00100002 	.word	0x00100002
 8003348:	ffff0000 	.word	0xffff0000

0800334c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b08c      	sub	sp, #48	@ 0x30
 8003350:	af02      	add	r7, sp, #8
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	607a      	str	r2, [r7, #4]
 8003356:	461a      	mov	r2, r3
 8003358:	460b      	mov	r3, r1
 800335a:	817b      	strh	r3, [r7, #10]
 800335c:	4613      	mov	r3, r2
 800335e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003360:	f7fe ffb8 	bl	80022d4 <HAL_GetTick>
 8003364:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b20      	cmp	r3, #32
 8003370:	f040 8217 	bne.w	80037a2 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	2319      	movs	r3, #25
 800337a:	2201      	movs	r2, #1
 800337c:	497c      	ldr	r1, [pc, #496]	@ (8003570 <HAL_I2C_Master_Receive+0x224>)
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 fcf6 	bl	8003d70 <I2C_WaitOnFlagUntilTimeout>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800338a:	2302      	movs	r3, #2
 800338c:	e20a      	b.n	80037a4 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003394:	2b01      	cmp	r3, #1
 8003396:	d101      	bne.n	800339c <HAL_I2C_Master_Receive+0x50>
 8003398:	2302      	movs	r3, #2
 800339a:	e203      	b.n	80037a4 <HAL_I2C_Master_Receive+0x458>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d007      	beq.n	80033c2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f042 0201 	orr.w	r2, r2, #1
 80033c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2222      	movs	r2, #34	@ 0x22
 80033d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2210      	movs	r2, #16
 80033de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	893a      	ldrh	r2, [r7, #8]
 80033f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	4a5c      	ldr	r2, [pc, #368]	@ (8003574 <HAL_I2C_Master_Receive+0x228>)
 8003402:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003404:	8979      	ldrh	r1, [r7, #10]
 8003406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003408:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 fb4c 	bl	8003aa8 <I2C_MasterRequestRead>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e1c4      	b.n	80037a4 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800341e:	2b00      	cmp	r3, #0
 8003420:	d113      	bne.n	800344a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003422:	2300      	movs	r3, #0
 8003424:	623b      	str	r3, [r7, #32]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	623b      	str	r3, [r7, #32]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	623b      	str	r3, [r7, #32]
 8003436:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	e198      	b.n	800377c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800344e:	2b01      	cmp	r3, #1
 8003450:	d11b      	bne.n	800348a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003460:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003462:	2300      	movs	r3, #0
 8003464:	61fb      	str	r3, [r7, #28]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	61fb      	str	r3, [r7, #28]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	61fb      	str	r3, [r7, #28]
 8003476:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	e178      	b.n	800377c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800348e:	2b02      	cmp	r3, #2
 8003490:	d11b      	bne.n	80034ca <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034b2:	2300      	movs	r3, #0
 80034b4:	61bb      	str	r3, [r7, #24]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	61bb      	str	r3, [r7, #24]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	61bb      	str	r3, [r7, #24]
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	e158      	b.n	800377c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80034d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034da:	2300      	movs	r3, #0
 80034dc:	617b      	str	r3, [r7, #20]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	617b      	str	r3, [r7, #20]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	617b      	str	r3, [r7, #20]
 80034ee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80034f0:	e144      	b.n	800377c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034f6:	2b03      	cmp	r3, #3
 80034f8:	f200 80f1 	bhi.w	80036de <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003500:	2b01      	cmp	r3, #1
 8003502:	d123      	bne.n	800354c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003504:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003506:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 fddb 	bl	80040c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e145      	b.n	80037a4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691a      	ldr	r2, [r3, #16]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352a:	1c5a      	adds	r2, r3, #1
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003534:	3b01      	subs	r3, #1
 8003536:	b29a      	uxth	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003540:	b29b      	uxth	r3, r3
 8003542:	3b01      	subs	r3, #1
 8003544:	b29a      	uxth	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800354a:	e117      	b.n	800377c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003550:	2b02      	cmp	r3, #2
 8003552:	d14e      	bne.n	80035f2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800355a:	2200      	movs	r2, #0
 800355c:	4906      	ldr	r1, [pc, #24]	@ (8003578 <HAL_I2C_Master_Receive+0x22c>)
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f000 fc06 	bl	8003d70 <I2C_WaitOnFlagUntilTimeout>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d008      	beq.n	800357c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e11a      	b.n	80037a4 <HAL_I2C_Master_Receive+0x458>
 800356e:	bf00      	nop
 8003570:	00100002 	.word	0x00100002
 8003574:	ffff0000 	.word	0xffff0000
 8003578:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800358a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	691a      	ldr	r2, [r3, #16]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359e:	1c5a      	adds	r2, r3, #1
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a8:	3b01      	subs	r3, #1
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	3b01      	subs	r3, #1
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	691a      	ldr	r2, [r3, #16]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035da:	3b01      	subs	r3, #1
 80035dc:	b29a      	uxth	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80035f0:	e0c4      	b.n	800377c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f8:	2200      	movs	r2, #0
 80035fa:	496c      	ldr	r1, [pc, #432]	@ (80037ac <HAL_I2C_Master_Receive+0x460>)
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f000 fbb7 	bl	8003d70 <I2C_WaitOnFlagUntilTimeout>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e0cb      	b.n	80037a4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800361a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	691a      	ldr	r2, [r3, #16]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003626:	b2d2      	uxtb	r2, r2
 8003628:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362e:	1c5a      	adds	r2, r3, #1
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003638:	3b01      	subs	r3, #1
 800363a:	b29a      	uxth	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003644:	b29b      	uxth	r3, r3
 8003646:	3b01      	subs	r3, #1
 8003648:	b29a      	uxth	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800364e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003654:	2200      	movs	r2, #0
 8003656:	4955      	ldr	r1, [pc, #340]	@ (80037ac <HAL_I2C_Master_Receive+0x460>)
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 fb89 	bl	8003d70 <I2C_WaitOnFlagUntilTimeout>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e09d      	b.n	80037a4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003676:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	691a      	ldr	r2, [r3, #16]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368a:	1c5a      	adds	r2, r3, #1
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003694:	3b01      	subs	r3, #1
 8003696:	b29a      	uxth	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	3b01      	subs	r3, #1
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	691a      	ldr	r2, [r3, #16]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036bc:	1c5a      	adds	r2, r3, #1
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036c6:	3b01      	subs	r3, #1
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	3b01      	subs	r3, #1
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80036dc:	e04e      	b.n	800377c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 fcee 	bl	80040c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e058      	b.n	80037a4 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	691a      	ldr	r2, [r3, #16]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fc:	b2d2      	uxtb	r2, r2
 80036fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003704:	1c5a      	adds	r2, r3, #1
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800370e:	3b01      	subs	r3, #1
 8003710:	b29a      	uxth	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800371a:	b29b      	uxth	r3, r3
 800371c:	3b01      	subs	r3, #1
 800371e:	b29a      	uxth	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	2b04      	cmp	r3, #4
 8003730:	d124      	bne.n	800377c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003736:	2b03      	cmp	r3, #3
 8003738:	d107      	bne.n	800374a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003748:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	691a      	ldr	r2, [r3, #16]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003766:	3b01      	subs	r3, #1
 8003768:	b29a      	uxth	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003772:	b29b      	uxth	r3, r3
 8003774:	3b01      	subs	r3, #1
 8003776:	b29a      	uxth	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003780:	2b00      	cmp	r3, #0
 8003782:	f47f aeb6 	bne.w	80034f2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2220      	movs	r2, #32
 800378a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800379e:	2300      	movs	r3, #0
 80037a0:	e000      	b.n	80037a4 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80037a2:	2302      	movs	r3, #2
  }
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3728      	adds	r7, #40	@ 0x28
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	00010004 	.word	0x00010004

080037b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b088      	sub	sp, #32
 80037b4:	af02      	add	r7, sp, #8
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	4608      	mov	r0, r1
 80037ba:	4611      	mov	r1, r2
 80037bc:	461a      	mov	r2, r3
 80037be:	4603      	mov	r3, r0
 80037c0:	817b      	strh	r3, [r7, #10]
 80037c2:	460b      	mov	r3, r1
 80037c4:	813b      	strh	r3, [r7, #8]
 80037c6:	4613      	mov	r3, r2
 80037c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037ca:	f7fe fd83 	bl	80022d4 <HAL_GetTick>
 80037ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b20      	cmp	r3, #32
 80037da:	f040 80d9 	bne.w	8003990 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	2319      	movs	r3, #25
 80037e4:	2201      	movs	r2, #1
 80037e6:	496d      	ldr	r1, [pc, #436]	@ (800399c <HAL_I2C_Mem_Write+0x1ec>)
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 fac1 	bl	8003d70 <I2C_WaitOnFlagUntilTimeout>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80037f4:	2302      	movs	r3, #2
 80037f6:	e0cc      	b.n	8003992 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d101      	bne.n	8003806 <HAL_I2C_Mem_Write+0x56>
 8003802:	2302      	movs	r3, #2
 8003804:	e0c5      	b.n	8003992 <HAL_I2C_Mem_Write+0x1e2>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b01      	cmp	r3, #1
 800381a:	d007      	beq.n	800382c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 0201 	orr.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800383a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2221      	movs	r2, #33	@ 0x21
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2240      	movs	r2, #64	@ 0x40
 8003848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6a3a      	ldr	r2, [r7, #32]
 8003856:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800385c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003862:	b29a      	uxth	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	4a4d      	ldr	r2, [pc, #308]	@ (80039a0 <HAL_I2C_Mem_Write+0x1f0>)
 800386c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800386e:	88f8      	ldrh	r0, [r7, #6]
 8003870:	893a      	ldrh	r2, [r7, #8]
 8003872:	8979      	ldrh	r1, [r7, #10]
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	9301      	str	r3, [sp, #4]
 8003878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	4603      	mov	r3, r0
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 f9e0 	bl	8003c44 <I2C_RequestMemoryWrite>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d052      	beq.n	8003930 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e081      	b.n	8003992 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f000 fb86 	bl	8003fa4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00d      	beq.n	80038ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	d107      	bne.n	80038b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e06b      	b.n	8003992 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038be:	781a      	ldrb	r2, [r3, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ca:	1c5a      	adds	r2, r3, #1
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b04      	cmp	r3, #4
 80038f6:	d11b      	bne.n	8003930 <HAL_I2C_Mem_Write+0x180>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d017      	beq.n	8003930 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003904:	781a      	ldrb	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003910:	1c5a      	adds	r2, r3, #1
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003926:	b29b      	uxth	r3, r3
 8003928:	3b01      	subs	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1aa      	bne.n	800388e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 fb79 	bl	8004034 <I2C_WaitOnBTFFlagUntilTimeout>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00d      	beq.n	8003964 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394c:	2b04      	cmp	r3, #4
 800394e:	d107      	bne.n	8003960 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800395e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e016      	b.n	8003992 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003972:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2220      	movs	r2, #32
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800398c:	2300      	movs	r3, #0
 800398e:	e000      	b.n	8003992 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003990:	2302      	movs	r3, #2
  }
}
 8003992:	4618      	mov	r0, r3
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	00100002 	.word	0x00100002
 80039a0:	ffff0000 	.word	0xffff0000

080039a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b088      	sub	sp, #32
 80039a8:	af02      	add	r7, sp, #8
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	607a      	str	r2, [r7, #4]
 80039ae:	603b      	str	r3, [r7, #0]
 80039b0:	460b      	mov	r3, r1
 80039b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d006      	beq.n	80039ce <I2C_MasterRequestWrite+0x2a>
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d003      	beq.n	80039ce <I2C_MasterRequestWrite+0x2a>
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80039cc:	d108      	bne.n	80039e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	e00b      	b.n	80039f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e4:	2b12      	cmp	r3, #18
 80039e6:	d107      	bne.n	80039f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 f9b3 	bl	8003d70 <I2C_WaitOnFlagUntilTimeout>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00d      	beq.n	8003a2c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a1e:	d103      	bne.n	8003a28 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a26:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e035      	b.n	8003a98 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a34:	d108      	bne.n	8003a48 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a36:	897b      	ldrh	r3, [r7, #10]
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a44:	611a      	str	r2, [r3, #16]
 8003a46:	e01b      	b.n	8003a80 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a48:	897b      	ldrh	r3, [r7, #10]
 8003a4a:	11db      	asrs	r3, r3, #7
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	f003 0306 	and.w	r3, r3, #6
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	f063 030f 	orn	r3, r3, #15
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	490e      	ldr	r1, [pc, #56]	@ (8003aa0 <I2C_MasterRequestWrite+0xfc>)
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 f9fc 	bl	8003e64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e010      	b.n	8003a98 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a76:	897b      	ldrh	r3, [r7, #10]
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	4907      	ldr	r1, [pc, #28]	@ (8003aa4 <I2C_MasterRequestWrite+0x100>)
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 f9ec 	bl	8003e64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e000      	b.n	8003a98 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3718      	adds	r7, #24
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	00010008 	.word	0x00010008
 8003aa4:	00010002 	.word	0x00010002

08003aa8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b088      	sub	sp, #32
 8003aac:	af02      	add	r7, sp, #8
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	607a      	str	r2, [r7, #4]
 8003ab2:	603b      	str	r3, [r7, #0]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003abc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003acc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d006      	beq.n	8003ae2 <I2C_MasterRequestRead+0x3a>
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d003      	beq.n	8003ae2 <I2C_MasterRequestRead+0x3a>
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ae0:	d108      	bne.n	8003af4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	e00b      	b.n	8003b0c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af8:	2b11      	cmp	r3, #17
 8003afa:	d107      	bne.n	8003b0c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b0a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 f929 	bl	8003d70 <I2C_WaitOnFlagUntilTimeout>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00d      	beq.n	8003b40 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b32:	d103      	bne.n	8003b3c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b3a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e079      	b.n	8003c34 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b48:	d108      	bne.n	8003b5c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b4a:	897b      	ldrh	r3, [r7, #10]
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	f043 0301 	orr.w	r3, r3, #1
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	611a      	str	r2, [r3, #16]
 8003b5a:	e05f      	b.n	8003c1c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b5c:	897b      	ldrh	r3, [r7, #10]
 8003b5e:	11db      	asrs	r3, r3, #7
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	f003 0306 	and.w	r3, r3, #6
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	f063 030f 	orn	r3, r3, #15
 8003b6c:	b2da      	uxtb	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	4930      	ldr	r1, [pc, #192]	@ (8003c3c <I2C_MasterRequestRead+0x194>)
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f000 f972 	bl	8003e64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e054      	b.n	8003c34 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b8a:	897b      	ldrh	r3, [r7, #10]
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	4929      	ldr	r1, [pc, #164]	@ (8003c40 <I2C_MasterRequestRead+0x198>)
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f000 f962 	bl	8003e64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e044      	b.n	8003c34 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003baa:	2300      	movs	r3, #0
 8003bac:	613b      	str	r3, [r7, #16]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	613b      	str	r3, [r7, #16]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	613b      	str	r3, [r7, #16]
 8003bbe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bce:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f000 f8c7 	bl	8003d70 <I2C_WaitOnFlagUntilTimeout>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00d      	beq.n	8003c04 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bf6:	d103      	bne.n	8003c00 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bfe:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e017      	b.n	8003c34 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003c04:	897b      	ldrh	r3, [r7, #10]
 8003c06:	11db      	asrs	r3, r3, #7
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	f003 0306 	and.w	r3, r3, #6
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	f063 030e 	orn	r3, r3, #14
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	4907      	ldr	r1, [pc, #28]	@ (8003c40 <I2C_MasterRequestRead+0x198>)
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 f91e 	bl	8003e64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e000      	b.n	8003c34 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3718      	adds	r7, #24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	00010008 	.word	0x00010008
 8003c40:	00010002 	.word	0x00010002

08003c44 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b088      	sub	sp, #32
 8003c48:	af02      	add	r7, sp, #8
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	4608      	mov	r0, r1
 8003c4e:	4611      	mov	r1, r2
 8003c50:	461a      	mov	r2, r3
 8003c52:	4603      	mov	r3, r0
 8003c54:	817b      	strh	r3, [r7, #10]
 8003c56:	460b      	mov	r3, r1
 8003c58:	813b      	strh	r3, [r7, #8]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 f878 	bl	8003d70 <I2C_WaitOnFlagUntilTimeout>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00d      	beq.n	8003ca2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c94:	d103      	bne.n	8003c9e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c9c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e05f      	b.n	8003d62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ca2:	897b      	ldrh	r3, [r7, #10]
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003cb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb4:	6a3a      	ldr	r2, [r7, #32]
 8003cb6:	492d      	ldr	r1, [pc, #180]	@ (8003d6c <I2C_RequestMemoryWrite+0x128>)
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 f8d3 	bl	8003e64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e04c      	b.n	8003d62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cc8:	2300      	movs	r3, #0
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ce0:	6a39      	ldr	r1, [r7, #32]
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 f95e 	bl	8003fa4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00d      	beq.n	8003d0a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d107      	bne.n	8003d06 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e02b      	b.n	8003d62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d0a:	88fb      	ldrh	r3, [r7, #6]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d105      	bne.n	8003d1c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d10:	893b      	ldrh	r3, [r7, #8]
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	611a      	str	r2, [r3, #16]
 8003d1a:	e021      	b.n	8003d60 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d1c:	893b      	ldrh	r3, [r7, #8]
 8003d1e:	0a1b      	lsrs	r3, r3, #8
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	b2da      	uxtb	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d2c:	6a39      	ldr	r1, [r7, #32]
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 f938 	bl	8003fa4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00d      	beq.n	8003d56 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d107      	bne.n	8003d52 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e005      	b.n	8003d62 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d56:	893b      	ldrh	r3, [r7, #8]
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3718      	adds	r7, #24
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	00010002 	.word	0x00010002

08003d70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	603b      	str	r3, [r7, #0]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d80:	e048      	b.n	8003e14 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d88:	d044      	beq.n	8003e14 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d8a:	f7fe faa3 	bl	80022d4 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d302      	bcc.n	8003da0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d139      	bne.n	8003e14 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	0c1b      	lsrs	r3, r3, #16
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d10d      	bne.n	8003dc6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	43da      	mvns	r2, r3
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	4013      	ands	r3, r2
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	bf0c      	ite	eq
 8003dbc:	2301      	moveq	r3, #1
 8003dbe:	2300      	movne	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	e00c      	b.n	8003de0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	43da      	mvns	r2, r3
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	bf0c      	ite	eq
 8003dd8:	2301      	moveq	r3, #1
 8003dda:	2300      	movne	r3, #0
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	461a      	mov	r2, r3
 8003de0:	79fb      	ldrb	r3, [r7, #7]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d116      	bne.n	8003e14 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2220      	movs	r2, #32
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e00:	f043 0220 	orr.w	r2, r3, #32
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e023      	b.n	8003e5c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	0c1b      	lsrs	r3, r3, #16
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d10d      	bne.n	8003e3a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	43da      	mvns	r2, r3
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	bf0c      	ite	eq
 8003e30:	2301      	moveq	r3, #1
 8003e32:	2300      	movne	r3, #0
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	461a      	mov	r2, r3
 8003e38:	e00c      	b.n	8003e54 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	43da      	mvns	r2, r3
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	4013      	ands	r3, r2
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	bf0c      	ite	eq
 8003e4c:	2301      	moveq	r3, #1
 8003e4e:	2300      	movne	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	461a      	mov	r2, r3
 8003e54:	79fb      	ldrb	r3, [r7, #7]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d093      	beq.n	8003d82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
 8003e70:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e72:	e071      	b.n	8003f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e82:	d123      	bne.n	8003ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e92:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb8:	f043 0204 	orr.w	r2, r3, #4
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e067      	b.n	8003f9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed2:	d041      	beq.n	8003f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ed4:	f7fe f9fe 	bl	80022d4 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d302      	bcc.n	8003eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d136      	bne.n	8003f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	0c1b      	lsrs	r3, r3, #16
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d10c      	bne.n	8003f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	43da      	mvns	r2, r3
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	4013      	ands	r3, r2
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	bf14      	ite	ne
 8003f06:	2301      	movne	r3, #1
 8003f08:	2300      	moveq	r3, #0
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	e00b      	b.n	8003f26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	43da      	mvns	r2, r3
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	bf14      	ite	ne
 8003f20:	2301      	movne	r3, #1
 8003f22:	2300      	moveq	r3, #0
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d016      	beq.n	8003f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2220      	movs	r2, #32
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f44:	f043 0220 	orr.w	r2, r3, #32
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e021      	b.n	8003f9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	0c1b      	lsrs	r3, r3, #16
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d10c      	bne.n	8003f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	43da      	mvns	r2, r3
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	bf14      	ite	ne
 8003f74:	2301      	movne	r3, #1
 8003f76:	2300      	moveq	r3, #0
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	e00b      	b.n	8003f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	43da      	mvns	r2, r3
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	4013      	ands	r3, r2
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	bf14      	ite	ne
 8003f8e:	2301      	movne	r3, #1
 8003f90:	2300      	moveq	r3, #0
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f47f af6d 	bne.w	8003e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fb0:	e034      	b.n	800401c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f000 f8e3 	bl	800417e <I2C_IsAcknowledgeFailed>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e034      	b.n	800402c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc8:	d028      	beq.n	800401c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fca:	f7fe f983 	bl	80022d4 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d302      	bcc.n	8003fe0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d11d      	bne.n	800401c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fea:	2b80      	cmp	r3, #128	@ 0x80
 8003fec:	d016      	beq.n	800401c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004008:	f043 0220 	orr.w	r2, r3, #32
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e007      	b.n	800402c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004026:	2b80      	cmp	r3, #128	@ 0x80
 8004028:	d1c3      	bne.n	8003fb2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004040:	e034      	b.n	80040ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f000 f89b 	bl	800417e <I2C_IsAcknowledgeFailed>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e034      	b.n	80040bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004058:	d028      	beq.n	80040ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800405a:	f7fe f93b 	bl	80022d4 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	429a      	cmp	r2, r3
 8004068:	d302      	bcc.n	8004070 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d11d      	bne.n	80040ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	f003 0304 	and.w	r3, r3, #4
 800407a:	2b04      	cmp	r3, #4
 800407c:	d016      	beq.n	80040ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2220      	movs	r2, #32
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004098:	f043 0220 	orr.w	r2, r3, #32
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e007      	b.n	80040bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	f003 0304 	and.w	r3, r3, #4
 80040b6:	2b04      	cmp	r3, #4
 80040b8:	d1c3      	bne.n	8004042 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040d0:	e049      	b.n	8004166 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	f003 0310 	and.w	r3, r3, #16
 80040dc:	2b10      	cmp	r3, #16
 80040de:	d119      	bne.n	8004114 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f06f 0210 	mvn.w	r2, #16
 80040e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2220      	movs	r2, #32
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e030      	b.n	8004176 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004114:	f7fe f8de 	bl	80022d4 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	429a      	cmp	r2, r3
 8004122:	d302      	bcc.n	800412a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d11d      	bne.n	8004166 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004134:	2b40      	cmp	r3, #64	@ 0x40
 8004136:	d016      	beq.n	8004166 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2220      	movs	r2, #32
 8004142:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004152:	f043 0220 	orr.w	r2, r3, #32
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e007      	b.n	8004176 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004170:	2b40      	cmp	r3, #64	@ 0x40
 8004172:	d1ae      	bne.n	80040d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800417e:	b480      	push	{r7}
 8004180:	b083      	sub	sp, #12
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004190:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004194:	d11b      	bne.n	80041ce <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800419e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2220      	movs	r2, #32
 80041aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ba:	f043 0204 	orr.w	r2, r3, #4
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e000      	b.n	80041d0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e267      	b.n	80046be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d075      	beq.n	80042e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041fa:	4b88      	ldr	r3, [pc, #544]	@ (800441c <HAL_RCC_OscConfig+0x240>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f003 030c 	and.w	r3, r3, #12
 8004202:	2b04      	cmp	r3, #4
 8004204:	d00c      	beq.n	8004220 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004206:	4b85      	ldr	r3, [pc, #532]	@ (800441c <HAL_RCC_OscConfig+0x240>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800420e:	2b08      	cmp	r3, #8
 8004210:	d112      	bne.n	8004238 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004212:	4b82      	ldr	r3, [pc, #520]	@ (800441c <HAL_RCC_OscConfig+0x240>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800421a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800421e:	d10b      	bne.n	8004238 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004220:	4b7e      	ldr	r3, [pc, #504]	@ (800441c <HAL_RCC_OscConfig+0x240>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d05b      	beq.n	80042e4 <HAL_RCC_OscConfig+0x108>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d157      	bne.n	80042e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e242      	b.n	80046be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004240:	d106      	bne.n	8004250 <HAL_RCC_OscConfig+0x74>
 8004242:	4b76      	ldr	r3, [pc, #472]	@ (800441c <HAL_RCC_OscConfig+0x240>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a75      	ldr	r2, [pc, #468]	@ (800441c <HAL_RCC_OscConfig+0x240>)
 8004248:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800424c:	6013      	str	r3, [r2, #0]
 800424e:	e01d      	b.n	800428c <HAL_RCC_OscConfig+0xb0>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004258:	d10c      	bne.n	8004274 <HAL_RCC_OscConfig+0x98>
 800425a:	4b70      	ldr	r3, [pc, #448]	@ (800441c <HAL_RCC_OscConfig+0x240>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a6f      	ldr	r2, [pc, #444]	@ (800441c <HAL_RCC_OscConfig+0x240>)
 8004260:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004264:	6013      	str	r3, [r2, #0]
 8004266:	4b6d      	ldr	r3, [pc, #436]	@ (800441c <HAL_RCC_OscConfig+0x240>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a6c      	ldr	r2, [pc, #432]	@ (800441c <HAL_RCC_OscConfig+0x240>)
 800426c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004270:	6013      	str	r3, [r2, #0]
 8004272:	e00b      	b.n	800428c <HAL_RCC_OscConfig+0xb0>
 8004274:	4b69      	ldr	r3, [pc, #420]	@ (800441c <HAL_RCC_OscConfig+0x240>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a68      	ldr	r2, [pc, #416]	@ (800441c <HAL_RCC_OscConfig+0x240>)
 800427a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800427e:	6013      	str	r3, [r2, #0]
 8004280:	4b66      	ldr	r3, [pc, #408]	@ (800441c <HAL_RCC_OscConfig+0x240>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a65      	ldr	r2, [pc, #404]	@ (800441c <HAL_RCC_OscConfig+0x240>)
 8004286:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800428a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d013      	beq.n	80042bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004294:	f7fe f81e 	bl	80022d4 <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800429c:	f7fe f81a 	bl	80022d4 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b64      	cmp	r3, #100	@ 0x64
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e207      	b.n	80046be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ae:	4b5b      	ldr	r3, [pc, #364]	@ (800441c <HAL_RCC_OscConfig+0x240>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0f0      	beq.n	800429c <HAL_RCC_OscConfig+0xc0>
 80042ba:	e014      	b.n	80042e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042bc:	f7fe f80a 	bl	80022d4 <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042c4:	f7fe f806 	bl	80022d4 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b64      	cmp	r3, #100	@ 0x64
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e1f3      	b.n	80046be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042d6:	4b51      	ldr	r3, [pc, #324]	@ (800441c <HAL_RCC_OscConfig+0x240>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1f0      	bne.n	80042c4 <HAL_RCC_OscConfig+0xe8>
 80042e2:	e000      	b.n	80042e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d063      	beq.n	80043ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042f2:	4b4a      	ldr	r3, [pc, #296]	@ (800441c <HAL_RCC_OscConfig+0x240>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 030c 	and.w	r3, r3, #12
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00b      	beq.n	8004316 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042fe:	4b47      	ldr	r3, [pc, #284]	@ (800441c <HAL_RCC_OscConfig+0x240>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004306:	2b08      	cmp	r3, #8
 8004308:	d11c      	bne.n	8004344 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800430a:	4b44      	ldr	r3, [pc, #272]	@ (800441c <HAL_RCC_OscConfig+0x240>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d116      	bne.n	8004344 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004316:	4b41      	ldr	r3, [pc, #260]	@ (800441c <HAL_RCC_OscConfig+0x240>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d005      	beq.n	800432e <HAL_RCC_OscConfig+0x152>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d001      	beq.n	800432e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e1c7      	b.n	80046be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800432e:	4b3b      	ldr	r3, [pc, #236]	@ (800441c <HAL_RCC_OscConfig+0x240>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	00db      	lsls	r3, r3, #3
 800433c:	4937      	ldr	r1, [pc, #220]	@ (800441c <HAL_RCC_OscConfig+0x240>)
 800433e:	4313      	orrs	r3, r2
 8004340:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004342:	e03a      	b.n	80043ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d020      	beq.n	800438e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800434c:	4b34      	ldr	r3, [pc, #208]	@ (8004420 <HAL_RCC_OscConfig+0x244>)
 800434e:	2201      	movs	r2, #1
 8004350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004352:	f7fd ffbf 	bl	80022d4 <HAL_GetTick>
 8004356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004358:	e008      	b.n	800436c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800435a:	f7fd ffbb 	bl	80022d4 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d901      	bls.n	800436c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e1a8      	b.n	80046be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800436c:	4b2b      	ldr	r3, [pc, #172]	@ (800441c <HAL_RCC_OscConfig+0x240>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0f0      	beq.n	800435a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004378:	4b28      	ldr	r3, [pc, #160]	@ (800441c <HAL_RCC_OscConfig+0x240>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	00db      	lsls	r3, r3, #3
 8004386:	4925      	ldr	r1, [pc, #148]	@ (800441c <HAL_RCC_OscConfig+0x240>)
 8004388:	4313      	orrs	r3, r2
 800438a:	600b      	str	r3, [r1, #0]
 800438c:	e015      	b.n	80043ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800438e:	4b24      	ldr	r3, [pc, #144]	@ (8004420 <HAL_RCC_OscConfig+0x244>)
 8004390:	2200      	movs	r2, #0
 8004392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004394:	f7fd ff9e 	bl	80022d4 <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800439c:	f7fd ff9a 	bl	80022d4 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e187      	b.n	80046be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ae:	4b1b      	ldr	r3, [pc, #108]	@ (800441c <HAL_RCC_OscConfig+0x240>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1f0      	bne.n	800439c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0308 	and.w	r3, r3, #8
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d036      	beq.n	8004434 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d016      	beq.n	80043fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043ce:	4b15      	ldr	r3, [pc, #84]	@ (8004424 <HAL_RCC_OscConfig+0x248>)
 80043d0:	2201      	movs	r2, #1
 80043d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d4:	f7fd ff7e 	bl	80022d4 <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043dc:	f7fd ff7a 	bl	80022d4 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e167      	b.n	80046be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ee:	4b0b      	ldr	r3, [pc, #44]	@ (800441c <HAL_RCC_OscConfig+0x240>)
 80043f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0f0      	beq.n	80043dc <HAL_RCC_OscConfig+0x200>
 80043fa:	e01b      	b.n	8004434 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043fc:	4b09      	ldr	r3, [pc, #36]	@ (8004424 <HAL_RCC_OscConfig+0x248>)
 80043fe:	2200      	movs	r2, #0
 8004400:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004402:	f7fd ff67 	bl	80022d4 <HAL_GetTick>
 8004406:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004408:	e00e      	b.n	8004428 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800440a:	f7fd ff63 	bl	80022d4 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d907      	bls.n	8004428 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e150      	b.n	80046be <HAL_RCC_OscConfig+0x4e2>
 800441c:	40023800 	.word	0x40023800
 8004420:	42470000 	.word	0x42470000
 8004424:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004428:	4b88      	ldr	r3, [pc, #544]	@ (800464c <HAL_RCC_OscConfig+0x470>)
 800442a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1ea      	bne.n	800440a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0304 	and.w	r3, r3, #4
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 8097 	beq.w	8004570 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004442:	2300      	movs	r3, #0
 8004444:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004446:	4b81      	ldr	r3, [pc, #516]	@ (800464c <HAL_RCC_OscConfig+0x470>)
 8004448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10f      	bne.n	8004472 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004452:	2300      	movs	r3, #0
 8004454:	60bb      	str	r3, [r7, #8]
 8004456:	4b7d      	ldr	r3, [pc, #500]	@ (800464c <HAL_RCC_OscConfig+0x470>)
 8004458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445a:	4a7c      	ldr	r2, [pc, #496]	@ (800464c <HAL_RCC_OscConfig+0x470>)
 800445c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004460:	6413      	str	r3, [r2, #64]	@ 0x40
 8004462:	4b7a      	ldr	r3, [pc, #488]	@ (800464c <HAL_RCC_OscConfig+0x470>)
 8004464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800446a:	60bb      	str	r3, [r7, #8]
 800446c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800446e:	2301      	movs	r3, #1
 8004470:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004472:	4b77      	ldr	r3, [pc, #476]	@ (8004650 <HAL_RCC_OscConfig+0x474>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800447a:	2b00      	cmp	r3, #0
 800447c:	d118      	bne.n	80044b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800447e:	4b74      	ldr	r3, [pc, #464]	@ (8004650 <HAL_RCC_OscConfig+0x474>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a73      	ldr	r2, [pc, #460]	@ (8004650 <HAL_RCC_OscConfig+0x474>)
 8004484:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004488:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800448a:	f7fd ff23 	bl	80022d4 <HAL_GetTick>
 800448e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004490:	e008      	b.n	80044a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004492:	f7fd ff1f 	bl	80022d4 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d901      	bls.n	80044a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e10c      	b.n	80046be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a4:	4b6a      	ldr	r3, [pc, #424]	@ (8004650 <HAL_RCC_OscConfig+0x474>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d0f0      	beq.n	8004492 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d106      	bne.n	80044c6 <HAL_RCC_OscConfig+0x2ea>
 80044b8:	4b64      	ldr	r3, [pc, #400]	@ (800464c <HAL_RCC_OscConfig+0x470>)
 80044ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044bc:	4a63      	ldr	r2, [pc, #396]	@ (800464c <HAL_RCC_OscConfig+0x470>)
 80044be:	f043 0301 	orr.w	r3, r3, #1
 80044c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80044c4:	e01c      	b.n	8004500 <HAL_RCC_OscConfig+0x324>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	2b05      	cmp	r3, #5
 80044cc:	d10c      	bne.n	80044e8 <HAL_RCC_OscConfig+0x30c>
 80044ce:	4b5f      	ldr	r3, [pc, #380]	@ (800464c <HAL_RCC_OscConfig+0x470>)
 80044d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044d2:	4a5e      	ldr	r2, [pc, #376]	@ (800464c <HAL_RCC_OscConfig+0x470>)
 80044d4:	f043 0304 	orr.w	r3, r3, #4
 80044d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80044da:	4b5c      	ldr	r3, [pc, #368]	@ (800464c <HAL_RCC_OscConfig+0x470>)
 80044dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044de:	4a5b      	ldr	r2, [pc, #364]	@ (800464c <HAL_RCC_OscConfig+0x470>)
 80044e0:	f043 0301 	orr.w	r3, r3, #1
 80044e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80044e6:	e00b      	b.n	8004500 <HAL_RCC_OscConfig+0x324>
 80044e8:	4b58      	ldr	r3, [pc, #352]	@ (800464c <HAL_RCC_OscConfig+0x470>)
 80044ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ec:	4a57      	ldr	r2, [pc, #348]	@ (800464c <HAL_RCC_OscConfig+0x470>)
 80044ee:	f023 0301 	bic.w	r3, r3, #1
 80044f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80044f4:	4b55      	ldr	r3, [pc, #340]	@ (800464c <HAL_RCC_OscConfig+0x470>)
 80044f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044f8:	4a54      	ldr	r2, [pc, #336]	@ (800464c <HAL_RCC_OscConfig+0x470>)
 80044fa:	f023 0304 	bic.w	r3, r3, #4
 80044fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d015      	beq.n	8004534 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004508:	f7fd fee4 	bl	80022d4 <HAL_GetTick>
 800450c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800450e:	e00a      	b.n	8004526 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004510:	f7fd fee0 	bl	80022d4 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800451e:	4293      	cmp	r3, r2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e0cb      	b.n	80046be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004526:	4b49      	ldr	r3, [pc, #292]	@ (800464c <HAL_RCC_OscConfig+0x470>)
 8004528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0ee      	beq.n	8004510 <HAL_RCC_OscConfig+0x334>
 8004532:	e014      	b.n	800455e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004534:	f7fd fece 	bl	80022d4 <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800453a:	e00a      	b.n	8004552 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800453c:	f7fd feca 	bl	80022d4 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	f241 3288 	movw	r2, #5000	@ 0x1388
 800454a:	4293      	cmp	r3, r2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e0b5      	b.n	80046be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004552:	4b3e      	ldr	r3, [pc, #248]	@ (800464c <HAL_RCC_OscConfig+0x470>)
 8004554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1ee      	bne.n	800453c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800455e:	7dfb      	ldrb	r3, [r7, #23]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d105      	bne.n	8004570 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004564:	4b39      	ldr	r3, [pc, #228]	@ (800464c <HAL_RCC_OscConfig+0x470>)
 8004566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004568:	4a38      	ldr	r2, [pc, #224]	@ (800464c <HAL_RCC_OscConfig+0x470>)
 800456a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800456e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 80a1 	beq.w	80046bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800457a:	4b34      	ldr	r3, [pc, #208]	@ (800464c <HAL_RCC_OscConfig+0x470>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f003 030c 	and.w	r3, r3, #12
 8004582:	2b08      	cmp	r3, #8
 8004584:	d05c      	beq.n	8004640 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	2b02      	cmp	r3, #2
 800458c:	d141      	bne.n	8004612 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800458e:	4b31      	ldr	r3, [pc, #196]	@ (8004654 <HAL_RCC_OscConfig+0x478>)
 8004590:	2200      	movs	r2, #0
 8004592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004594:	f7fd fe9e 	bl	80022d4 <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800459c:	f7fd fe9a 	bl	80022d4 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e087      	b.n	80046be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ae:	4b27      	ldr	r3, [pc, #156]	@ (800464c <HAL_RCC_OscConfig+0x470>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1f0      	bne.n	800459c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	69da      	ldr	r2, [r3, #28]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	431a      	orrs	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c8:	019b      	lsls	r3, r3, #6
 80045ca:	431a      	orrs	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d0:	085b      	lsrs	r3, r3, #1
 80045d2:	3b01      	subs	r3, #1
 80045d4:	041b      	lsls	r3, r3, #16
 80045d6:	431a      	orrs	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045dc:	061b      	lsls	r3, r3, #24
 80045de:	491b      	ldr	r1, [pc, #108]	@ (800464c <HAL_RCC_OscConfig+0x470>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045e4:	4b1b      	ldr	r3, [pc, #108]	@ (8004654 <HAL_RCC_OscConfig+0x478>)
 80045e6:	2201      	movs	r2, #1
 80045e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ea:	f7fd fe73 	bl	80022d4 <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045f0:	e008      	b.n	8004604 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045f2:	f7fd fe6f 	bl	80022d4 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e05c      	b.n	80046be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004604:	4b11      	ldr	r3, [pc, #68]	@ (800464c <HAL_RCC_OscConfig+0x470>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0f0      	beq.n	80045f2 <HAL_RCC_OscConfig+0x416>
 8004610:	e054      	b.n	80046bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004612:	4b10      	ldr	r3, [pc, #64]	@ (8004654 <HAL_RCC_OscConfig+0x478>)
 8004614:	2200      	movs	r2, #0
 8004616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004618:	f7fd fe5c 	bl	80022d4 <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800461e:	e008      	b.n	8004632 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004620:	f7fd fe58 	bl	80022d4 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e045      	b.n	80046be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004632:	4b06      	ldr	r3, [pc, #24]	@ (800464c <HAL_RCC_OscConfig+0x470>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1f0      	bne.n	8004620 <HAL_RCC_OscConfig+0x444>
 800463e:	e03d      	b.n	80046bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d107      	bne.n	8004658 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e038      	b.n	80046be <HAL_RCC_OscConfig+0x4e2>
 800464c:	40023800 	.word	0x40023800
 8004650:	40007000 	.word	0x40007000
 8004654:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004658:	4b1b      	ldr	r3, [pc, #108]	@ (80046c8 <HAL_RCC_OscConfig+0x4ec>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d028      	beq.n	80046b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004670:	429a      	cmp	r2, r3
 8004672:	d121      	bne.n	80046b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800467e:	429a      	cmp	r2, r3
 8004680:	d11a      	bne.n	80046b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004688:	4013      	ands	r3, r2
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800468e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004690:	4293      	cmp	r3, r2
 8004692:	d111      	bne.n	80046b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800469e:	085b      	lsrs	r3, r3, #1
 80046a0:	3b01      	subs	r3, #1
 80046a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d107      	bne.n	80046b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d001      	beq.n	80046bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e000      	b.n	80046be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3718      	adds	r7, #24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	40023800 	.word	0x40023800

080046cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d101      	bne.n	80046e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e0cc      	b.n	800487a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046e0:	4b68      	ldr	r3, [pc, #416]	@ (8004884 <HAL_RCC_ClockConfig+0x1b8>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0307 	and.w	r3, r3, #7
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d90c      	bls.n	8004708 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ee:	4b65      	ldr	r3, [pc, #404]	@ (8004884 <HAL_RCC_ClockConfig+0x1b8>)
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	b2d2      	uxtb	r2, r2
 80046f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f6:	4b63      	ldr	r3, [pc, #396]	@ (8004884 <HAL_RCC_ClockConfig+0x1b8>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0307 	and.w	r3, r3, #7
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	429a      	cmp	r2, r3
 8004702:	d001      	beq.n	8004708 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e0b8      	b.n	800487a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d020      	beq.n	8004756 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0304 	and.w	r3, r3, #4
 800471c:	2b00      	cmp	r3, #0
 800471e:	d005      	beq.n	800472c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004720:	4b59      	ldr	r3, [pc, #356]	@ (8004888 <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	4a58      	ldr	r2, [pc, #352]	@ (8004888 <HAL_RCC_ClockConfig+0x1bc>)
 8004726:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800472a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0308 	and.w	r3, r3, #8
 8004734:	2b00      	cmp	r3, #0
 8004736:	d005      	beq.n	8004744 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004738:	4b53      	ldr	r3, [pc, #332]	@ (8004888 <HAL_RCC_ClockConfig+0x1bc>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	4a52      	ldr	r2, [pc, #328]	@ (8004888 <HAL_RCC_ClockConfig+0x1bc>)
 800473e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004742:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004744:	4b50      	ldr	r3, [pc, #320]	@ (8004888 <HAL_RCC_ClockConfig+0x1bc>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	494d      	ldr	r1, [pc, #308]	@ (8004888 <HAL_RCC_ClockConfig+0x1bc>)
 8004752:	4313      	orrs	r3, r2
 8004754:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d044      	beq.n	80047ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d107      	bne.n	800477a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800476a:	4b47      	ldr	r3, [pc, #284]	@ (8004888 <HAL_RCC_ClockConfig+0x1bc>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d119      	bne.n	80047aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e07f      	b.n	800487a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	2b02      	cmp	r3, #2
 8004780:	d003      	beq.n	800478a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004786:	2b03      	cmp	r3, #3
 8004788:	d107      	bne.n	800479a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800478a:	4b3f      	ldr	r3, [pc, #252]	@ (8004888 <HAL_RCC_ClockConfig+0x1bc>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d109      	bne.n	80047aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e06f      	b.n	800487a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800479a:	4b3b      	ldr	r3, [pc, #236]	@ (8004888 <HAL_RCC_ClockConfig+0x1bc>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e067      	b.n	800487a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047aa:	4b37      	ldr	r3, [pc, #220]	@ (8004888 <HAL_RCC_ClockConfig+0x1bc>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f023 0203 	bic.w	r2, r3, #3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	4934      	ldr	r1, [pc, #208]	@ (8004888 <HAL_RCC_ClockConfig+0x1bc>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047bc:	f7fd fd8a 	bl	80022d4 <HAL_GetTick>
 80047c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047c2:	e00a      	b.n	80047da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047c4:	f7fd fd86 	bl	80022d4 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e04f      	b.n	800487a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047da:	4b2b      	ldr	r3, [pc, #172]	@ (8004888 <HAL_RCC_ClockConfig+0x1bc>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 020c 	and.w	r2, r3, #12
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d1eb      	bne.n	80047c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047ec:	4b25      	ldr	r3, [pc, #148]	@ (8004884 <HAL_RCC_ClockConfig+0x1b8>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0307 	and.w	r3, r3, #7
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d20c      	bcs.n	8004814 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047fa:	4b22      	ldr	r3, [pc, #136]	@ (8004884 <HAL_RCC_ClockConfig+0x1b8>)
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004802:	4b20      	ldr	r3, [pc, #128]	@ (8004884 <HAL_RCC_ClockConfig+0x1b8>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0307 	and.w	r3, r3, #7
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	429a      	cmp	r2, r3
 800480e:	d001      	beq.n	8004814 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e032      	b.n	800487a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0304 	and.w	r3, r3, #4
 800481c:	2b00      	cmp	r3, #0
 800481e:	d008      	beq.n	8004832 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004820:	4b19      	ldr	r3, [pc, #100]	@ (8004888 <HAL_RCC_ClockConfig+0x1bc>)
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	4916      	ldr	r1, [pc, #88]	@ (8004888 <HAL_RCC_ClockConfig+0x1bc>)
 800482e:	4313      	orrs	r3, r2
 8004830:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0308 	and.w	r3, r3, #8
 800483a:	2b00      	cmp	r3, #0
 800483c:	d009      	beq.n	8004852 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800483e:	4b12      	ldr	r3, [pc, #72]	@ (8004888 <HAL_RCC_ClockConfig+0x1bc>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	490e      	ldr	r1, [pc, #56]	@ (8004888 <HAL_RCC_ClockConfig+0x1bc>)
 800484e:	4313      	orrs	r3, r2
 8004850:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004852:	f000 f821 	bl	8004898 <HAL_RCC_GetSysClockFreq>
 8004856:	4602      	mov	r2, r0
 8004858:	4b0b      	ldr	r3, [pc, #44]	@ (8004888 <HAL_RCC_ClockConfig+0x1bc>)
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	091b      	lsrs	r3, r3, #4
 800485e:	f003 030f 	and.w	r3, r3, #15
 8004862:	490a      	ldr	r1, [pc, #40]	@ (800488c <HAL_RCC_ClockConfig+0x1c0>)
 8004864:	5ccb      	ldrb	r3, [r1, r3]
 8004866:	fa22 f303 	lsr.w	r3, r2, r3
 800486a:	4a09      	ldr	r2, [pc, #36]	@ (8004890 <HAL_RCC_ClockConfig+0x1c4>)
 800486c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800486e:	4b09      	ldr	r3, [pc, #36]	@ (8004894 <HAL_RCC_ClockConfig+0x1c8>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4618      	mov	r0, r3
 8004874:	f7fd fcea 	bl	800224c <HAL_InitTick>

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	40023c00 	.word	0x40023c00
 8004888:	40023800 	.word	0x40023800
 800488c:	08007ad0 	.word	0x08007ad0
 8004890:	20000010 	.word	0x20000010
 8004894:	20000014 	.word	0x20000014

08004898 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800489c:	b094      	sub	sp, #80	@ 0x50
 800489e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80048a4:	2300      	movs	r3, #0
 80048a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048a8:	2300      	movs	r3, #0
 80048aa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048b0:	4b79      	ldr	r3, [pc, #484]	@ (8004a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f003 030c 	and.w	r3, r3, #12
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	d00d      	beq.n	80048d8 <HAL_RCC_GetSysClockFreq+0x40>
 80048bc:	2b08      	cmp	r3, #8
 80048be:	f200 80e1 	bhi.w	8004a84 <HAL_RCC_GetSysClockFreq+0x1ec>
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d002      	beq.n	80048cc <HAL_RCC_GetSysClockFreq+0x34>
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	d003      	beq.n	80048d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80048ca:	e0db      	b.n	8004a84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048cc:	4b73      	ldr	r3, [pc, #460]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0x204>)
 80048ce:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80048d0:	e0db      	b.n	8004a8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048d2:	4b73      	ldr	r3, [pc, #460]	@ (8004aa0 <HAL_RCC_GetSysClockFreq+0x208>)
 80048d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048d6:	e0d8      	b.n	8004a8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048d8:	4b6f      	ldr	r3, [pc, #444]	@ (8004a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048e0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048e2:	4b6d      	ldr	r3, [pc, #436]	@ (8004a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d063      	beq.n	80049b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048ee:	4b6a      	ldr	r3, [pc, #424]	@ (8004a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	099b      	lsrs	r3, r3, #6
 80048f4:	2200      	movs	r2, #0
 80048f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80048fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004900:	633b      	str	r3, [r7, #48]	@ 0x30
 8004902:	2300      	movs	r3, #0
 8004904:	637b      	str	r3, [r7, #52]	@ 0x34
 8004906:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800490a:	4622      	mov	r2, r4
 800490c:	462b      	mov	r3, r5
 800490e:	f04f 0000 	mov.w	r0, #0
 8004912:	f04f 0100 	mov.w	r1, #0
 8004916:	0159      	lsls	r1, r3, #5
 8004918:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800491c:	0150      	lsls	r0, r2, #5
 800491e:	4602      	mov	r2, r0
 8004920:	460b      	mov	r3, r1
 8004922:	4621      	mov	r1, r4
 8004924:	1a51      	subs	r1, r2, r1
 8004926:	6139      	str	r1, [r7, #16]
 8004928:	4629      	mov	r1, r5
 800492a:	eb63 0301 	sbc.w	r3, r3, r1
 800492e:	617b      	str	r3, [r7, #20]
 8004930:	f04f 0200 	mov.w	r2, #0
 8004934:	f04f 0300 	mov.w	r3, #0
 8004938:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800493c:	4659      	mov	r1, fp
 800493e:	018b      	lsls	r3, r1, #6
 8004940:	4651      	mov	r1, sl
 8004942:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004946:	4651      	mov	r1, sl
 8004948:	018a      	lsls	r2, r1, #6
 800494a:	4651      	mov	r1, sl
 800494c:	ebb2 0801 	subs.w	r8, r2, r1
 8004950:	4659      	mov	r1, fp
 8004952:	eb63 0901 	sbc.w	r9, r3, r1
 8004956:	f04f 0200 	mov.w	r2, #0
 800495a:	f04f 0300 	mov.w	r3, #0
 800495e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004962:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004966:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800496a:	4690      	mov	r8, r2
 800496c:	4699      	mov	r9, r3
 800496e:	4623      	mov	r3, r4
 8004970:	eb18 0303 	adds.w	r3, r8, r3
 8004974:	60bb      	str	r3, [r7, #8]
 8004976:	462b      	mov	r3, r5
 8004978:	eb49 0303 	adc.w	r3, r9, r3
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	f04f 0200 	mov.w	r2, #0
 8004982:	f04f 0300 	mov.w	r3, #0
 8004986:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800498a:	4629      	mov	r1, r5
 800498c:	024b      	lsls	r3, r1, #9
 800498e:	4621      	mov	r1, r4
 8004990:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004994:	4621      	mov	r1, r4
 8004996:	024a      	lsls	r2, r1, #9
 8004998:	4610      	mov	r0, r2
 800499a:	4619      	mov	r1, r3
 800499c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800499e:	2200      	movs	r2, #0
 80049a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80049a8:	f7fc f946 	bl	8000c38 <__aeabi_uldivmod>
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	4613      	mov	r3, r2
 80049b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049b4:	e058      	b.n	8004a68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049b6:	4b38      	ldr	r3, [pc, #224]	@ (8004a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	099b      	lsrs	r3, r3, #6
 80049bc:	2200      	movs	r2, #0
 80049be:	4618      	mov	r0, r3
 80049c0:	4611      	mov	r1, r2
 80049c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049c6:	623b      	str	r3, [r7, #32]
 80049c8:	2300      	movs	r3, #0
 80049ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80049cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049d0:	4642      	mov	r2, r8
 80049d2:	464b      	mov	r3, r9
 80049d4:	f04f 0000 	mov.w	r0, #0
 80049d8:	f04f 0100 	mov.w	r1, #0
 80049dc:	0159      	lsls	r1, r3, #5
 80049de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049e2:	0150      	lsls	r0, r2, #5
 80049e4:	4602      	mov	r2, r0
 80049e6:	460b      	mov	r3, r1
 80049e8:	4641      	mov	r1, r8
 80049ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80049ee:	4649      	mov	r1, r9
 80049f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80049f4:	f04f 0200 	mov.w	r2, #0
 80049f8:	f04f 0300 	mov.w	r3, #0
 80049fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a08:	ebb2 040a 	subs.w	r4, r2, sl
 8004a0c:	eb63 050b 	sbc.w	r5, r3, fp
 8004a10:	f04f 0200 	mov.w	r2, #0
 8004a14:	f04f 0300 	mov.w	r3, #0
 8004a18:	00eb      	lsls	r3, r5, #3
 8004a1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a1e:	00e2      	lsls	r2, r4, #3
 8004a20:	4614      	mov	r4, r2
 8004a22:	461d      	mov	r5, r3
 8004a24:	4643      	mov	r3, r8
 8004a26:	18e3      	adds	r3, r4, r3
 8004a28:	603b      	str	r3, [r7, #0]
 8004a2a:	464b      	mov	r3, r9
 8004a2c:	eb45 0303 	adc.w	r3, r5, r3
 8004a30:	607b      	str	r3, [r7, #4]
 8004a32:	f04f 0200 	mov.w	r2, #0
 8004a36:	f04f 0300 	mov.w	r3, #0
 8004a3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a3e:	4629      	mov	r1, r5
 8004a40:	028b      	lsls	r3, r1, #10
 8004a42:	4621      	mov	r1, r4
 8004a44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a48:	4621      	mov	r1, r4
 8004a4a:	028a      	lsls	r2, r1, #10
 8004a4c:	4610      	mov	r0, r2
 8004a4e:	4619      	mov	r1, r3
 8004a50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a52:	2200      	movs	r2, #0
 8004a54:	61bb      	str	r3, [r7, #24]
 8004a56:	61fa      	str	r2, [r7, #28]
 8004a58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a5c:	f7fc f8ec 	bl	8000c38 <__aeabi_uldivmod>
 8004a60:	4602      	mov	r2, r0
 8004a62:	460b      	mov	r3, r1
 8004a64:	4613      	mov	r3, r2
 8004a66:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a68:	4b0b      	ldr	r3, [pc, #44]	@ (8004a98 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	0c1b      	lsrs	r3, r3, #16
 8004a6e:	f003 0303 	and.w	r3, r3, #3
 8004a72:	3301      	adds	r3, #1
 8004a74:	005b      	lsls	r3, r3, #1
 8004a76:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004a78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a82:	e002      	b.n	8004a8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a84:	4b05      	ldr	r3, [pc, #20]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0x204>)
 8004a86:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3750      	adds	r7, #80	@ 0x50
 8004a90:	46bd      	mov	sp, r7
 8004a92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a96:	bf00      	nop
 8004a98:	40023800 	.word	0x40023800
 8004a9c:	00f42400 	.word	0x00f42400
 8004aa0:	007a1200 	.word	0x007a1200

08004aa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004aa8:	4b03      	ldr	r3, [pc, #12]	@ (8004ab8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	20000010 	.word	0x20000010

08004abc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ac0:	f7ff fff0 	bl	8004aa4 <HAL_RCC_GetHCLKFreq>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	4b05      	ldr	r3, [pc, #20]	@ (8004adc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	0a9b      	lsrs	r3, r3, #10
 8004acc:	f003 0307 	and.w	r3, r3, #7
 8004ad0:	4903      	ldr	r1, [pc, #12]	@ (8004ae0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ad2:	5ccb      	ldrb	r3, [r1, r3]
 8004ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	40023800 	.word	0x40023800
 8004ae0:	08007ae0 	.word	0x08007ae0

08004ae4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e041      	b.n	8004b7a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d106      	bne.n	8004b10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7fd f9d4 	bl	8001eb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2202      	movs	r2, #2
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	3304      	adds	r3, #4
 8004b20:	4619      	mov	r1, r3
 8004b22:	4610      	mov	r0, r2
 8004b24:	f000 f9b8 	bl	8004e98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3708      	adds	r7, #8
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
	...

08004b84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d109      	bne.n	8004ba8 <HAL_TIM_PWM_Start+0x24>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	bf14      	ite	ne
 8004ba0:	2301      	movne	r3, #1
 8004ba2:	2300      	moveq	r3, #0
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	e022      	b.n	8004bee <HAL_TIM_PWM_Start+0x6a>
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	d109      	bne.n	8004bc2 <HAL_TIM_PWM_Start+0x3e>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	bf14      	ite	ne
 8004bba:	2301      	movne	r3, #1
 8004bbc:	2300      	moveq	r3, #0
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	e015      	b.n	8004bee <HAL_TIM_PWM_Start+0x6a>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	d109      	bne.n	8004bdc <HAL_TIM_PWM_Start+0x58>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	bf14      	ite	ne
 8004bd4:	2301      	movne	r3, #1
 8004bd6:	2300      	moveq	r3, #0
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	e008      	b.n	8004bee <HAL_TIM_PWM_Start+0x6a>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	bf14      	ite	ne
 8004be8:	2301      	movne	r3, #1
 8004bea:	2300      	moveq	r3, #0
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e07c      	b.n	8004cf0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d104      	bne.n	8004c06 <HAL_TIM_PWM_Start+0x82>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c04:	e013      	b.n	8004c2e <HAL_TIM_PWM_Start+0xaa>
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	2b04      	cmp	r3, #4
 8004c0a:	d104      	bne.n	8004c16 <HAL_TIM_PWM_Start+0x92>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c14:	e00b      	b.n	8004c2e <HAL_TIM_PWM_Start+0xaa>
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	d104      	bne.n	8004c26 <HAL_TIM_PWM_Start+0xa2>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c24:	e003      	b.n	8004c2e <HAL_TIM_PWM_Start+0xaa>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2202      	movs	r2, #2
 8004c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2201      	movs	r2, #1
 8004c34:	6839      	ldr	r1, [r7, #0]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f000 fb8a 	bl	8005350 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a2d      	ldr	r2, [pc, #180]	@ (8004cf8 <HAL_TIM_PWM_Start+0x174>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d004      	beq.n	8004c50 <HAL_TIM_PWM_Start+0xcc>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a2c      	ldr	r2, [pc, #176]	@ (8004cfc <HAL_TIM_PWM_Start+0x178>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d101      	bne.n	8004c54 <HAL_TIM_PWM_Start+0xd0>
 8004c50:	2301      	movs	r3, #1
 8004c52:	e000      	b.n	8004c56 <HAL_TIM_PWM_Start+0xd2>
 8004c54:	2300      	movs	r3, #0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d007      	beq.n	8004c6a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c68:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a22      	ldr	r2, [pc, #136]	@ (8004cf8 <HAL_TIM_PWM_Start+0x174>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d022      	beq.n	8004cba <HAL_TIM_PWM_Start+0x136>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c7c:	d01d      	beq.n	8004cba <HAL_TIM_PWM_Start+0x136>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a1f      	ldr	r2, [pc, #124]	@ (8004d00 <HAL_TIM_PWM_Start+0x17c>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d018      	beq.n	8004cba <HAL_TIM_PWM_Start+0x136>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a1d      	ldr	r2, [pc, #116]	@ (8004d04 <HAL_TIM_PWM_Start+0x180>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d013      	beq.n	8004cba <HAL_TIM_PWM_Start+0x136>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a1c      	ldr	r2, [pc, #112]	@ (8004d08 <HAL_TIM_PWM_Start+0x184>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d00e      	beq.n	8004cba <HAL_TIM_PWM_Start+0x136>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a16      	ldr	r2, [pc, #88]	@ (8004cfc <HAL_TIM_PWM_Start+0x178>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d009      	beq.n	8004cba <HAL_TIM_PWM_Start+0x136>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a18      	ldr	r2, [pc, #96]	@ (8004d0c <HAL_TIM_PWM_Start+0x188>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d004      	beq.n	8004cba <HAL_TIM_PWM_Start+0x136>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a16      	ldr	r2, [pc, #88]	@ (8004d10 <HAL_TIM_PWM_Start+0x18c>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d111      	bne.n	8004cde <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f003 0307 	and.w	r3, r3, #7
 8004cc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2b06      	cmp	r3, #6
 8004cca:	d010      	beq.n	8004cee <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f042 0201 	orr.w	r2, r2, #1
 8004cda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cdc:	e007      	b.n	8004cee <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f042 0201 	orr.w	r2, r2, #1
 8004cec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	40010000 	.word	0x40010000
 8004cfc:	40010400 	.word	0x40010400
 8004d00:	40000400 	.word	0x40000400
 8004d04:	40000800 	.word	0x40000800
 8004d08:	40000c00 	.word	0x40000c00
 8004d0c:	40014000 	.word	0x40014000
 8004d10:	40001800 	.word	0x40001800

08004d14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d20:	2300      	movs	r3, #0
 8004d22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d101      	bne.n	8004d32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d2e:	2302      	movs	r3, #2
 8004d30:	e0ae      	b.n	8004e90 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2b0c      	cmp	r3, #12
 8004d3e:	f200 809f 	bhi.w	8004e80 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d42:	a201      	add	r2, pc, #4	@ (adr r2, 8004d48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d48:	08004d7d 	.word	0x08004d7d
 8004d4c:	08004e81 	.word	0x08004e81
 8004d50:	08004e81 	.word	0x08004e81
 8004d54:	08004e81 	.word	0x08004e81
 8004d58:	08004dbd 	.word	0x08004dbd
 8004d5c:	08004e81 	.word	0x08004e81
 8004d60:	08004e81 	.word	0x08004e81
 8004d64:	08004e81 	.word	0x08004e81
 8004d68:	08004dff 	.word	0x08004dff
 8004d6c:	08004e81 	.word	0x08004e81
 8004d70:	08004e81 	.word	0x08004e81
 8004d74:	08004e81 	.word	0x08004e81
 8004d78:	08004e3f 	.word	0x08004e3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68b9      	ldr	r1, [r7, #8]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 f934 	bl	8004ff0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	699a      	ldr	r2, [r3, #24]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0208 	orr.w	r2, r2, #8
 8004d96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	699a      	ldr	r2, [r3, #24]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 0204 	bic.w	r2, r2, #4
 8004da6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6999      	ldr	r1, [r3, #24]
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	691a      	ldr	r2, [r3, #16]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	430a      	orrs	r2, r1
 8004db8:	619a      	str	r2, [r3, #24]
      break;
 8004dba:	e064      	b.n	8004e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68b9      	ldr	r1, [r7, #8]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 f984 	bl	80050d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	699a      	ldr	r2, [r3, #24]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	699a      	ldr	r2, [r3, #24]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004de6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6999      	ldr	r1, [r3, #24]
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	021a      	lsls	r2, r3, #8
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	619a      	str	r2, [r3, #24]
      break;
 8004dfc:	e043      	b.n	8004e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68b9      	ldr	r1, [r7, #8]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 f9d9 	bl	80051bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	69da      	ldr	r2, [r3, #28]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f042 0208 	orr.w	r2, r2, #8
 8004e18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69da      	ldr	r2, [r3, #28]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 0204 	bic.w	r2, r2, #4
 8004e28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	69d9      	ldr	r1, [r3, #28]
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	691a      	ldr	r2, [r3, #16]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	61da      	str	r2, [r3, #28]
      break;
 8004e3c:	e023      	b.n	8004e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68b9      	ldr	r1, [r7, #8]
 8004e44:	4618      	mov	r0, r3
 8004e46:	f000 fa2d 	bl	80052a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	69da      	ldr	r2, [r3, #28]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	69da      	ldr	r2, [r3, #28]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	69d9      	ldr	r1, [r3, #28]
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	021a      	lsls	r2, r3, #8
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	61da      	str	r2, [r3, #28]
      break;
 8004e7e:	e002      	b.n	8004e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	75fb      	strb	r3, [r7, #23]
      break;
 8004e84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3718      	adds	r7, #24
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a46      	ldr	r2, [pc, #280]	@ (8004fc4 <TIM_Base_SetConfig+0x12c>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d013      	beq.n	8004ed8 <TIM_Base_SetConfig+0x40>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eb6:	d00f      	beq.n	8004ed8 <TIM_Base_SetConfig+0x40>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a43      	ldr	r2, [pc, #268]	@ (8004fc8 <TIM_Base_SetConfig+0x130>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d00b      	beq.n	8004ed8 <TIM_Base_SetConfig+0x40>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a42      	ldr	r2, [pc, #264]	@ (8004fcc <TIM_Base_SetConfig+0x134>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d007      	beq.n	8004ed8 <TIM_Base_SetConfig+0x40>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a41      	ldr	r2, [pc, #260]	@ (8004fd0 <TIM_Base_SetConfig+0x138>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d003      	beq.n	8004ed8 <TIM_Base_SetConfig+0x40>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a40      	ldr	r2, [pc, #256]	@ (8004fd4 <TIM_Base_SetConfig+0x13c>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d108      	bne.n	8004eea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ede:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a35      	ldr	r2, [pc, #212]	@ (8004fc4 <TIM_Base_SetConfig+0x12c>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d02b      	beq.n	8004f4a <TIM_Base_SetConfig+0xb2>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ef8:	d027      	beq.n	8004f4a <TIM_Base_SetConfig+0xb2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a32      	ldr	r2, [pc, #200]	@ (8004fc8 <TIM_Base_SetConfig+0x130>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d023      	beq.n	8004f4a <TIM_Base_SetConfig+0xb2>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a31      	ldr	r2, [pc, #196]	@ (8004fcc <TIM_Base_SetConfig+0x134>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d01f      	beq.n	8004f4a <TIM_Base_SetConfig+0xb2>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a30      	ldr	r2, [pc, #192]	@ (8004fd0 <TIM_Base_SetConfig+0x138>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d01b      	beq.n	8004f4a <TIM_Base_SetConfig+0xb2>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a2f      	ldr	r2, [pc, #188]	@ (8004fd4 <TIM_Base_SetConfig+0x13c>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d017      	beq.n	8004f4a <TIM_Base_SetConfig+0xb2>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a2e      	ldr	r2, [pc, #184]	@ (8004fd8 <TIM_Base_SetConfig+0x140>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d013      	beq.n	8004f4a <TIM_Base_SetConfig+0xb2>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a2d      	ldr	r2, [pc, #180]	@ (8004fdc <TIM_Base_SetConfig+0x144>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d00f      	beq.n	8004f4a <TIM_Base_SetConfig+0xb2>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a2c      	ldr	r2, [pc, #176]	@ (8004fe0 <TIM_Base_SetConfig+0x148>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d00b      	beq.n	8004f4a <TIM_Base_SetConfig+0xb2>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a2b      	ldr	r2, [pc, #172]	@ (8004fe4 <TIM_Base_SetConfig+0x14c>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d007      	beq.n	8004f4a <TIM_Base_SetConfig+0xb2>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a2a      	ldr	r2, [pc, #168]	@ (8004fe8 <TIM_Base_SetConfig+0x150>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d003      	beq.n	8004f4a <TIM_Base_SetConfig+0xb2>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a29      	ldr	r2, [pc, #164]	@ (8004fec <TIM_Base_SetConfig+0x154>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d108      	bne.n	8004f5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	689a      	ldr	r2, [r3, #8]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a10      	ldr	r2, [pc, #64]	@ (8004fc4 <TIM_Base_SetConfig+0x12c>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d003      	beq.n	8004f90 <TIM_Base_SetConfig+0xf8>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a12      	ldr	r2, [pc, #72]	@ (8004fd4 <TIM_Base_SetConfig+0x13c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d103      	bne.n	8004f98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	691a      	ldr	r2, [r3, #16]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d105      	bne.n	8004fb6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	f023 0201 	bic.w	r2, r3, #1
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	611a      	str	r2, [r3, #16]
  }
}
 8004fb6:	bf00      	nop
 8004fb8:	3714      	adds	r7, #20
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	40010000 	.word	0x40010000
 8004fc8:	40000400 	.word	0x40000400
 8004fcc:	40000800 	.word	0x40000800
 8004fd0:	40000c00 	.word	0x40000c00
 8004fd4:	40010400 	.word	0x40010400
 8004fd8:	40014000 	.word	0x40014000
 8004fdc:	40014400 	.word	0x40014400
 8004fe0:	40014800 	.word	0x40014800
 8004fe4:	40001800 	.word	0x40001800
 8004fe8:	40001c00 	.word	0x40001c00
 8004fec:	40002000 	.word	0x40002000

08004ff0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	f023 0201 	bic.w	r2, r3, #1
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800501e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f023 0303 	bic.w	r3, r3, #3
 8005026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	4313      	orrs	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	f023 0302 	bic.w	r3, r3, #2
 8005038:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	4313      	orrs	r3, r2
 8005042:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a20      	ldr	r2, [pc, #128]	@ (80050c8 <TIM_OC1_SetConfig+0xd8>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d003      	beq.n	8005054 <TIM_OC1_SetConfig+0x64>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a1f      	ldr	r2, [pc, #124]	@ (80050cc <TIM_OC1_SetConfig+0xdc>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d10c      	bne.n	800506e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f023 0308 	bic.w	r3, r3, #8
 800505a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	4313      	orrs	r3, r2
 8005064:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f023 0304 	bic.w	r3, r3, #4
 800506c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a15      	ldr	r2, [pc, #84]	@ (80050c8 <TIM_OC1_SetConfig+0xd8>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d003      	beq.n	800507e <TIM_OC1_SetConfig+0x8e>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a14      	ldr	r2, [pc, #80]	@ (80050cc <TIM_OC1_SetConfig+0xdc>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d111      	bne.n	80050a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005084:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800508c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	4313      	orrs	r3, r2
 8005096:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	4313      	orrs	r3, r2
 80050a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	621a      	str	r2, [r3, #32]
}
 80050bc:	bf00      	nop
 80050be:	371c      	adds	r7, #28
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	40010000 	.word	0x40010000
 80050cc:	40010400 	.word	0x40010400

080050d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	f023 0210 	bic.w	r2, r3, #16
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005106:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	021b      	lsls	r3, r3, #8
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	4313      	orrs	r3, r2
 8005112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	f023 0320 	bic.w	r3, r3, #32
 800511a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	011b      	lsls	r3, r3, #4
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	4313      	orrs	r3, r2
 8005126:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a22      	ldr	r2, [pc, #136]	@ (80051b4 <TIM_OC2_SetConfig+0xe4>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d003      	beq.n	8005138 <TIM_OC2_SetConfig+0x68>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a21      	ldr	r2, [pc, #132]	@ (80051b8 <TIM_OC2_SetConfig+0xe8>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d10d      	bne.n	8005154 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800513e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	011b      	lsls	r3, r3, #4
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	4313      	orrs	r3, r2
 800514a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005152:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a17      	ldr	r2, [pc, #92]	@ (80051b4 <TIM_OC2_SetConfig+0xe4>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d003      	beq.n	8005164 <TIM_OC2_SetConfig+0x94>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a16      	ldr	r2, [pc, #88]	@ (80051b8 <TIM_OC2_SetConfig+0xe8>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d113      	bne.n	800518c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800516a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005172:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	4313      	orrs	r3, r2
 800517e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	4313      	orrs	r3, r2
 800518a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	621a      	str	r2, [r3, #32]
}
 80051a6:	bf00      	nop
 80051a8:	371c      	adds	r7, #28
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	40010000 	.word	0x40010000
 80051b8:	40010400 	.word	0x40010400

080051bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051bc:	b480      	push	{r7}
 80051be:	b087      	sub	sp, #28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a1b      	ldr	r3, [r3, #32]
 80051d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 0303 	bic.w	r3, r3, #3
 80051f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005204:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	021b      	lsls	r3, r3, #8
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	4313      	orrs	r3, r2
 8005210:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a21      	ldr	r2, [pc, #132]	@ (800529c <TIM_OC3_SetConfig+0xe0>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d003      	beq.n	8005222 <TIM_OC3_SetConfig+0x66>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a20      	ldr	r2, [pc, #128]	@ (80052a0 <TIM_OC3_SetConfig+0xe4>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d10d      	bne.n	800523e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005228:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	021b      	lsls	r3, r3, #8
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	4313      	orrs	r3, r2
 8005234:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800523c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a16      	ldr	r2, [pc, #88]	@ (800529c <TIM_OC3_SetConfig+0xe0>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d003      	beq.n	800524e <TIM_OC3_SetConfig+0x92>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a15      	ldr	r2, [pc, #84]	@ (80052a0 <TIM_OC3_SetConfig+0xe4>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d113      	bne.n	8005276 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005254:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800525c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	011b      	lsls	r3, r3, #4
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	4313      	orrs	r3, r2
 8005268:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	011b      	lsls	r3, r3, #4
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	4313      	orrs	r3, r2
 8005274:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	685a      	ldr	r2, [r3, #4]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	621a      	str	r2, [r3, #32]
}
 8005290:	bf00      	nop
 8005292:	371c      	adds	r7, #28
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr
 800529c:	40010000 	.word	0x40010000
 80052a0:	40010400 	.word	0x40010400

080052a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b087      	sub	sp, #28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	021b      	lsls	r3, r3, #8
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	031b      	lsls	r3, r3, #12
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a12      	ldr	r2, [pc, #72]	@ (8005348 <TIM_OC4_SetConfig+0xa4>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d003      	beq.n	800530c <TIM_OC4_SetConfig+0x68>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a11      	ldr	r2, [pc, #68]	@ (800534c <TIM_OC4_SetConfig+0xa8>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d109      	bne.n	8005320 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005312:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	019b      	lsls	r3, r3, #6
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	4313      	orrs	r3, r2
 800531e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	621a      	str	r2, [r3, #32]
}
 800533a:	bf00      	nop
 800533c:	371c      	adds	r7, #28
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	40010000 	.word	0x40010000
 800534c:	40010400 	.word	0x40010400

08005350 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005350:	b480      	push	{r7}
 8005352:	b087      	sub	sp, #28
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	f003 031f 	and.w	r3, r3, #31
 8005362:	2201      	movs	r2, #1
 8005364:	fa02 f303 	lsl.w	r3, r2, r3
 8005368:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6a1a      	ldr	r2, [r3, #32]
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	43db      	mvns	r3, r3
 8005372:	401a      	ands	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6a1a      	ldr	r2, [r3, #32]
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	f003 031f 	and.w	r3, r3, #31
 8005382:	6879      	ldr	r1, [r7, #4]
 8005384:	fa01 f303 	lsl.w	r3, r1, r3
 8005388:	431a      	orrs	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	621a      	str	r2, [r3, #32]
}
 800538e:	bf00      	nop
 8005390:	371c      	adds	r7, #28
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
	...

0800539c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d101      	bne.n	80053b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053b0:	2302      	movs	r3, #2
 80053b2:	e05a      	b.n	800546a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2202      	movs	r2, #2
 80053c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a21      	ldr	r2, [pc, #132]	@ (8005478 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d022      	beq.n	800543e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005400:	d01d      	beq.n	800543e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a1d      	ldr	r2, [pc, #116]	@ (800547c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d018      	beq.n	800543e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a1b      	ldr	r2, [pc, #108]	@ (8005480 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d013      	beq.n	800543e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a1a      	ldr	r2, [pc, #104]	@ (8005484 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d00e      	beq.n	800543e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a18      	ldr	r2, [pc, #96]	@ (8005488 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d009      	beq.n	800543e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a17      	ldr	r2, [pc, #92]	@ (800548c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d004      	beq.n	800543e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a15      	ldr	r2, [pc, #84]	@ (8005490 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d10c      	bne.n	8005458 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005444:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	4313      	orrs	r3, r2
 800544e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3714      	adds	r7, #20
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	40010000 	.word	0x40010000
 800547c:	40000400 	.word	0x40000400
 8005480:	40000800 	.word	0x40000800
 8005484:	40000c00 	.word	0x40000c00
 8005488:	40010400 	.word	0x40010400
 800548c:	40014000 	.word	0x40014000
 8005490:	40001800 	.word	0x40001800

08005494 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800549e:	2300      	movs	r3, #0
 80054a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d101      	bne.n	80054b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80054ac:	2302      	movs	r3, #2
 80054ae:	e03d      	b.n	800552c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	4313      	orrs	r3, r2
 80054e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	4313      	orrs	r3, r2
 800550a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	4313      	orrs	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3714      	adds	r7, #20
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <std>:
 8005538:	2300      	movs	r3, #0
 800553a:	b510      	push	{r4, lr}
 800553c:	4604      	mov	r4, r0
 800553e:	e9c0 3300 	strd	r3, r3, [r0]
 8005542:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005546:	6083      	str	r3, [r0, #8]
 8005548:	8181      	strh	r1, [r0, #12]
 800554a:	6643      	str	r3, [r0, #100]	@ 0x64
 800554c:	81c2      	strh	r2, [r0, #14]
 800554e:	6183      	str	r3, [r0, #24]
 8005550:	4619      	mov	r1, r3
 8005552:	2208      	movs	r2, #8
 8005554:	305c      	adds	r0, #92	@ 0x5c
 8005556:	f000 f906 	bl	8005766 <memset>
 800555a:	4b0d      	ldr	r3, [pc, #52]	@ (8005590 <std+0x58>)
 800555c:	6263      	str	r3, [r4, #36]	@ 0x24
 800555e:	4b0d      	ldr	r3, [pc, #52]	@ (8005594 <std+0x5c>)
 8005560:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005562:	4b0d      	ldr	r3, [pc, #52]	@ (8005598 <std+0x60>)
 8005564:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005566:	4b0d      	ldr	r3, [pc, #52]	@ (800559c <std+0x64>)
 8005568:	6323      	str	r3, [r4, #48]	@ 0x30
 800556a:	4b0d      	ldr	r3, [pc, #52]	@ (80055a0 <std+0x68>)
 800556c:	6224      	str	r4, [r4, #32]
 800556e:	429c      	cmp	r4, r3
 8005570:	d006      	beq.n	8005580 <std+0x48>
 8005572:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005576:	4294      	cmp	r4, r2
 8005578:	d002      	beq.n	8005580 <std+0x48>
 800557a:	33d0      	adds	r3, #208	@ 0xd0
 800557c:	429c      	cmp	r4, r3
 800557e:	d105      	bne.n	800558c <std+0x54>
 8005580:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005588:	f000 b966 	b.w	8005858 <__retarget_lock_init_recursive>
 800558c:	bd10      	pop	{r4, pc}
 800558e:	bf00      	nop
 8005590:	080056e1 	.word	0x080056e1
 8005594:	08005703 	.word	0x08005703
 8005598:	0800573b 	.word	0x0800573b
 800559c:	0800575f 	.word	0x0800575f
 80055a0:	20000248 	.word	0x20000248

080055a4 <stdio_exit_handler>:
 80055a4:	4a02      	ldr	r2, [pc, #8]	@ (80055b0 <stdio_exit_handler+0xc>)
 80055a6:	4903      	ldr	r1, [pc, #12]	@ (80055b4 <stdio_exit_handler+0x10>)
 80055a8:	4803      	ldr	r0, [pc, #12]	@ (80055b8 <stdio_exit_handler+0x14>)
 80055aa:	f000 b869 	b.w	8005680 <_fwalk_sglue>
 80055ae:	bf00      	nop
 80055b0:	2000001c 	.word	0x2000001c
 80055b4:	080060f9 	.word	0x080060f9
 80055b8:	2000002c 	.word	0x2000002c

080055bc <cleanup_stdio>:
 80055bc:	6841      	ldr	r1, [r0, #4]
 80055be:	4b0c      	ldr	r3, [pc, #48]	@ (80055f0 <cleanup_stdio+0x34>)
 80055c0:	4299      	cmp	r1, r3
 80055c2:	b510      	push	{r4, lr}
 80055c4:	4604      	mov	r4, r0
 80055c6:	d001      	beq.n	80055cc <cleanup_stdio+0x10>
 80055c8:	f000 fd96 	bl	80060f8 <_fflush_r>
 80055cc:	68a1      	ldr	r1, [r4, #8]
 80055ce:	4b09      	ldr	r3, [pc, #36]	@ (80055f4 <cleanup_stdio+0x38>)
 80055d0:	4299      	cmp	r1, r3
 80055d2:	d002      	beq.n	80055da <cleanup_stdio+0x1e>
 80055d4:	4620      	mov	r0, r4
 80055d6:	f000 fd8f 	bl	80060f8 <_fflush_r>
 80055da:	68e1      	ldr	r1, [r4, #12]
 80055dc:	4b06      	ldr	r3, [pc, #24]	@ (80055f8 <cleanup_stdio+0x3c>)
 80055de:	4299      	cmp	r1, r3
 80055e0:	d004      	beq.n	80055ec <cleanup_stdio+0x30>
 80055e2:	4620      	mov	r0, r4
 80055e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055e8:	f000 bd86 	b.w	80060f8 <_fflush_r>
 80055ec:	bd10      	pop	{r4, pc}
 80055ee:	bf00      	nop
 80055f0:	20000248 	.word	0x20000248
 80055f4:	200002b0 	.word	0x200002b0
 80055f8:	20000318 	.word	0x20000318

080055fc <global_stdio_init.part.0>:
 80055fc:	b510      	push	{r4, lr}
 80055fe:	4b0b      	ldr	r3, [pc, #44]	@ (800562c <global_stdio_init.part.0+0x30>)
 8005600:	4c0b      	ldr	r4, [pc, #44]	@ (8005630 <global_stdio_init.part.0+0x34>)
 8005602:	4a0c      	ldr	r2, [pc, #48]	@ (8005634 <global_stdio_init.part.0+0x38>)
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	4620      	mov	r0, r4
 8005608:	2200      	movs	r2, #0
 800560a:	2104      	movs	r1, #4
 800560c:	f7ff ff94 	bl	8005538 <std>
 8005610:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005614:	2201      	movs	r2, #1
 8005616:	2109      	movs	r1, #9
 8005618:	f7ff ff8e 	bl	8005538 <std>
 800561c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005620:	2202      	movs	r2, #2
 8005622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005626:	2112      	movs	r1, #18
 8005628:	f7ff bf86 	b.w	8005538 <std>
 800562c:	20000380 	.word	0x20000380
 8005630:	20000248 	.word	0x20000248
 8005634:	080055a5 	.word	0x080055a5

08005638 <__sfp_lock_acquire>:
 8005638:	4801      	ldr	r0, [pc, #4]	@ (8005640 <__sfp_lock_acquire+0x8>)
 800563a:	f000 b90e 	b.w	800585a <__retarget_lock_acquire_recursive>
 800563e:	bf00      	nop
 8005640:	20000389 	.word	0x20000389

08005644 <__sfp_lock_release>:
 8005644:	4801      	ldr	r0, [pc, #4]	@ (800564c <__sfp_lock_release+0x8>)
 8005646:	f000 b909 	b.w	800585c <__retarget_lock_release_recursive>
 800564a:	bf00      	nop
 800564c:	20000389 	.word	0x20000389

08005650 <__sinit>:
 8005650:	b510      	push	{r4, lr}
 8005652:	4604      	mov	r4, r0
 8005654:	f7ff fff0 	bl	8005638 <__sfp_lock_acquire>
 8005658:	6a23      	ldr	r3, [r4, #32]
 800565a:	b11b      	cbz	r3, 8005664 <__sinit+0x14>
 800565c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005660:	f7ff bff0 	b.w	8005644 <__sfp_lock_release>
 8005664:	4b04      	ldr	r3, [pc, #16]	@ (8005678 <__sinit+0x28>)
 8005666:	6223      	str	r3, [r4, #32]
 8005668:	4b04      	ldr	r3, [pc, #16]	@ (800567c <__sinit+0x2c>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1f5      	bne.n	800565c <__sinit+0xc>
 8005670:	f7ff ffc4 	bl	80055fc <global_stdio_init.part.0>
 8005674:	e7f2      	b.n	800565c <__sinit+0xc>
 8005676:	bf00      	nop
 8005678:	080055bd 	.word	0x080055bd
 800567c:	20000380 	.word	0x20000380

08005680 <_fwalk_sglue>:
 8005680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005684:	4607      	mov	r7, r0
 8005686:	4688      	mov	r8, r1
 8005688:	4614      	mov	r4, r2
 800568a:	2600      	movs	r6, #0
 800568c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005690:	f1b9 0901 	subs.w	r9, r9, #1
 8005694:	d505      	bpl.n	80056a2 <_fwalk_sglue+0x22>
 8005696:	6824      	ldr	r4, [r4, #0]
 8005698:	2c00      	cmp	r4, #0
 800569a:	d1f7      	bne.n	800568c <_fwalk_sglue+0xc>
 800569c:	4630      	mov	r0, r6
 800569e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056a2:	89ab      	ldrh	r3, [r5, #12]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d907      	bls.n	80056b8 <_fwalk_sglue+0x38>
 80056a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80056ac:	3301      	adds	r3, #1
 80056ae:	d003      	beq.n	80056b8 <_fwalk_sglue+0x38>
 80056b0:	4629      	mov	r1, r5
 80056b2:	4638      	mov	r0, r7
 80056b4:	47c0      	blx	r8
 80056b6:	4306      	orrs	r6, r0
 80056b8:	3568      	adds	r5, #104	@ 0x68
 80056ba:	e7e9      	b.n	8005690 <_fwalk_sglue+0x10>

080056bc <iprintf>:
 80056bc:	b40f      	push	{r0, r1, r2, r3}
 80056be:	b507      	push	{r0, r1, r2, lr}
 80056c0:	4906      	ldr	r1, [pc, #24]	@ (80056dc <iprintf+0x20>)
 80056c2:	ab04      	add	r3, sp, #16
 80056c4:	6808      	ldr	r0, [r1, #0]
 80056c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80056ca:	6881      	ldr	r1, [r0, #8]
 80056cc:	9301      	str	r3, [sp, #4]
 80056ce:	f000 f9e9 	bl	8005aa4 <_vfiprintf_r>
 80056d2:	b003      	add	sp, #12
 80056d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80056d8:	b004      	add	sp, #16
 80056da:	4770      	bx	lr
 80056dc:	20000028 	.word	0x20000028

080056e0 <__sread>:
 80056e0:	b510      	push	{r4, lr}
 80056e2:	460c      	mov	r4, r1
 80056e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056e8:	f000 f868 	bl	80057bc <_read_r>
 80056ec:	2800      	cmp	r0, #0
 80056ee:	bfab      	itete	ge
 80056f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80056f2:	89a3      	ldrhlt	r3, [r4, #12]
 80056f4:	181b      	addge	r3, r3, r0
 80056f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80056fa:	bfac      	ite	ge
 80056fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80056fe:	81a3      	strhlt	r3, [r4, #12]
 8005700:	bd10      	pop	{r4, pc}

08005702 <__swrite>:
 8005702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005706:	461f      	mov	r7, r3
 8005708:	898b      	ldrh	r3, [r1, #12]
 800570a:	05db      	lsls	r3, r3, #23
 800570c:	4605      	mov	r5, r0
 800570e:	460c      	mov	r4, r1
 8005710:	4616      	mov	r6, r2
 8005712:	d505      	bpl.n	8005720 <__swrite+0x1e>
 8005714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005718:	2302      	movs	r3, #2
 800571a:	2200      	movs	r2, #0
 800571c:	f000 f83c 	bl	8005798 <_lseek_r>
 8005720:	89a3      	ldrh	r3, [r4, #12]
 8005722:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005726:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800572a:	81a3      	strh	r3, [r4, #12]
 800572c:	4632      	mov	r2, r6
 800572e:	463b      	mov	r3, r7
 8005730:	4628      	mov	r0, r5
 8005732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005736:	f000 b853 	b.w	80057e0 <_write_r>

0800573a <__sseek>:
 800573a:	b510      	push	{r4, lr}
 800573c:	460c      	mov	r4, r1
 800573e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005742:	f000 f829 	bl	8005798 <_lseek_r>
 8005746:	1c43      	adds	r3, r0, #1
 8005748:	89a3      	ldrh	r3, [r4, #12]
 800574a:	bf15      	itete	ne
 800574c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800574e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005752:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005756:	81a3      	strheq	r3, [r4, #12]
 8005758:	bf18      	it	ne
 800575a:	81a3      	strhne	r3, [r4, #12]
 800575c:	bd10      	pop	{r4, pc}

0800575e <__sclose>:
 800575e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005762:	f000 b809 	b.w	8005778 <_close_r>

08005766 <memset>:
 8005766:	4402      	add	r2, r0
 8005768:	4603      	mov	r3, r0
 800576a:	4293      	cmp	r3, r2
 800576c:	d100      	bne.n	8005770 <memset+0xa>
 800576e:	4770      	bx	lr
 8005770:	f803 1b01 	strb.w	r1, [r3], #1
 8005774:	e7f9      	b.n	800576a <memset+0x4>
	...

08005778 <_close_r>:
 8005778:	b538      	push	{r3, r4, r5, lr}
 800577a:	4d06      	ldr	r5, [pc, #24]	@ (8005794 <_close_r+0x1c>)
 800577c:	2300      	movs	r3, #0
 800577e:	4604      	mov	r4, r0
 8005780:	4608      	mov	r0, r1
 8005782:	602b      	str	r3, [r5, #0]
 8005784:	f7fc fc99 	bl	80020ba <_close>
 8005788:	1c43      	adds	r3, r0, #1
 800578a:	d102      	bne.n	8005792 <_close_r+0x1a>
 800578c:	682b      	ldr	r3, [r5, #0]
 800578e:	b103      	cbz	r3, 8005792 <_close_r+0x1a>
 8005790:	6023      	str	r3, [r4, #0]
 8005792:	bd38      	pop	{r3, r4, r5, pc}
 8005794:	20000384 	.word	0x20000384

08005798 <_lseek_r>:
 8005798:	b538      	push	{r3, r4, r5, lr}
 800579a:	4d07      	ldr	r5, [pc, #28]	@ (80057b8 <_lseek_r+0x20>)
 800579c:	4604      	mov	r4, r0
 800579e:	4608      	mov	r0, r1
 80057a0:	4611      	mov	r1, r2
 80057a2:	2200      	movs	r2, #0
 80057a4:	602a      	str	r2, [r5, #0]
 80057a6:	461a      	mov	r2, r3
 80057a8:	f7fc fcae 	bl	8002108 <_lseek>
 80057ac:	1c43      	adds	r3, r0, #1
 80057ae:	d102      	bne.n	80057b6 <_lseek_r+0x1e>
 80057b0:	682b      	ldr	r3, [r5, #0]
 80057b2:	b103      	cbz	r3, 80057b6 <_lseek_r+0x1e>
 80057b4:	6023      	str	r3, [r4, #0]
 80057b6:	bd38      	pop	{r3, r4, r5, pc}
 80057b8:	20000384 	.word	0x20000384

080057bc <_read_r>:
 80057bc:	b538      	push	{r3, r4, r5, lr}
 80057be:	4d07      	ldr	r5, [pc, #28]	@ (80057dc <_read_r+0x20>)
 80057c0:	4604      	mov	r4, r0
 80057c2:	4608      	mov	r0, r1
 80057c4:	4611      	mov	r1, r2
 80057c6:	2200      	movs	r2, #0
 80057c8:	602a      	str	r2, [r5, #0]
 80057ca:	461a      	mov	r2, r3
 80057cc:	f7fc fc3c 	bl	8002048 <_read>
 80057d0:	1c43      	adds	r3, r0, #1
 80057d2:	d102      	bne.n	80057da <_read_r+0x1e>
 80057d4:	682b      	ldr	r3, [r5, #0]
 80057d6:	b103      	cbz	r3, 80057da <_read_r+0x1e>
 80057d8:	6023      	str	r3, [r4, #0]
 80057da:	bd38      	pop	{r3, r4, r5, pc}
 80057dc:	20000384 	.word	0x20000384

080057e0 <_write_r>:
 80057e0:	b538      	push	{r3, r4, r5, lr}
 80057e2:	4d07      	ldr	r5, [pc, #28]	@ (8005800 <_write_r+0x20>)
 80057e4:	4604      	mov	r4, r0
 80057e6:	4608      	mov	r0, r1
 80057e8:	4611      	mov	r1, r2
 80057ea:	2200      	movs	r2, #0
 80057ec:	602a      	str	r2, [r5, #0]
 80057ee:	461a      	mov	r2, r3
 80057f0:	f7fc fc47 	bl	8002082 <_write>
 80057f4:	1c43      	adds	r3, r0, #1
 80057f6:	d102      	bne.n	80057fe <_write_r+0x1e>
 80057f8:	682b      	ldr	r3, [r5, #0]
 80057fa:	b103      	cbz	r3, 80057fe <_write_r+0x1e>
 80057fc:	6023      	str	r3, [r4, #0]
 80057fe:	bd38      	pop	{r3, r4, r5, pc}
 8005800:	20000384 	.word	0x20000384

08005804 <__errno>:
 8005804:	4b01      	ldr	r3, [pc, #4]	@ (800580c <__errno+0x8>)
 8005806:	6818      	ldr	r0, [r3, #0]
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	20000028 	.word	0x20000028

08005810 <__libc_init_array>:
 8005810:	b570      	push	{r4, r5, r6, lr}
 8005812:	4d0d      	ldr	r5, [pc, #52]	@ (8005848 <__libc_init_array+0x38>)
 8005814:	4c0d      	ldr	r4, [pc, #52]	@ (800584c <__libc_init_array+0x3c>)
 8005816:	1b64      	subs	r4, r4, r5
 8005818:	10a4      	asrs	r4, r4, #2
 800581a:	2600      	movs	r6, #0
 800581c:	42a6      	cmp	r6, r4
 800581e:	d109      	bne.n	8005834 <__libc_init_array+0x24>
 8005820:	4d0b      	ldr	r5, [pc, #44]	@ (8005850 <__libc_init_array+0x40>)
 8005822:	4c0c      	ldr	r4, [pc, #48]	@ (8005854 <__libc_init_array+0x44>)
 8005824:	f002 f930 	bl	8007a88 <_init>
 8005828:	1b64      	subs	r4, r4, r5
 800582a:	10a4      	asrs	r4, r4, #2
 800582c:	2600      	movs	r6, #0
 800582e:	42a6      	cmp	r6, r4
 8005830:	d105      	bne.n	800583e <__libc_init_array+0x2e>
 8005832:	bd70      	pop	{r4, r5, r6, pc}
 8005834:	f855 3b04 	ldr.w	r3, [r5], #4
 8005838:	4798      	blx	r3
 800583a:	3601      	adds	r6, #1
 800583c:	e7ee      	b.n	800581c <__libc_init_array+0xc>
 800583e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005842:	4798      	blx	r3
 8005844:	3601      	adds	r6, #1
 8005846:	e7f2      	b.n	800582e <__libc_init_array+0x1e>
 8005848:	08007d08 	.word	0x08007d08
 800584c:	08007d08 	.word	0x08007d08
 8005850:	08007d08 	.word	0x08007d08
 8005854:	08007d0c 	.word	0x08007d0c

08005858 <__retarget_lock_init_recursive>:
 8005858:	4770      	bx	lr

0800585a <__retarget_lock_acquire_recursive>:
 800585a:	4770      	bx	lr

0800585c <__retarget_lock_release_recursive>:
 800585c:	4770      	bx	lr
	...

08005860 <_free_r>:
 8005860:	b538      	push	{r3, r4, r5, lr}
 8005862:	4605      	mov	r5, r0
 8005864:	2900      	cmp	r1, #0
 8005866:	d041      	beq.n	80058ec <_free_r+0x8c>
 8005868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800586c:	1f0c      	subs	r4, r1, #4
 800586e:	2b00      	cmp	r3, #0
 8005870:	bfb8      	it	lt
 8005872:	18e4      	addlt	r4, r4, r3
 8005874:	f000 f8e0 	bl	8005a38 <__malloc_lock>
 8005878:	4a1d      	ldr	r2, [pc, #116]	@ (80058f0 <_free_r+0x90>)
 800587a:	6813      	ldr	r3, [r2, #0]
 800587c:	b933      	cbnz	r3, 800588c <_free_r+0x2c>
 800587e:	6063      	str	r3, [r4, #4]
 8005880:	6014      	str	r4, [r2, #0]
 8005882:	4628      	mov	r0, r5
 8005884:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005888:	f000 b8dc 	b.w	8005a44 <__malloc_unlock>
 800588c:	42a3      	cmp	r3, r4
 800588e:	d908      	bls.n	80058a2 <_free_r+0x42>
 8005890:	6820      	ldr	r0, [r4, #0]
 8005892:	1821      	adds	r1, r4, r0
 8005894:	428b      	cmp	r3, r1
 8005896:	bf01      	itttt	eq
 8005898:	6819      	ldreq	r1, [r3, #0]
 800589a:	685b      	ldreq	r3, [r3, #4]
 800589c:	1809      	addeq	r1, r1, r0
 800589e:	6021      	streq	r1, [r4, #0]
 80058a0:	e7ed      	b.n	800587e <_free_r+0x1e>
 80058a2:	461a      	mov	r2, r3
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	b10b      	cbz	r3, 80058ac <_free_r+0x4c>
 80058a8:	42a3      	cmp	r3, r4
 80058aa:	d9fa      	bls.n	80058a2 <_free_r+0x42>
 80058ac:	6811      	ldr	r1, [r2, #0]
 80058ae:	1850      	adds	r0, r2, r1
 80058b0:	42a0      	cmp	r0, r4
 80058b2:	d10b      	bne.n	80058cc <_free_r+0x6c>
 80058b4:	6820      	ldr	r0, [r4, #0]
 80058b6:	4401      	add	r1, r0
 80058b8:	1850      	adds	r0, r2, r1
 80058ba:	4283      	cmp	r3, r0
 80058bc:	6011      	str	r1, [r2, #0]
 80058be:	d1e0      	bne.n	8005882 <_free_r+0x22>
 80058c0:	6818      	ldr	r0, [r3, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	6053      	str	r3, [r2, #4]
 80058c6:	4408      	add	r0, r1
 80058c8:	6010      	str	r0, [r2, #0]
 80058ca:	e7da      	b.n	8005882 <_free_r+0x22>
 80058cc:	d902      	bls.n	80058d4 <_free_r+0x74>
 80058ce:	230c      	movs	r3, #12
 80058d0:	602b      	str	r3, [r5, #0]
 80058d2:	e7d6      	b.n	8005882 <_free_r+0x22>
 80058d4:	6820      	ldr	r0, [r4, #0]
 80058d6:	1821      	adds	r1, r4, r0
 80058d8:	428b      	cmp	r3, r1
 80058da:	bf04      	itt	eq
 80058dc:	6819      	ldreq	r1, [r3, #0]
 80058de:	685b      	ldreq	r3, [r3, #4]
 80058e0:	6063      	str	r3, [r4, #4]
 80058e2:	bf04      	itt	eq
 80058e4:	1809      	addeq	r1, r1, r0
 80058e6:	6021      	streq	r1, [r4, #0]
 80058e8:	6054      	str	r4, [r2, #4]
 80058ea:	e7ca      	b.n	8005882 <_free_r+0x22>
 80058ec:	bd38      	pop	{r3, r4, r5, pc}
 80058ee:	bf00      	nop
 80058f0:	20000390 	.word	0x20000390

080058f4 <sbrk_aligned>:
 80058f4:	b570      	push	{r4, r5, r6, lr}
 80058f6:	4e0f      	ldr	r6, [pc, #60]	@ (8005934 <sbrk_aligned+0x40>)
 80058f8:	460c      	mov	r4, r1
 80058fa:	6831      	ldr	r1, [r6, #0]
 80058fc:	4605      	mov	r5, r0
 80058fe:	b911      	cbnz	r1, 8005906 <sbrk_aligned+0x12>
 8005900:	f000 fcb6 	bl	8006270 <_sbrk_r>
 8005904:	6030      	str	r0, [r6, #0]
 8005906:	4621      	mov	r1, r4
 8005908:	4628      	mov	r0, r5
 800590a:	f000 fcb1 	bl	8006270 <_sbrk_r>
 800590e:	1c43      	adds	r3, r0, #1
 8005910:	d103      	bne.n	800591a <sbrk_aligned+0x26>
 8005912:	f04f 34ff 	mov.w	r4, #4294967295
 8005916:	4620      	mov	r0, r4
 8005918:	bd70      	pop	{r4, r5, r6, pc}
 800591a:	1cc4      	adds	r4, r0, #3
 800591c:	f024 0403 	bic.w	r4, r4, #3
 8005920:	42a0      	cmp	r0, r4
 8005922:	d0f8      	beq.n	8005916 <sbrk_aligned+0x22>
 8005924:	1a21      	subs	r1, r4, r0
 8005926:	4628      	mov	r0, r5
 8005928:	f000 fca2 	bl	8006270 <_sbrk_r>
 800592c:	3001      	adds	r0, #1
 800592e:	d1f2      	bne.n	8005916 <sbrk_aligned+0x22>
 8005930:	e7ef      	b.n	8005912 <sbrk_aligned+0x1e>
 8005932:	bf00      	nop
 8005934:	2000038c 	.word	0x2000038c

08005938 <_malloc_r>:
 8005938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800593c:	1ccd      	adds	r5, r1, #3
 800593e:	f025 0503 	bic.w	r5, r5, #3
 8005942:	3508      	adds	r5, #8
 8005944:	2d0c      	cmp	r5, #12
 8005946:	bf38      	it	cc
 8005948:	250c      	movcc	r5, #12
 800594a:	2d00      	cmp	r5, #0
 800594c:	4606      	mov	r6, r0
 800594e:	db01      	blt.n	8005954 <_malloc_r+0x1c>
 8005950:	42a9      	cmp	r1, r5
 8005952:	d904      	bls.n	800595e <_malloc_r+0x26>
 8005954:	230c      	movs	r3, #12
 8005956:	6033      	str	r3, [r6, #0]
 8005958:	2000      	movs	r0, #0
 800595a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800595e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a34 <_malloc_r+0xfc>
 8005962:	f000 f869 	bl	8005a38 <__malloc_lock>
 8005966:	f8d8 3000 	ldr.w	r3, [r8]
 800596a:	461c      	mov	r4, r3
 800596c:	bb44      	cbnz	r4, 80059c0 <_malloc_r+0x88>
 800596e:	4629      	mov	r1, r5
 8005970:	4630      	mov	r0, r6
 8005972:	f7ff ffbf 	bl	80058f4 <sbrk_aligned>
 8005976:	1c43      	adds	r3, r0, #1
 8005978:	4604      	mov	r4, r0
 800597a:	d158      	bne.n	8005a2e <_malloc_r+0xf6>
 800597c:	f8d8 4000 	ldr.w	r4, [r8]
 8005980:	4627      	mov	r7, r4
 8005982:	2f00      	cmp	r7, #0
 8005984:	d143      	bne.n	8005a0e <_malloc_r+0xd6>
 8005986:	2c00      	cmp	r4, #0
 8005988:	d04b      	beq.n	8005a22 <_malloc_r+0xea>
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	4639      	mov	r1, r7
 800598e:	4630      	mov	r0, r6
 8005990:	eb04 0903 	add.w	r9, r4, r3
 8005994:	f000 fc6c 	bl	8006270 <_sbrk_r>
 8005998:	4581      	cmp	r9, r0
 800599a:	d142      	bne.n	8005a22 <_malloc_r+0xea>
 800599c:	6821      	ldr	r1, [r4, #0]
 800599e:	1a6d      	subs	r5, r5, r1
 80059a0:	4629      	mov	r1, r5
 80059a2:	4630      	mov	r0, r6
 80059a4:	f7ff ffa6 	bl	80058f4 <sbrk_aligned>
 80059a8:	3001      	adds	r0, #1
 80059aa:	d03a      	beq.n	8005a22 <_malloc_r+0xea>
 80059ac:	6823      	ldr	r3, [r4, #0]
 80059ae:	442b      	add	r3, r5
 80059b0:	6023      	str	r3, [r4, #0]
 80059b2:	f8d8 3000 	ldr.w	r3, [r8]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	bb62      	cbnz	r2, 8005a14 <_malloc_r+0xdc>
 80059ba:	f8c8 7000 	str.w	r7, [r8]
 80059be:	e00f      	b.n	80059e0 <_malloc_r+0xa8>
 80059c0:	6822      	ldr	r2, [r4, #0]
 80059c2:	1b52      	subs	r2, r2, r5
 80059c4:	d420      	bmi.n	8005a08 <_malloc_r+0xd0>
 80059c6:	2a0b      	cmp	r2, #11
 80059c8:	d917      	bls.n	80059fa <_malloc_r+0xc2>
 80059ca:	1961      	adds	r1, r4, r5
 80059cc:	42a3      	cmp	r3, r4
 80059ce:	6025      	str	r5, [r4, #0]
 80059d0:	bf18      	it	ne
 80059d2:	6059      	strne	r1, [r3, #4]
 80059d4:	6863      	ldr	r3, [r4, #4]
 80059d6:	bf08      	it	eq
 80059d8:	f8c8 1000 	streq.w	r1, [r8]
 80059dc:	5162      	str	r2, [r4, r5]
 80059de:	604b      	str	r3, [r1, #4]
 80059e0:	4630      	mov	r0, r6
 80059e2:	f000 f82f 	bl	8005a44 <__malloc_unlock>
 80059e6:	f104 000b 	add.w	r0, r4, #11
 80059ea:	1d23      	adds	r3, r4, #4
 80059ec:	f020 0007 	bic.w	r0, r0, #7
 80059f0:	1ac2      	subs	r2, r0, r3
 80059f2:	bf1c      	itt	ne
 80059f4:	1a1b      	subne	r3, r3, r0
 80059f6:	50a3      	strne	r3, [r4, r2]
 80059f8:	e7af      	b.n	800595a <_malloc_r+0x22>
 80059fa:	6862      	ldr	r2, [r4, #4]
 80059fc:	42a3      	cmp	r3, r4
 80059fe:	bf0c      	ite	eq
 8005a00:	f8c8 2000 	streq.w	r2, [r8]
 8005a04:	605a      	strne	r2, [r3, #4]
 8005a06:	e7eb      	b.n	80059e0 <_malloc_r+0xa8>
 8005a08:	4623      	mov	r3, r4
 8005a0a:	6864      	ldr	r4, [r4, #4]
 8005a0c:	e7ae      	b.n	800596c <_malloc_r+0x34>
 8005a0e:	463c      	mov	r4, r7
 8005a10:	687f      	ldr	r7, [r7, #4]
 8005a12:	e7b6      	b.n	8005982 <_malloc_r+0x4a>
 8005a14:	461a      	mov	r2, r3
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	42a3      	cmp	r3, r4
 8005a1a:	d1fb      	bne.n	8005a14 <_malloc_r+0xdc>
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	6053      	str	r3, [r2, #4]
 8005a20:	e7de      	b.n	80059e0 <_malloc_r+0xa8>
 8005a22:	230c      	movs	r3, #12
 8005a24:	6033      	str	r3, [r6, #0]
 8005a26:	4630      	mov	r0, r6
 8005a28:	f000 f80c 	bl	8005a44 <__malloc_unlock>
 8005a2c:	e794      	b.n	8005958 <_malloc_r+0x20>
 8005a2e:	6005      	str	r5, [r0, #0]
 8005a30:	e7d6      	b.n	80059e0 <_malloc_r+0xa8>
 8005a32:	bf00      	nop
 8005a34:	20000390 	.word	0x20000390

08005a38 <__malloc_lock>:
 8005a38:	4801      	ldr	r0, [pc, #4]	@ (8005a40 <__malloc_lock+0x8>)
 8005a3a:	f7ff bf0e 	b.w	800585a <__retarget_lock_acquire_recursive>
 8005a3e:	bf00      	nop
 8005a40:	20000388 	.word	0x20000388

08005a44 <__malloc_unlock>:
 8005a44:	4801      	ldr	r0, [pc, #4]	@ (8005a4c <__malloc_unlock+0x8>)
 8005a46:	f7ff bf09 	b.w	800585c <__retarget_lock_release_recursive>
 8005a4a:	bf00      	nop
 8005a4c:	20000388 	.word	0x20000388

08005a50 <__sfputc_r>:
 8005a50:	6893      	ldr	r3, [r2, #8]
 8005a52:	3b01      	subs	r3, #1
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	b410      	push	{r4}
 8005a58:	6093      	str	r3, [r2, #8]
 8005a5a:	da08      	bge.n	8005a6e <__sfputc_r+0x1e>
 8005a5c:	6994      	ldr	r4, [r2, #24]
 8005a5e:	42a3      	cmp	r3, r4
 8005a60:	db01      	blt.n	8005a66 <__sfputc_r+0x16>
 8005a62:	290a      	cmp	r1, #10
 8005a64:	d103      	bne.n	8005a6e <__sfputc_r+0x1e>
 8005a66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a6a:	f000 bb6d 	b.w	8006148 <__swbuf_r>
 8005a6e:	6813      	ldr	r3, [r2, #0]
 8005a70:	1c58      	adds	r0, r3, #1
 8005a72:	6010      	str	r0, [r2, #0]
 8005a74:	7019      	strb	r1, [r3, #0]
 8005a76:	4608      	mov	r0, r1
 8005a78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <__sfputs_r>:
 8005a7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a80:	4606      	mov	r6, r0
 8005a82:	460f      	mov	r7, r1
 8005a84:	4614      	mov	r4, r2
 8005a86:	18d5      	adds	r5, r2, r3
 8005a88:	42ac      	cmp	r4, r5
 8005a8a:	d101      	bne.n	8005a90 <__sfputs_r+0x12>
 8005a8c:	2000      	movs	r0, #0
 8005a8e:	e007      	b.n	8005aa0 <__sfputs_r+0x22>
 8005a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a94:	463a      	mov	r2, r7
 8005a96:	4630      	mov	r0, r6
 8005a98:	f7ff ffda 	bl	8005a50 <__sfputc_r>
 8005a9c:	1c43      	adds	r3, r0, #1
 8005a9e:	d1f3      	bne.n	8005a88 <__sfputs_r+0xa>
 8005aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005aa4 <_vfiprintf_r>:
 8005aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa8:	460d      	mov	r5, r1
 8005aaa:	b09d      	sub	sp, #116	@ 0x74
 8005aac:	4614      	mov	r4, r2
 8005aae:	4698      	mov	r8, r3
 8005ab0:	4606      	mov	r6, r0
 8005ab2:	b118      	cbz	r0, 8005abc <_vfiprintf_r+0x18>
 8005ab4:	6a03      	ldr	r3, [r0, #32]
 8005ab6:	b90b      	cbnz	r3, 8005abc <_vfiprintf_r+0x18>
 8005ab8:	f7ff fdca 	bl	8005650 <__sinit>
 8005abc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005abe:	07d9      	lsls	r1, r3, #31
 8005ac0:	d405      	bmi.n	8005ace <_vfiprintf_r+0x2a>
 8005ac2:	89ab      	ldrh	r3, [r5, #12]
 8005ac4:	059a      	lsls	r2, r3, #22
 8005ac6:	d402      	bmi.n	8005ace <_vfiprintf_r+0x2a>
 8005ac8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005aca:	f7ff fec6 	bl	800585a <__retarget_lock_acquire_recursive>
 8005ace:	89ab      	ldrh	r3, [r5, #12]
 8005ad0:	071b      	lsls	r3, r3, #28
 8005ad2:	d501      	bpl.n	8005ad8 <_vfiprintf_r+0x34>
 8005ad4:	692b      	ldr	r3, [r5, #16]
 8005ad6:	b99b      	cbnz	r3, 8005b00 <_vfiprintf_r+0x5c>
 8005ad8:	4629      	mov	r1, r5
 8005ada:	4630      	mov	r0, r6
 8005adc:	f000 fb72 	bl	80061c4 <__swsetup_r>
 8005ae0:	b170      	cbz	r0, 8005b00 <_vfiprintf_r+0x5c>
 8005ae2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ae4:	07dc      	lsls	r4, r3, #31
 8005ae6:	d504      	bpl.n	8005af2 <_vfiprintf_r+0x4e>
 8005ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8005aec:	b01d      	add	sp, #116	@ 0x74
 8005aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af2:	89ab      	ldrh	r3, [r5, #12]
 8005af4:	0598      	lsls	r0, r3, #22
 8005af6:	d4f7      	bmi.n	8005ae8 <_vfiprintf_r+0x44>
 8005af8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005afa:	f7ff feaf 	bl	800585c <__retarget_lock_release_recursive>
 8005afe:	e7f3      	b.n	8005ae8 <_vfiprintf_r+0x44>
 8005b00:	2300      	movs	r3, #0
 8005b02:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b04:	2320      	movs	r3, #32
 8005b06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b0e:	2330      	movs	r3, #48	@ 0x30
 8005b10:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005cc0 <_vfiprintf_r+0x21c>
 8005b14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b18:	f04f 0901 	mov.w	r9, #1
 8005b1c:	4623      	mov	r3, r4
 8005b1e:	469a      	mov	sl, r3
 8005b20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b24:	b10a      	cbz	r2, 8005b2a <_vfiprintf_r+0x86>
 8005b26:	2a25      	cmp	r2, #37	@ 0x25
 8005b28:	d1f9      	bne.n	8005b1e <_vfiprintf_r+0x7a>
 8005b2a:	ebba 0b04 	subs.w	fp, sl, r4
 8005b2e:	d00b      	beq.n	8005b48 <_vfiprintf_r+0xa4>
 8005b30:	465b      	mov	r3, fp
 8005b32:	4622      	mov	r2, r4
 8005b34:	4629      	mov	r1, r5
 8005b36:	4630      	mov	r0, r6
 8005b38:	f7ff ffa1 	bl	8005a7e <__sfputs_r>
 8005b3c:	3001      	adds	r0, #1
 8005b3e:	f000 80a7 	beq.w	8005c90 <_vfiprintf_r+0x1ec>
 8005b42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b44:	445a      	add	r2, fp
 8005b46:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b48:	f89a 3000 	ldrb.w	r3, [sl]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f000 809f 	beq.w	8005c90 <_vfiprintf_r+0x1ec>
 8005b52:	2300      	movs	r3, #0
 8005b54:	f04f 32ff 	mov.w	r2, #4294967295
 8005b58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b5c:	f10a 0a01 	add.w	sl, sl, #1
 8005b60:	9304      	str	r3, [sp, #16]
 8005b62:	9307      	str	r3, [sp, #28]
 8005b64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b68:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b6a:	4654      	mov	r4, sl
 8005b6c:	2205      	movs	r2, #5
 8005b6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b72:	4853      	ldr	r0, [pc, #332]	@ (8005cc0 <_vfiprintf_r+0x21c>)
 8005b74:	f7fa fb2c 	bl	80001d0 <memchr>
 8005b78:	9a04      	ldr	r2, [sp, #16]
 8005b7a:	b9d8      	cbnz	r0, 8005bb4 <_vfiprintf_r+0x110>
 8005b7c:	06d1      	lsls	r1, r2, #27
 8005b7e:	bf44      	itt	mi
 8005b80:	2320      	movmi	r3, #32
 8005b82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b86:	0713      	lsls	r3, r2, #28
 8005b88:	bf44      	itt	mi
 8005b8a:	232b      	movmi	r3, #43	@ 0x2b
 8005b8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b90:	f89a 3000 	ldrb.w	r3, [sl]
 8005b94:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b96:	d015      	beq.n	8005bc4 <_vfiprintf_r+0x120>
 8005b98:	9a07      	ldr	r2, [sp, #28]
 8005b9a:	4654      	mov	r4, sl
 8005b9c:	2000      	movs	r0, #0
 8005b9e:	f04f 0c0a 	mov.w	ip, #10
 8005ba2:	4621      	mov	r1, r4
 8005ba4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ba8:	3b30      	subs	r3, #48	@ 0x30
 8005baa:	2b09      	cmp	r3, #9
 8005bac:	d94b      	bls.n	8005c46 <_vfiprintf_r+0x1a2>
 8005bae:	b1b0      	cbz	r0, 8005bde <_vfiprintf_r+0x13a>
 8005bb0:	9207      	str	r2, [sp, #28]
 8005bb2:	e014      	b.n	8005bde <_vfiprintf_r+0x13a>
 8005bb4:	eba0 0308 	sub.w	r3, r0, r8
 8005bb8:	fa09 f303 	lsl.w	r3, r9, r3
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	9304      	str	r3, [sp, #16]
 8005bc0:	46a2      	mov	sl, r4
 8005bc2:	e7d2      	b.n	8005b6a <_vfiprintf_r+0xc6>
 8005bc4:	9b03      	ldr	r3, [sp, #12]
 8005bc6:	1d19      	adds	r1, r3, #4
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	9103      	str	r1, [sp, #12]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	bfbb      	ittet	lt
 8005bd0:	425b      	neglt	r3, r3
 8005bd2:	f042 0202 	orrlt.w	r2, r2, #2
 8005bd6:	9307      	strge	r3, [sp, #28]
 8005bd8:	9307      	strlt	r3, [sp, #28]
 8005bda:	bfb8      	it	lt
 8005bdc:	9204      	strlt	r2, [sp, #16]
 8005bde:	7823      	ldrb	r3, [r4, #0]
 8005be0:	2b2e      	cmp	r3, #46	@ 0x2e
 8005be2:	d10a      	bne.n	8005bfa <_vfiprintf_r+0x156>
 8005be4:	7863      	ldrb	r3, [r4, #1]
 8005be6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005be8:	d132      	bne.n	8005c50 <_vfiprintf_r+0x1ac>
 8005bea:	9b03      	ldr	r3, [sp, #12]
 8005bec:	1d1a      	adds	r2, r3, #4
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	9203      	str	r2, [sp, #12]
 8005bf2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005bf6:	3402      	adds	r4, #2
 8005bf8:	9305      	str	r3, [sp, #20]
 8005bfa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005cd0 <_vfiprintf_r+0x22c>
 8005bfe:	7821      	ldrb	r1, [r4, #0]
 8005c00:	2203      	movs	r2, #3
 8005c02:	4650      	mov	r0, sl
 8005c04:	f7fa fae4 	bl	80001d0 <memchr>
 8005c08:	b138      	cbz	r0, 8005c1a <_vfiprintf_r+0x176>
 8005c0a:	9b04      	ldr	r3, [sp, #16]
 8005c0c:	eba0 000a 	sub.w	r0, r0, sl
 8005c10:	2240      	movs	r2, #64	@ 0x40
 8005c12:	4082      	lsls	r2, r0
 8005c14:	4313      	orrs	r3, r2
 8005c16:	3401      	adds	r4, #1
 8005c18:	9304      	str	r3, [sp, #16]
 8005c1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c1e:	4829      	ldr	r0, [pc, #164]	@ (8005cc4 <_vfiprintf_r+0x220>)
 8005c20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c24:	2206      	movs	r2, #6
 8005c26:	f7fa fad3 	bl	80001d0 <memchr>
 8005c2a:	2800      	cmp	r0, #0
 8005c2c:	d03f      	beq.n	8005cae <_vfiprintf_r+0x20a>
 8005c2e:	4b26      	ldr	r3, [pc, #152]	@ (8005cc8 <_vfiprintf_r+0x224>)
 8005c30:	bb1b      	cbnz	r3, 8005c7a <_vfiprintf_r+0x1d6>
 8005c32:	9b03      	ldr	r3, [sp, #12]
 8005c34:	3307      	adds	r3, #7
 8005c36:	f023 0307 	bic.w	r3, r3, #7
 8005c3a:	3308      	adds	r3, #8
 8005c3c:	9303      	str	r3, [sp, #12]
 8005c3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c40:	443b      	add	r3, r7
 8005c42:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c44:	e76a      	b.n	8005b1c <_vfiprintf_r+0x78>
 8005c46:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c4a:	460c      	mov	r4, r1
 8005c4c:	2001      	movs	r0, #1
 8005c4e:	e7a8      	b.n	8005ba2 <_vfiprintf_r+0xfe>
 8005c50:	2300      	movs	r3, #0
 8005c52:	3401      	adds	r4, #1
 8005c54:	9305      	str	r3, [sp, #20]
 8005c56:	4619      	mov	r1, r3
 8005c58:	f04f 0c0a 	mov.w	ip, #10
 8005c5c:	4620      	mov	r0, r4
 8005c5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c62:	3a30      	subs	r2, #48	@ 0x30
 8005c64:	2a09      	cmp	r2, #9
 8005c66:	d903      	bls.n	8005c70 <_vfiprintf_r+0x1cc>
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d0c6      	beq.n	8005bfa <_vfiprintf_r+0x156>
 8005c6c:	9105      	str	r1, [sp, #20]
 8005c6e:	e7c4      	b.n	8005bfa <_vfiprintf_r+0x156>
 8005c70:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c74:	4604      	mov	r4, r0
 8005c76:	2301      	movs	r3, #1
 8005c78:	e7f0      	b.n	8005c5c <_vfiprintf_r+0x1b8>
 8005c7a:	ab03      	add	r3, sp, #12
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	462a      	mov	r2, r5
 8005c80:	4b12      	ldr	r3, [pc, #72]	@ (8005ccc <_vfiprintf_r+0x228>)
 8005c82:	a904      	add	r1, sp, #16
 8005c84:	4630      	mov	r0, r6
 8005c86:	f3af 8000 	nop.w
 8005c8a:	4607      	mov	r7, r0
 8005c8c:	1c78      	adds	r0, r7, #1
 8005c8e:	d1d6      	bne.n	8005c3e <_vfiprintf_r+0x19a>
 8005c90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c92:	07d9      	lsls	r1, r3, #31
 8005c94:	d405      	bmi.n	8005ca2 <_vfiprintf_r+0x1fe>
 8005c96:	89ab      	ldrh	r3, [r5, #12]
 8005c98:	059a      	lsls	r2, r3, #22
 8005c9a:	d402      	bmi.n	8005ca2 <_vfiprintf_r+0x1fe>
 8005c9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c9e:	f7ff fddd 	bl	800585c <__retarget_lock_release_recursive>
 8005ca2:	89ab      	ldrh	r3, [r5, #12]
 8005ca4:	065b      	lsls	r3, r3, #25
 8005ca6:	f53f af1f 	bmi.w	8005ae8 <_vfiprintf_r+0x44>
 8005caa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005cac:	e71e      	b.n	8005aec <_vfiprintf_r+0x48>
 8005cae:	ab03      	add	r3, sp, #12
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	462a      	mov	r2, r5
 8005cb4:	4b05      	ldr	r3, [pc, #20]	@ (8005ccc <_vfiprintf_r+0x228>)
 8005cb6:	a904      	add	r1, sp, #16
 8005cb8:	4630      	mov	r0, r6
 8005cba:	f000 f879 	bl	8005db0 <_printf_i>
 8005cbe:	e7e4      	b.n	8005c8a <_vfiprintf_r+0x1e6>
 8005cc0:	08007af0 	.word	0x08007af0
 8005cc4:	08007afa 	.word	0x08007afa
 8005cc8:	00000000 	.word	0x00000000
 8005ccc:	08005a7f 	.word	0x08005a7f
 8005cd0:	08007af6 	.word	0x08007af6

08005cd4 <_printf_common>:
 8005cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cd8:	4616      	mov	r6, r2
 8005cda:	4698      	mov	r8, r3
 8005cdc:	688a      	ldr	r2, [r1, #8]
 8005cde:	690b      	ldr	r3, [r1, #16]
 8005ce0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	bfb8      	it	lt
 8005ce8:	4613      	movlt	r3, r2
 8005cea:	6033      	str	r3, [r6, #0]
 8005cec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005cf0:	4607      	mov	r7, r0
 8005cf2:	460c      	mov	r4, r1
 8005cf4:	b10a      	cbz	r2, 8005cfa <_printf_common+0x26>
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	6033      	str	r3, [r6, #0]
 8005cfa:	6823      	ldr	r3, [r4, #0]
 8005cfc:	0699      	lsls	r1, r3, #26
 8005cfe:	bf42      	ittt	mi
 8005d00:	6833      	ldrmi	r3, [r6, #0]
 8005d02:	3302      	addmi	r3, #2
 8005d04:	6033      	strmi	r3, [r6, #0]
 8005d06:	6825      	ldr	r5, [r4, #0]
 8005d08:	f015 0506 	ands.w	r5, r5, #6
 8005d0c:	d106      	bne.n	8005d1c <_printf_common+0x48>
 8005d0e:	f104 0a19 	add.w	sl, r4, #25
 8005d12:	68e3      	ldr	r3, [r4, #12]
 8005d14:	6832      	ldr	r2, [r6, #0]
 8005d16:	1a9b      	subs	r3, r3, r2
 8005d18:	42ab      	cmp	r3, r5
 8005d1a:	dc26      	bgt.n	8005d6a <_printf_common+0x96>
 8005d1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d20:	6822      	ldr	r2, [r4, #0]
 8005d22:	3b00      	subs	r3, #0
 8005d24:	bf18      	it	ne
 8005d26:	2301      	movne	r3, #1
 8005d28:	0692      	lsls	r2, r2, #26
 8005d2a:	d42b      	bmi.n	8005d84 <_printf_common+0xb0>
 8005d2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d30:	4641      	mov	r1, r8
 8005d32:	4638      	mov	r0, r7
 8005d34:	47c8      	blx	r9
 8005d36:	3001      	adds	r0, #1
 8005d38:	d01e      	beq.n	8005d78 <_printf_common+0xa4>
 8005d3a:	6823      	ldr	r3, [r4, #0]
 8005d3c:	6922      	ldr	r2, [r4, #16]
 8005d3e:	f003 0306 	and.w	r3, r3, #6
 8005d42:	2b04      	cmp	r3, #4
 8005d44:	bf02      	ittt	eq
 8005d46:	68e5      	ldreq	r5, [r4, #12]
 8005d48:	6833      	ldreq	r3, [r6, #0]
 8005d4a:	1aed      	subeq	r5, r5, r3
 8005d4c:	68a3      	ldr	r3, [r4, #8]
 8005d4e:	bf0c      	ite	eq
 8005d50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d54:	2500      	movne	r5, #0
 8005d56:	4293      	cmp	r3, r2
 8005d58:	bfc4      	itt	gt
 8005d5a:	1a9b      	subgt	r3, r3, r2
 8005d5c:	18ed      	addgt	r5, r5, r3
 8005d5e:	2600      	movs	r6, #0
 8005d60:	341a      	adds	r4, #26
 8005d62:	42b5      	cmp	r5, r6
 8005d64:	d11a      	bne.n	8005d9c <_printf_common+0xc8>
 8005d66:	2000      	movs	r0, #0
 8005d68:	e008      	b.n	8005d7c <_printf_common+0xa8>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	4652      	mov	r2, sl
 8005d6e:	4641      	mov	r1, r8
 8005d70:	4638      	mov	r0, r7
 8005d72:	47c8      	blx	r9
 8005d74:	3001      	adds	r0, #1
 8005d76:	d103      	bne.n	8005d80 <_printf_common+0xac>
 8005d78:	f04f 30ff 	mov.w	r0, #4294967295
 8005d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d80:	3501      	adds	r5, #1
 8005d82:	e7c6      	b.n	8005d12 <_printf_common+0x3e>
 8005d84:	18e1      	adds	r1, r4, r3
 8005d86:	1c5a      	adds	r2, r3, #1
 8005d88:	2030      	movs	r0, #48	@ 0x30
 8005d8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d8e:	4422      	add	r2, r4
 8005d90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d98:	3302      	adds	r3, #2
 8005d9a:	e7c7      	b.n	8005d2c <_printf_common+0x58>
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	4622      	mov	r2, r4
 8005da0:	4641      	mov	r1, r8
 8005da2:	4638      	mov	r0, r7
 8005da4:	47c8      	blx	r9
 8005da6:	3001      	adds	r0, #1
 8005da8:	d0e6      	beq.n	8005d78 <_printf_common+0xa4>
 8005daa:	3601      	adds	r6, #1
 8005dac:	e7d9      	b.n	8005d62 <_printf_common+0x8e>
	...

08005db0 <_printf_i>:
 8005db0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005db4:	7e0f      	ldrb	r7, [r1, #24]
 8005db6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005db8:	2f78      	cmp	r7, #120	@ 0x78
 8005dba:	4691      	mov	r9, r2
 8005dbc:	4680      	mov	r8, r0
 8005dbe:	460c      	mov	r4, r1
 8005dc0:	469a      	mov	sl, r3
 8005dc2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005dc6:	d807      	bhi.n	8005dd8 <_printf_i+0x28>
 8005dc8:	2f62      	cmp	r7, #98	@ 0x62
 8005dca:	d80a      	bhi.n	8005de2 <_printf_i+0x32>
 8005dcc:	2f00      	cmp	r7, #0
 8005dce:	f000 80d2 	beq.w	8005f76 <_printf_i+0x1c6>
 8005dd2:	2f58      	cmp	r7, #88	@ 0x58
 8005dd4:	f000 80b9 	beq.w	8005f4a <_printf_i+0x19a>
 8005dd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ddc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005de0:	e03a      	b.n	8005e58 <_printf_i+0xa8>
 8005de2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005de6:	2b15      	cmp	r3, #21
 8005de8:	d8f6      	bhi.n	8005dd8 <_printf_i+0x28>
 8005dea:	a101      	add	r1, pc, #4	@ (adr r1, 8005df0 <_printf_i+0x40>)
 8005dec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005df0:	08005e49 	.word	0x08005e49
 8005df4:	08005e5d 	.word	0x08005e5d
 8005df8:	08005dd9 	.word	0x08005dd9
 8005dfc:	08005dd9 	.word	0x08005dd9
 8005e00:	08005dd9 	.word	0x08005dd9
 8005e04:	08005dd9 	.word	0x08005dd9
 8005e08:	08005e5d 	.word	0x08005e5d
 8005e0c:	08005dd9 	.word	0x08005dd9
 8005e10:	08005dd9 	.word	0x08005dd9
 8005e14:	08005dd9 	.word	0x08005dd9
 8005e18:	08005dd9 	.word	0x08005dd9
 8005e1c:	08005f5d 	.word	0x08005f5d
 8005e20:	08005e87 	.word	0x08005e87
 8005e24:	08005f17 	.word	0x08005f17
 8005e28:	08005dd9 	.word	0x08005dd9
 8005e2c:	08005dd9 	.word	0x08005dd9
 8005e30:	08005f7f 	.word	0x08005f7f
 8005e34:	08005dd9 	.word	0x08005dd9
 8005e38:	08005e87 	.word	0x08005e87
 8005e3c:	08005dd9 	.word	0x08005dd9
 8005e40:	08005dd9 	.word	0x08005dd9
 8005e44:	08005f1f 	.word	0x08005f1f
 8005e48:	6833      	ldr	r3, [r6, #0]
 8005e4a:	1d1a      	adds	r2, r3, #4
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6032      	str	r2, [r6, #0]
 8005e50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e09d      	b.n	8005f98 <_printf_i+0x1e8>
 8005e5c:	6833      	ldr	r3, [r6, #0]
 8005e5e:	6820      	ldr	r0, [r4, #0]
 8005e60:	1d19      	adds	r1, r3, #4
 8005e62:	6031      	str	r1, [r6, #0]
 8005e64:	0606      	lsls	r6, r0, #24
 8005e66:	d501      	bpl.n	8005e6c <_printf_i+0xbc>
 8005e68:	681d      	ldr	r5, [r3, #0]
 8005e6a:	e003      	b.n	8005e74 <_printf_i+0xc4>
 8005e6c:	0645      	lsls	r5, r0, #25
 8005e6e:	d5fb      	bpl.n	8005e68 <_printf_i+0xb8>
 8005e70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e74:	2d00      	cmp	r5, #0
 8005e76:	da03      	bge.n	8005e80 <_printf_i+0xd0>
 8005e78:	232d      	movs	r3, #45	@ 0x2d
 8005e7a:	426d      	negs	r5, r5
 8005e7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e80:	4859      	ldr	r0, [pc, #356]	@ (8005fe8 <_printf_i+0x238>)
 8005e82:	230a      	movs	r3, #10
 8005e84:	e011      	b.n	8005eaa <_printf_i+0xfa>
 8005e86:	6821      	ldr	r1, [r4, #0]
 8005e88:	6833      	ldr	r3, [r6, #0]
 8005e8a:	0608      	lsls	r0, r1, #24
 8005e8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e90:	d402      	bmi.n	8005e98 <_printf_i+0xe8>
 8005e92:	0649      	lsls	r1, r1, #25
 8005e94:	bf48      	it	mi
 8005e96:	b2ad      	uxthmi	r5, r5
 8005e98:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e9a:	4853      	ldr	r0, [pc, #332]	@ (8005fe8 <_printf_i+0x238>)
 8005e9c:	6033      	str	r3, [r6, #0]
 8005e9e:	bf14      	ite	ne
 8005ea0:	230a      	movne	r3, #10
 8005ea2:	2308      	moveq	r3, #8
 8005ea4:	2100      	movs	r1, #0
 8005ea6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005eaa:	6866      	ldr	r6, [r4, #4]
 8005eac:	60a6      	str	r6, [r4, #8]
 8005eae:	2e00      	cmp	r6, #0
 8005eb0:	bfa2      	ittt	ge
 8005eb2:	6821      	ldrge	r1, [r4, #0]
 8005eb4:	f021 0104 	bicge.w	r1, r1, #4
 8005eb8:	6021      	strge	r1, [r4, #0]
 8005eba:	b90d      	cbnz	r5, 8005ec0 <_printf_i+0x110>
 8005ebc:	2e00      	cmp	r6, #0
 8005ebe:	d04b      	beq.n	8005f58 <_printf_i+0x1a8>
 8005ec0:	4616      	mov	r6, r2
 8005ec2:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ec6:	fb03 5711 	mls	r7, r3, r1, r5
 8005eca:	5dc7      	ldrb	r7, [r0, r7]
 8005ecc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ed0:	462f      	mov	r7, r5
 8005ed2:	42bb      	cmp	r3, r7
 8005ed4:	460d      	mov	r5, r1
 8005ed6:	d9f4      	bls.n	8005ec2 <_printf_i+0x112>
 8005ed8:	2b08      	cmp	r3, #8
 8005eda:	d10b      	bne.n	8005ef4 <_printf_i+0x144>
 8005edc:	6823      	ldr	r3, [r4, #0]
 8005ede:	07df      	lsls	r7, r3, #31
 8005ee0:	d508      	bpl.n	8005ef4 <_printf_i+0x144>
 8005ee2:	6923      	ldr	r3, [r4, #16]
 8005ee4:	6861      	ldr	r1, [r4, #4]
 8005ee6:	4299      	cmp	r1, r3
 8005ee8:	bfde      	ittt	le
 8005eea:	2330      	movle	r3, #48	@ 0x30
 8005eec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ef0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ef4:	1b92      	subs	r2, r2, r6
 8005ef6:	6122      	str	r2, [r4, #16]
 8005ef8:	f8cd a000 	str.w	sl, [sp]
 8005efc:	464b      	mov	r3, r9
 8005efe:	aa03      	add	r2, sp, #12
 8005f00:	4621      	mov	r1, r4
 8005f02:	4640      	mov	r0, r8
 8005f04:	f7ff fee6 	bl	8005cd4 <_printf_common>
 8005f08:	3001      	adds	r0, #1
 8005f0a:	d14a      	bne.n	8005fa2 <_printf_i+0x1f2>
 8005f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f10:	b004      	add	sp, #16
 8005f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f16:	6823      	ldr	r3, [r4, #0]
 8005f18:	f043 0320 	orr.w	r3, r3, #32
 8005f1c:	6023      	str	r3, [r4, #0]
 8005f1e:	4833      	ldr	r0, [pc, #204]	@ (8005fec <_printf_i+0x23c>)
 8005f20:	2778      	movs	r7, #120	@ 0x78
 8005f22:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f26:	6823      	ldr	r3, [r4, #0]
 8005f28:	6831      	ldr	r1, [r6, #0]
 8005f2a:	061f      	lsls	r7, r3, #24
 8005f2c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f30:	d402      	bmi.n	8005f38 <_printf_i+0x188>
 8005f32:	065f      	lsls	r7, r3, #25
 8005f34:	bf48      	it	mi
 8005f36:	b2ad      	uxthmi	r5, r5
 8005f38:	6031      	str	r1, [r6, #0]
 8005f3a:	07d9      	lsls	r1, r3, #31
 8005f3c:	bf44      	itt	mi
 8005f3e:	f043 0320 	orrmi.w	r3, r3, #32
 8005f42:	6023      	strmi	r3, [r4, #0]
 8005f44:	b11d      	cbz	r5, 8005f4e <_printf_i+0x19e>
 8005f46:	2310      	movs	r3, #16
 8005f48:	e7ac      	b.n	8005ea4 <_printf_i+0xf4>
 8005f4a:	4827      	ldr	r0, [pc, #156]	@ (8005fe8 <_printf_i+0x238>)
 8005f4c:	e7e9      	b.n	8005f22 <_printf_i+0x172>
 8005f4e:	6823      	ldr	r3, [r4, #0]
 8005f50:	f023 0320 	bic.w	r3, r3, #32
 8005f54:	6023      	str	r3, [r4, #0]
 8005f56:	e7f6      	b.n	8005f46 <_printf_i+0x196>
 8005f58:	4616      	mov	r6, r2
 8005f5a:	e7bd      	b.n	8005ed8 <_printf_i+0x128>
 8005f5c:	6833      	ldr	r3, [r6, #0]
 8005f5e:	6825      	ldr	r5, [r4, #0]
 8005f60:	6961      	ldr	r1, [r4, #20]
 8005f62:	1d18      	adds	r0, r3, #4
 8005f64:	6030      	str	r0, [r6, #0]
 8005f66:	062e      	lsls	r6, r5, #24
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	d501      	bpl.n	8005f70 <_printf_i+0x1c0>
 8005f6c:	6019      	str	r1, [r3, #0]
 8005f6e:	e002      	b.n	8005f76 <_printf_i+0x1c6>
 8005f70:	0668      	lsls	r0, r5, #25
 8005f72:	d5fb      	bpl.n	8005f6c <_printf_i+0x1bc>
 8005f74:	8019      	strh	r1, [r3, #0]
 8005f76:	2300      	movs	r3, #0
 8005f78:	6123      	str	r3, [r4, #16]
 8005f7a:	4616      	mov	r6, r2
 8005f7c:	e7bc      	b.n	8005ef8 <_printf_i+0x148>
 8005f7e:	6833      	ldr	r3, [r6, #0]
 8005f80:	1d1a      	adds	r2, r3, #4
 8005f82:	6032      	str	r2, [r6, #0]
 8005f84:	681e      	ldr	r6, [r3, #0]
 8005f86:	6862      	ldr	r2, [r4, #4]
 8005f88:	2100      	movs	r1, #0
 8005f8a:	4630      	mov	r0, r6
 8005f8c:	f7fa f920 	bl	80001d0 <memchr>
 8005f90:	b108      	cbz	r0, 8005f96 <_printf_i+0x1e6>
 8005f92:	1b80      	subs	r0, r0, r6
 8005f94:	6060      	str	r0, [r4, #4]
 8005f96:	6863      	ldr	r3, [r4, #4]
 8005f98:	6123      	str	r3, [r4, #16]
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fa0:	e7aa      	b.n	8005ef8 <_printf_i+0x148>
 8005fa2:	6923      	ldr	r3, [r4, #16]
 8005fa4:	4632      	mov	r2, r6
 8005fa6:	4649      	mov	r1, r9
 8005fa8:	4640      	mov	r0, r8
 8005faa:	47d0      	blx	sl
 8005fac:	3001      	adds	r0, #1
 8005fae:	d0ad      	beq.n	8005f0c <_printf_i+0x15c>
 8005fb0:	6823      	ldr	r3, [r4, #0]
 8005fb2:	079b      	lsls	r3, r3, #30
 8005fb4:	d413      	bmi.n	8005fde <_printf_i+0x22e>
 8005fb6:	68e0      	ldr	r0, [r4, #12]
 8005fb8:	9b03      	ldr	r3, [sp, #12]
 8005fba:	4298      	cmp	r0, r3
 8005fbc:	bfb8      	it	lt
 8005fbe:	4618      	movlt	r0, r3
 8005fc0:	e7a6      	b.n	8005f10 <_printf_i+0x160>
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	4632      	mov	r2, r6
 8005fc6:	4649      	mov	r1, r9
 8005fc8:	4640      	mov	r0, r8
 8005fca:	47d0      	blx	sl
 8005fcc:	3001      	adds	r0, #1
 8005fce:	d09d      	beq.n	8005f0c <_printf_i+0x15c>
 8005fd0:	3501      	adds	r5, #1
 8005fd2:	68e3      	ldr	r3, [r4, #12]
 8005fd4:	9903      	ldr	r1, [sp, #12]
 8005fd6:	1a5b      	subs	r3, r3, r1
 8005fd8:	42ab      	cmp	r3, r5
 8005fda:	dcf2      	bgt.n	8005fc2 <_printf_i+0x212>
 8005fdc:	e7eb      	b.n	8005fb6 <_printf_i+0x206>
 8005fde:	2500      	movs	r5, #0
 8005fe0:	f104 0619 	add.w	r6, r4, #25
 8005fe4:	e7f5      	b.n	8005fd2 <_printf_i+0x222>
 8005fe6:	bf00      	nop
 8005fe8:	08007b01 	.word	0x08007b01
 8005fec:	08007b12 	.word	0x08007b12

08005ff0 <__sflush_r>:
 8005ff0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ff8:	0716      	lsls	r6, r2, #28
 8005ffa:	4605      	mov	r5, r0
 8005ffc:	460c      	mov	r4, r1
 8005ffe:	d454      	bmi.n	80060aa <__sflush_r+0xba>
 8006000:	684b      	ldr	r3, [r1, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	dc02      	bgt.n	800600c <__sflush_r+0x1c>
 8006006:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006008:	2b00      	cmp	r3, #0
 800600a:	dd48      	ble.n	800609e <__sflush_r+0xae>
 800600c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800600e:	2e00      	cmp	r6, #0
 8006010:	d045      	beq.n	800609e <__sflush_r+0xae>
 8006012:	2300      	movs	r3, #0
 8006014:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006018:	682f      	ldr	r7, [r5, #0]
 800601a:	6a21      	ldr	r1, [r4, #32]
 800601c:	602b      	str	r3, [r5, #0]
 800601e:	d030      	beq.n	8006082 <__sflush_r+0x92>
 8006020:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006022:	89a3      	ldrh	r3, [r4, #12]
 8006024:	0759      	lsls	r1, r3, #29
 8006026:	d505      	bpl.n	8006034 <__sflush_r+0x44>
 8006028:	6863      	ldr	r3, [r4, #4]
 800602a:	1ad2      	subs	r2, r2, r3
 800602c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800602e:	b10b      	cbz	r3, 8006034 <__sflush_r+0x44>
 8006030:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006032:	1ad2      	subs	r2, r2, r3
 8006034:	2300      	movs	r3, #0
 8006036:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006038:	6a21      	ldr	r1, [r4, #32]
 800603a:	4628      	mov	r0, r5
 800603c:	47b0      	blx	r6
 800603e:	1c43      	adds	r3, r0, #1
 8006040:	89a3      	ldrh	r3, [r4, #12]
 8006042:	d106      	bne.n	8006052 <__sflush_r+0x62>
 8006044:	6829      	ldr	r1, [r5, #0]
 8006046:	291d      	cmp	r1, #29
 8006048:	d82b      	bhi.n	80060a2 <__sflush_r+0xb2>
 800604a:	4a2a      	ldr	r2, [pc, #168]	@ (80060f4 <__sflush_r+0x104>)
 800604c:	410a      	asrs	r2, r1
 800604e:	07d6      	lsls	r6, r2, #31
 8006050:	d427      	bmi.n	80060a2 <__sflush_r+0xb2>
 8006052:	2200      	movs	r2, #0
 8006054:	6062      	str	r2, [r4, #4]
 8006056:	04d9      	lsls	r1, r3, #19
 8006058:	6922      	ldr	r2, [r4, #16]
 800605a:	6022      	str	r2, [r4, #0]
 800605c:	d504      	bpl.n	8006068 <__sflush_r+0x78>
 800605e:	1c42      	adds	r2, r0, #1
 8006060:	d101      	bne.n	8006066 <__sflush_r+0x76>
 8006062:	682b      	ldr	r3, [r5, #0]
 8006064:	b903      	cbnz	r3, 8006068 <__sflush_r+0x78>
 8006066:	6560      	str	r0, [r4, #84]	@ 0x54
 8006068:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800606a:	602f      	str	r7, [r5, #0]
 800606c:	b1b9      	cbz	r1, 800609e <__sflush_r+0xae>
 800606e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006072:	4299      	cmp	r1, r3
 8006074:	d002      	beq.n	800607c <__sflush_r+0x8c>
 8006076:	4628      	mov	r0, r5
 8006078:	f7ff fbf2 	bl	8005860 <_free_r>
 800607c:	2300      	movs	r3, #0
 800607e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006080:	e00d      	b.n	800609e <__sflush_r+0xae>
 8006082:	2301      	movs	r3, #1
 8006084:	4628      	mov	r0, r5
 8006086:	47b0      	blx	r6
 8006088:	4602      	mov	r2, r0
 800608a:	1c50      	adds	r0, r2, #1
 800608c:	d1c9      	bne.n	8006022 <__sflush_r+0x32>
 800608e:	682b      	ldr	r3, [r5, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d0c6      	beq.n	8006022 <__sflush_r+0x32>
 8006094:	2b1d      	cmp	r3, #29
 8006096:	d001      	beq.n	800609c <__sflush_r+0xac>
 8006098:	2b16      	cmp	r3, #22
 800609a:	d11e      	bne.n	80060da <__sflush_r+0xea>
 800609c:	602f      	str	r7, [r5, #0]
 800609e:	2000      	movs	r0, #0
 80060a0:	e022      	b.n	80060e8 <__sflush_r+0xf8>
 80060a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060a6:	b21b      	sxth	r3, r3
 80060a8:	e01b      	b.n	80060e2 <__sflush_r+0xf2>
 80060aa:	690f      	ldr	r7, [r1, #16]
 80060ac:	2f00      	cmp	r7, #0
 80060ae:	d0f6      	beq.n	800609e <__sflush_r+0xae>
 80060b0:	0793      	lsls	r3, r2, #30
 80060b2:	680e      	ldr	r6, [r1, #0]
 80060b4:	bf08      	it	eq
 80060b6:	694b      	ldreq	r3, [r1, #20]
 80060b8:	600f      	str	r7, [r1, #0]
 80060ba:	bf18      	it	ne
 80060bc:	2300      	movne	r3, #0
 80060be:	eba6 0807 	sub.w	r8, r6, r7
 80060c2:	608b      	str	r3, [r1, #8]
 80060c4:	f1b8 0f00 	cmp.w	r8, #0
 80060c8:	dde9      	ble.n	800609e <__sflush_r+0xae>
 80060ca:	6a21      	ldr	r1, [r4, #32]
 80060cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80060ce:	4643      	mov	r3, r8
 80060d0:	463a      	mov	r2, r7
 80060d2:	4628      	mov	r0, r5
 80060d4:	47b0      	blx	r6
 80060d6:	2800      	cmp	r0, #0
 80060d8:	dc08      	bgt.n	80060ec <__sflush_r+0xfc>
 80060da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060e2:	81a3      	strh	r3, [r4, #12]
 80060e4:	f04f 30ff 	mov.w	r0, #4294967295
 80060e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060ec:	4407      	add	r7, r0
 80060ee:	eba8 0800 	sub.w	r8, r8, r0
 80060f2:	e7e7      	b.n	80060c4 <__sflush_r+0xd4>
 80060f4:	dfbffffe 	.word	0xdfbffffe

080060f8 <_fflush_r>:
 80060f8:	b538      	push	{r3, r4, r5, lr}
 80060fa:	690b      	ldr	r3, [r1, #16]
 80060fc:	4605      	mov	r5, r0
 80060fe:	460c      	mov	r4, r1
 8006100:	b913      	cbnz	r3, 8006108 <_fflush_r+0x10>
 8006102:	2500      	movs	r5, #0
 8006104:	4628      	mov	r0, r5
 8006106:	bd38      	pop	{r3, r4, r5, pc}
 8006108:	b118      	cbz	r0, 8006112 <_fflush_r+0x1a>
 800610a:	6a03      	ldr	r3, [r0, #32]
 800610c:	b90b      	cbnz	r3, 8006112 <_fflush_r+0x1a>
 800610e:	f7ff fa9f 	bl	8005650 <__sinit>
 8006112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d0f3      	beq.n	8006102 <_fflush_r+0xa>
 800611a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800611c:	07d0      	lsls	r0, r2, #31
 800611e:	d404      	bmi.n	800612a <_fflush_r+0x32>
 8006120:	0599      	lsls	r1, r3, #22
 8006122:	d402      	bmi.n	800612a <_fflush_r+0x32>
 8006124:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006126:	f7ff fb98 	bl	800585a <__retarget_lock_acquire_recursive>
 800612a:	4628      	mov	r0, r5
 800612c:	4621      	mov	r1, r4
 800612e:	f7ff ff5f 	bl	8005ff0 <__sflush_r>
 8006132:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006134:	07da      	lsls	r2, r3, #31
 8006136:	4605      	mov	r5, r0
 8006138:	d4e4      	bmi.n	8006104 <_fflush_r+0xc>
 800613a:	89a3      	ldrh	r3, [r4, #12]
 800613c:	059b      	lsls	r3, r3, #22
 800613e:	d4e1      	bmi.n	8006104 <_fflush_r+0xc>
 8006140:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006142:	f7ff fb8b 	bl	800585c <__retarget_lock_release_recursive>
 8006146:	e7dd      	b.n	8006104 <_fflush_r+0xc>

08006148 <__swbuf_r>:
 8006148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800614a:	460e      	mov	r6, r1
 800614c:	4614      	mov	r4, r2
 800614e:	4605      	mov	r5, r0
 8006150:	b118      	cbz	r0, 800615a <__swbuf_r+0x12>
 8006152:	6a03      	ldr	r3, [r0, #32]
 8006154:	b90b      	cbnz	r3, 800615a <__swbuf_r+0x12>
 8006156:	f7ff fa7b 	bl	8005650 <__sinit>
 800615a:	69a3      	ldr	r3, [r4, #24]
 800615c:	60a3      	str	r3, [r4, #8]
 800615e:	89a3      	ldrh	r3, [r4, #12]
 8006160:	071a      	lsls	r2, r3, #28
 8006162:	d501      	bpl.n	8006168 <__swbuf_r+0x20>
 8006164:	6923      	ldr	r3, [r4, #16]
 8006166:	b943      	cbnz	r3, 800617a <__swbuf_r+0x32>
 8006168:	4621      	mov	r1, r4
 800616a:	4628      	mov	r0, r5
 800616c:	f000 f82a 	bl	80061c4 <__swsetup_r>
 8006170:	b118      	cbz	r0, 800617a <__swbuf_r+0x32>
 8006172:	f04f 37ff 	mov.w	r7, #4294967295
 8006176:	4638      	mov	r0, r7
 8006178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800617a:	6823      	ldr	r3, [r4, #0]
 800617c:	6922      	ldr	r2, [r4, #16]
 800617e:	1a98      	subs	r0, r3, r2
 8006180:	6963      	ldr	r3, [r4, #20]
 8006182:	b2f6      	uxtb	r6, r6
 8006184:	4283      	cmp	r3, r0
 8006186:	4637      	mov	r7, r6
 8006188:	dc05      	bgt.n	8006196 <__swbuf_r+0x4e>
 800618a:	4621      	mov	r1, r4
 800618c:	4628      	mov	r0, r5
 800618e:	f7ff ffb3 	bl	80060f8 <_fflush_r>
 8006192:	2800      	cmp	r0, #0
 8006194:	d1ed      	bne.n	8006172 <__swbuf_r+0x2a>
 8006196:	68a3      	ldr	r3, [r4, #8]
 8006198:	3b01      	subs	r3, #1
 800619a:	60a3      	str	r3, [r4, #8]
 800619c:	6823      	ldr	r3, [r4, #0]
 800619e:	1c5a      	adds	r2, r3, #1
 80061a0:	6022      	str	r2, [r4, #0]
 80061a2:	701e      	strb	r6, [r3, #0]
 80061a4:	6962      	ldr	r2, [r4, #20]
 80061a6:	1c43      	adds	r3, r0, #1
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d004      	beq.n	80061b6 <__swbuf_r+0x6e>
 80061ac:	89a3      	ldrh	r3, [r4, #12]
 80061ae:	07db      	lsls	r3, r3, #31
 80061b0:	d5e1      	bpl.n	8006176 <__swbuf_r+0x2e>
 80061b2:	2e0a      	cmp	r6, #10
 80061b4:	d1df      	bne.n	8006176 <__swbuf_r+0x2e>
 80061b6:	4621      	mov	r1, r4
 80061b8:	4628      	mov	r0, r5
 80061ba:	f7ff ff9d 	bl	80060f8 <_fflush_r>
 80061be:	2800      	cmp	r0, #0
 80061c0:	d0d9      	beq.n	8006176 <__swbuf_r+0x2e>
 80061c2:	e7d6      	b.n	8006172 <__swbuf_r+0x2a>

080061c4 <__swsetup_r>:
 80061c4:	b538      	push	{r3, r4, r5, lr}
 80061c6:	4b29      	ldr	r3, [pc, #164]	@ (800626c <__swsetup_r+0xa8>)
 80061c8:	4605      	mov	r5, r0
 80061ca:	6818      	ldr	r0, [r3, #0]
 80061cc:	460c      	mov	r4, r1
 80061ce:	b118      	cbz	r0, 80061d8 <__swsetup_r+0x14>
 80061d0:	6a03      	ldr	r3, [r0, #32]
 80061d2:	b90b      	cbnz	r3, 80061d8 <__swsetup_r+0x14>
 80061d4:	f7ff fa3c 	bl	8005650 <__sinit>
 80061d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061dc:	0719      	lsls	r1, r3, #28
 80061de:	d422      	bmi.n	8006226 <__swsetup_r+0x62>
 80061e0:	06da      	lsls	r2, r3, #27
 80061e2:	d407      	bmi.n	80061f4 <__swsetup_r+0x30>
 80061e4:	2209      	movs	r2, #9
 80061e6:	602a      	str	r2, [r5, #0]
 80061e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061ec:	81a3      	strh	r3, [r4, #12]
 80061ee:	f04f 30ff 	mov.w	r0, #4294967295
 80061f2:	e033      	b.n	800625c <__swsetup_r+0x98>
 80061f4:	0758      	lsls	r0, r3, #29
 80061f6:	d512      	bpl.n	800621e <__swsetup_r+0x5a>
 80061f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80061fa:	b141      	cbz	r1, 800620e <__swsetup_r+0x4a>
 80061fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006200:	4299      	cmp	r1, r3
 8006202:	d002      	beq.n	800620a <__swsetup_r+0x46>
 8006204:	4628      	mov	r0, r5
 8006206:	f7ff fb2b 	bl	8005860 <_free_r>
 800620a:	2300      	movs	r3, #0
 800620c:	6363      	str	r3, [r4, #52]	@ 0x34
 800620e:	89a3      	ldrh	r3, [r4, #12]
 8006210:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006214:	81a3      	strh	r3, [r4, #12]
 8006216:	2300      	movs	r3, #0
 8006218:	6063      	str	r3, [r4, #4]
 800621a:	6923      	ldr	r3, [r4, #16]
 800621c:	6023      	str	r3, [r4, #0]
 800621e:	89a3      	ldrh	r3, [r4, #12]
 8006220:	f043 0308 	orr.w	r3, r3, #8
 8006224:	81a3      	strh	r3, [r4, #12]
 8006226:	6923      	ldr	r3, [r4, #16]
 8006228:	b94b      	cbnz	r3, 800623e <__swsetup_r+0x7a>
 800622a:	89a3      	ldrh	r3, [r4, #12]
 800622c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006230:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006234:	d003      	beq.n	800623e <__swsetup_r+0x7a>
 8006236:	4621      	mov	r1, r4
 8006238:	4628      	mov	r0, r5
 800623a:	f000 f84f 	bl	80062dc <__smakebuf_r>
 800623e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006242:	f013 0201 	ands.w	r2, r3, #1
 8006246:	d00a      	beq.n	800625e <__swsetup_r+0x9a>
 8006248:	2200      	movs	r2, #0
 800624a:	60a2      	str	r2, [r4, #8]
 800624c:	6962      	ldr	r2, [r4, #20]
 800624e:	4252      	negs	r2, r2
 8006250:	61a2      	str	r2, [r4, #24]
 8006252:	6922      	ldr	r2, [r4, #16]
 8006254:	b942      	cbnz	r2, 8006268 <__swsetup_r+0xa4>
 8006256:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800625a:	d1c5      	bne.n	80061e8 <__swsetup_r+0x24>
 800625c:	bd38      	pop	{r3, r4, r5, pc}
 800625e:	0799      	lsls	r1, r3, #30
 8006260:	bf58      	it	pl
 8006262:	6962      	ldrpl	r2, [r4, #20]
 8006264:	60a2      	str	r2, [r4, #8]
 8006266:	e7f4      	b.n	8006252 <__swsetup_r+0x8e>
 8006268:	2000      	movs	r0, #0
 800626a:	e7f7      	b.n	800625c <__swsetup_r+0x98>
 800626c:	20000028 	.word	0x20000028

08006270 <_sbrk_r>:
 8006270:	b538      	push	{r3, r4, r5, lr}
 8006272:	4d06      	ldr	r5, [pc, #24]	@ (800628c <_sbrk_r+0x1c>)
 8006274:	2300      	movs	r3, #0
 8006276:	4604      	mov	r4, r0
 8006278:	4608      	mov	r0, r1
 800627a:	602b      	str	r3, [r5, #0]
 800627c:	f7fb ff52 	bl	8002124 <_sbrk>
 8006280:	1c43      	adds	r3, r0, #1
 8006282:	d102      	bne.n	800628a <_sbrk_r+0x1a>
 8006284:	682b      	ldr	r3, [r5, #0]
 8006286:	b103      	cbz	r3, 800628a <_sbrk_r+0x1a>
 8006288:	6023      	str	r3, [r4, #0]
 800628a:	bd38      	pop	{r3, r4, r5, pc}
 800628c:	20000384 	.word	0x20000384

08006290 <__swhatbuf_r>:
 8006290:	b570      	push	{r4, r5, r6, lr}
 8006292:	460c      	mov	r4, r1
 8006294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006298:	2900      	cmp	r1, #0
 800629a:	b096      	sub	sp, #88	@ 0x58
 800629c:	4615      	mov	r5, r2
 800629e:	461e      	mov	r6, r3
 80062a0:	da0d      	bge.n	80062be <__swhatbuf_r+0x2e>
 80062a2:	89a3      	ldrh	r3, [r4, #12]
 80062a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80062a8:	f04f 0100 	mov.w	r1, #0
 80062ac:	bf14      	ite	ne
 80062ae:	2340      	movne	r3, #64	@ 0x40
 80062b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80062b4:	2000      	movs	r0, #0
 80062b6:	6031      	str	r1, [r6, #0]
 80062b8:	602b      	str	r3, [r5, #0]
 80062ba:	b016      	add	sp, #88	@ 0x58
 80062bc:	bd70      	pop	{r4, r5, r6, pc}
 80062be:	466a      	mov	r2, sp
 80062c0:	f000 f848 	bl	8006354 <_fstat_r>
 80062c4:	2800      	cmp	r0, #0
 80062c6:	dbec      	blt.n	80062a2 <__swhatbuf_r+0x12>
 80062c8:	9901      	ldr	r1, [sp, #4]
 80062ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80062ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80062d2:	4259      	negs	r1, r3
 80062d4:	4159      	adcs	r1, r3
 80062d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80062da:	e7eb      	b.n	80062b4 <__swhatbuf_r+0x24>

080062dc <__smakebuf_r>:
 80062dc:	898b      	ldrh	r3, [r1, #12]
 80062de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062e0:	079d      	lsls	r5, r3, #30
 80062e2:	4606      	mov	r6, r0
 80062e4:	460c      	mov	r4, r1
 80062e6:	d507      	bpl.n	80062f8 <__smakebuf_r+0x1c>
 80062e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80062ec:	6023      	str	r3, [r4, #0]
 80062ee:	6123      	str	r3, [r4, #16]
 80062f0:	2301      	movs	r3, #1
 80062f2:	6163      	str	r3, [r4, #20]
 80062f4:	b003      	add	sp, #12
 80062f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062f8:	ab01      	add	r3, sp, #4
 80062fa:	466a      	mov	r2, sp
 80062fc:	f7ff ffc8 	bl	8006290 <__swhatbuf_r>
 8006300:	9f00      	ldr	r7, [sp, #0]
 8006302:	4605      	mov	r5, r0
 8006304:	4639      	mov	r1, r7
 8006306:	4630      	mov	r0, r6
 8006308:	f7ff fb16 	bl	8005938 <_malloc_r>
 800630c:	b948      	cbnz	r0, 8006322 <__smakebuf_r+0x46>
 800630e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006312:	059a      	lsls	r2, r3, #22
 8006314:	d4ee      	bmi.n	80062f4 <__smakebuf_r+0x18>
 8006316:	f023 0303 	bic.w	r3, r3, #3
 800631a:	f043 0302 	orr.w	r3, r3, #2
 800631e:	81a3      	strh	r3, [r4, #12]
 8006320:	e7e2      	b.n	80062e8 <__smakebuf_r+0xc>
 8006322:	89a3      	ldrh	r3, [r4, #12]
 8006324:	6020      	str	r0, [r4, #0]
 8006326:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800632a:	81a3      	strh	r3, [r4, #12]
 800632c:	9b01      	ldr	r3, [sp, #4]
 800632e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006332:	b15b      	cbz	r3, 800634c <__smakebuf_r+0x70>
 8006334:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006338:	4630      	mov	r0, r6
 800633a:	f000 f81d 	bl	8006378 <_isatty_r>
 800633e:	b128      	cbz	r0, 800634c <__smakebuf_r+0x70>
 8006340:	89a3      	ldrh	r3, [r4, #12]
 8006342:	f023 0303 	bic.w	r3, r3, #3
 8006346:	f043 0301 	orr.w	r3, r3, #1
 800634a:	81a3      	strh	r3, [r4, #12]
 800634c:	89a3      	ldrh	r3, [r4, #12]
 800634e:	431d      	orrs	r5, r3
 8006350:	81a5      	strh	r5, [r4, #12]
 8006352:	e7cf      	b.n	80062f4 <__smakebuf_r+0x18>

08006354 <_fstat_r>:
 8006354:	b538      	push	{r3, r4, r5, lr}
 8006356:	4d07      	ldr	r5, [pc, #28]	@ (8006374 <_fstat_r+0x20>)
 8006358:	2300      	movs	r3, #0
 800635a:	4604      	mov	r4, r0
 800635c:	4608      	mov	r0, r1
 800635e:	4611      	mov	r1, r2
 8006360:	602b      	str	r3, [r5, #0]
 8006362:	f7fb feb6 	bl	80020d2 <_fstat>
 8006366:	1c43      	adds	r3, r0, #1
 8006368:	d102      	bne.n	8006370 <_fstat_r+0x1c>
 800636a:	682b      	ldr	r3, [r5, #0]
 800636c:	b103      	cbz	r3, 8006370 <_fstat_r+0x1c>
 800636e:	6023      	str	r3, [r4, #0]
 8006370:	bd38      	pop	{r3, r4, r5, pc}
 8006372:	bf00      	nop
 8006374:	20000384 	.word	0x20000384

08006378 <_isatty_r>:
 8006378:	b538      	push	{r3, r4, r5, lr}
 800637a:	4d06      	ldr	r5, [pc, #24]	@ (8006394 <_isatty_r+0x1c>)
 800637c:	2300      	movs	r3, #0
 800637e:	4604      	mov	r4, r0
 8006380:	4608      	mov	r0, r1
 8006382:	602b      	str	r3, [r5, #0]
 8006384:	f7fb feb5 	bl	80020f2 <_isatty>
 8006388:	1c43      	adds	r3, r0, #1
 800638a:	d102      	bne.n	8006392 <_isatty_r+0x1a>
 800638c:	682b      	ldr	r3, [r5, #0]
 800638e:	b103      	cbz	r3, 8006392 <_isatty_r+0x1a>
 8006390:	6023      	str	r3, [r4, #0]
 8006392:	bd38      	pop	{r3, r4, r5, pc}
 8006394:	20000384 	.word	0x20000384

08006398 <asin>:
 8006398:	b538      	push	{r3, r4, r5, lr}
 800639a:	ed2d 8b02 	vpush	{d8}
 800639e:	ec55 4b10 	vmov	r4, r5, d0
 80063a2:	f000 fb1d 	bl	80069e0 <__ieee754_asin>
 80063a6:	4622      	mov	r2, r4
 80063a8:	462b      	mov	r3, r5
 80063aa:	4620      	mov	r0, r4
 80063ac:	4629      	mov	r1, r5
 80063ae:	eeb0 8a40 	vmov.f32	s16, s0
 80063b2:	eef0 8a60 	vmov.f32	s17, s1
 80063b6:	f7fa fbb1 	bl	8000b1c <__aeabi_dcmpun>
 80063ba:	b9a8      	cbnz	r0, 80063e8 <asin+0x50>
 80063bc:	ec45 4b10 	vmov	d0, r4, r5
 80063c0:	f000 f84a 	bl	8006458 <fabs>
 80063c4:	4b0c      	ldr	r3, [pc, #48]	@ (80063f8 <asin+0x60>)
 80063c6:	ec51 0b10 	vmov	r0, r1, d0
 80063ca:	2200      	movs	r2, #0
 80063cc:	f7fa fb9c 	bl	8000b08 <__aeabi_dcmpgt>
 80063d0:	b150      	cbz	r0, 80063e8 <asin+0x50>
 80063d2:	f7ff fa17 	bl	8005804 <__errno>
 80063d6:	ecbd 8b02 	vpop	{d8}
 80063da:	2321      	movs	r3, #33	@ 0x21
 80063dc:	6003      	str	r3, [r0, #0]
 80063de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063e2:	4806      	ldr	r0, [pc, #24]	@ (80063fc <asin+0x64>)
 80063e4:	f000 b894 	b.w	8006510 <nan>
 80063e8:	eeb0 0a48 	vmov.f32	s0, s16
 80063ec:	eef0 0a68 	vmov.f32	s1, s17
 80063f0:	ecbd 8b02 	vpop	{d8}
 80063f4:	bd38      	pop	{r3, r4, r5, pc}
 80063f6:	bf00      	nop
 80063f8:	3ff00000 	.word	0x3ff00000
 80063fc:	08007af5 	.word	0x08007af5

08006400 <sqrt>:
 8006400:	b538      	push	{r3, r4, r5, lr}
 8006402:	ed2d 8b02 	vpush	{d8}
 8006406:	ec55 4b10 	vmov	r4, r5, d0
 800640a:	f000 f889 	bl	8006520 <__ieee754_sqrt>
 800640e:	4622      	mov	r2, r4
 8006410:	462b      	mov	r3, r5
 8006412:	4620      	mov	r0, r4
 8006414:	4629      	mov	r1, r5
 8006416:	eeb0 8a40 	vmov.f32	s16, s0
 800641a:	eef0 8a60 	vmov.f32	s17, s1
 800641e:	f7fa fb7d 	bl	8000b1c <__aeabi_dcmpun>
 8006422:	b990      	cbnz	r0, 800644a <sqrt+0x4a>
 8006424:	2200      	movs	r2, #0
 8006426:	2300      	movs	r3, #0
 8006428:	4620      	mov	r0, r4
 800642a:	4629      	mov	r1, r5
 800642c:	f7fa fb4e 	bl	8000acc <__aeabi_dcmplt>
 8006430:	b158      	cbz	r0, 800644a <sqrt+0x4a>
 8006432:	f7ff f9e7 	bl	8005804 <__errno>
 8006436:	2321      	movs	r3, #33	@ 0x21
 8006438:	6003      	str	r3, [r0, #0]
 800643a:	2200      	movs	r2, #0
 800643c:	2300      	movs	r3, #0
 800643e:	4610      	mov	r0, r2
 8006440:	4619      	mov	r1, r3
 8006442:	f7fa f9fb 	bl	800083c <__aeabi_ddiv>
 8006446:	ec41 0b18 	vmov	d8, r0, r1
 800644a:	eeb0 0a48 	vmov.f32	s0, s16
 800644e:	eef0 0a68 	vmov.f32	s1, s17
 8006452:	ecbd 8b02 	vpop	{d8}
 8006456:	bd38      	pop	{r3, r4, r5, pc}

08006458 <fabs>:
 8006458:	ec51 0b10 	vmov	r0, r1, d0
 800645c:	4602      	mov	r2, r0
 800645e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006462:	ec43 2b10 	vmov	d0, r2, r3
 8006466:	4770      	bx	lr

08006468 <sin>:
 8006468:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800646a:	ec53 2b10 	vmov	r2, r3, d0
 800646e:	4826      	ldr	r0, [pc, #152]	@ (8006508 <sin+0xa0>)
 8006470:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006474:	4281      	cmp	r1, r0
 8006476:	d807      	bhi.n	8006488 <sin+0x20>
 8006478:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8006500 <sin+0x98>
 800647c:	2000      	movs	r0, #0
 800647e:	b005      	add	sp, #20
 8006480:	f85d eb04 	ldr.w	lr, [sp], #4
 8006484:	f000 b9f0 	b.w	8006868 <__kernel_sin>
 8006488:	4820      	ldr	r0, [pc, #128]	@ (800650c <sin+0xa4>)
 800648a:	4281      	cmp	r1, r0
 800648c:	d908      	bls.n	80064a0 <sin+0x38>
 800648e:	4610      	mov	r0, r2
 8006490:	4619      	mov	r1, r3
 8006492:	f7f9 fef1 	bl	8000278 <__aeabi_dsub>
 8006496:	ec41 0b10 	vmov	d0, r0, r1
 800649a:	b005      	add	sp, #20
 800649c:	f85d fb04 	ldr.w	pc, [sp], #4
 80064a0:	4668      	mov	r0, sp
 80064a2:	f000 fca1 	bl	8006de8 <__ieee754_rem_pio2>
 80064a6:	f000 0003 	and.w	r0, r0, #3
 80064aa:	2801      	cmp	r0, #1
 80064ac:	d00c      	beq.n	80064c8 <sin+0x60>
 80064ae:	2802      	cmp	r0, #2
 80064b0:	d011      	beq.n	80064d6 <sin+0x6e>
 80064b2:	b9e8      	cbnz	r0, 80064f0 <sin+0x88>
 80064b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80064b8:	ed9d 0b00 	vldr	d0, [sp]
 80064bc:	2001      	movs	r0, #1
 80064be:	f000 f9d3 	bl	8006868 <__kernel_sin>
 80064c2:	ec51 0b10 	vmov	r0, r1, d0
 80064c6:	e7e6      	b.n	8006496 <sin+0x2e>
 80064c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80064cc:	ed9d 0b00 	vldr	d0, [sp]
 80064d0:	f000 f902 	bl	80066d8 <__kernel_cos>
 80064d4:	e7f5      	b.n	80064c2 <sin+0x5a>
 80064d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80064da:	ed9d 0b00 	vldr	d0, [sp]
 80064de:	2001      	movs	r0, #1
 80064e0:	f000 f9c2 	bl	8006868 <__kernel_sin>
 80064e4:	ec53 2b10 	vmov	r2, r3, d0
 80064e8:	4610      	mov	r0, r2
 80064ea:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80064ee:	e7d2      	b.n	8006496 <sin+0x2e>
 80064f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80064f4:	ed9d 0b00 	vldr	d0, [sp]
 80064f8:	f000 f8ee 	bl	80066d8 <__kernel_cos>
 80064fc:	e7f2      	b.n	80064e4 <sin+0x7c>
 80064fe:	bf00      	nop
	...
 8006508:	3fe921fb 	.word	0x3fe921fb
 800650c:	7fefffff 	.word	0x7fefffff

08006510 <nan>:
 8006510:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006518 <nan+0x8>
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	00000000 	.word	0x00000000
 800651c:	7ff80000 	.word	0x7ff80000

08006520 <__ieee754_sqrt>:
 8006520:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006524:	4a68      	ldr	r2, [pc, #416]	@ (80066c8 <__ieee754_sqrt+0x1a8>)
 8006526:	ec55 4b10 	vmov	r4, r5, d0
 800652a:	43aa      	bics	r2, r5
 800652c:	462b      	mov	r3, r5
 800652e:	4621      	mov	r1, r4
 8006530:	d110      	bne.n	8006554 <__ieee754_sqrt+0x34>
 8006532:	4622      	mov	r2, r4
 8006534:	4620      	mov	r0, r4
 8006536:	4629      	mov	r1, r5
 8006538:	f7fa f856 	bl	80005e8 <__aeabi_dmul>
 800653c:	4602      	mov	r2, r0
 800653e:	460b      	mov	r3, r1
 8006540:	4620      	mov	r0, r4
 8006542:	4629      	mov	r1, r5
 8006544:	f7f9 fe9a 	bl	800027c <__adddf3>
 8006548:	4604      	mov	r4, r0
 800654a:	460d      	mov	r5, r1
 800654c:	ec45 4b10 	vmov	d0, r4, r5
 8006550:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006554:	2d00      	cmp	r5, #0
 8006556:	dc0e      	bgt.n	8006576 <__ieee754_sqrt+0x56>
 8006558:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800655c:	4322      	orrs	r2, r4
 800655e:	d0f5      	beq.n	800654c <__ieee754_sqrt+0x2c>
 8006560:	b19d      	cbz	r5, 800658a <__ieee754_sqrt+0x6a>
 8006562:	4622      	mov	r2, r4
 8006564:	4620      	mov	r0, r4
 8006566:	4629      	mov	r1, r5
 8006568:	f7f9 fe86 	bl	8000278 <__aeabi_dsub>
 800656c:	4602      	mov	r2, r0
 800656e:	460b      	mov	r3, r1
 8006570:	f7fa f964 	bl	800083c <__aeabi_ddiv>
 8006574:	e7e8      	b.n	8006548 <__ieee754_sqrt+0x28>
 8006576:	152a      	asrs	r2, r5, #20
 8006578:	d115      	bne.n	80065a6 <__ieee754_sqrt+0x86>
 800657a:	2000      	movs	r0, #0
 800657c:	e009      	b.n	8006592 <__ieee754_sqrt+0x72>
 800657e:	0acb      	lsrs	r3, r1, #11
 8006580:	3a15      	subs	r2, #21
 8006582:	0549      	lsls	r1, r1, #21
 8006584:	2b00      	cmp	r3, #0
 8006586:	d0fa      	beq.n	800657e <__ieee754_sqrt+0x5e>
 8006588:	e7f7      	b.n	800657a <__ieee754_sqrt+0x5a>
 800658a:	462a      	mov	r2, r5
 800658c:	e7fa      	b.n	8006584 <__ieee754_sqrt+0x64>
 800658e:	005b      	lsls	r3, r3, #1
 8006590:	3001      	adds	r0, #1
 8006592:	02dc      	lsls	r4, r3, #11
 8006594:	d5fb      	bpl.n	800658e <__ieee754_sqrt+0x6e>
 8006596:	1e44      	subs	r4, r0, #1
 8006598:	1b12      	subs	r2, r2, r4
 800659a:	f1c0 0420 	rsb	r4, r0, #32
 800659e:	fa21 f404 	lsr.w	r4, r1, r4
 80065a2:	4323      	orrs	r3, r4
 80065a4:	4081      	lsls	r1, r0
 80065a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065aa:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80065ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065b2:	07d2      	lsls	r2, r2, #31
 80065b4:	bf5c      	itt	pl
 80065b6:	005b      	lslpl	r3, r3, #1
 80065b8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80065bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80065c0:	bf58      	it	pl
 80065c2:	0049      	lslpl	r1, r1, #1
 80065c4:	2600      	movs	r6, #0
 80065c6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80065ca:	106d      	asrs	r5, r5, #1
 80065cc:	0049      	lsls	r1, r1, #1
 80065ce:	2016      	movs	r0, #22
 80065d0:	4632      	mov	r2, r6
 80065d2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80065d6:	1917      	adds	r7, r2, r4
 80065d8:	429f      	cmp	r7, r3
 80065da:	bfde      	ittt	le
 80065dc:	193a      	addle	r2, r7, r4
 80065de:	1bdb      	suble	r3, r3, r7
 80065e0:	1936      	addle	r6, r6, r4
 80065e2:	0fcf      	lsrs	r7, r1, #31
 80065e4:	3801      	subs	r0, #1
 80065e6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80065ea:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80065ee:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80065f2:	d1f0      	bne.n	80065d6 <__ieee754_sqrt+0xb6>
 80065f4:	4604      	mov	r4, r0
 80065f6:	2720      	movs	r7, #32
 80065f8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80065fc:	429a      	cmp	r2, r3
 80065fe:	eb00 0e0c 	add.w	lr, r0, ip
 8006602:	db02      	blt.n	800660a <__ieee754_sqrt+0xea>
 8006604:	d113      	bne.n	800662e <__ieee754_sqrt+0x10e>
 8006606:	458e      	cmp	lr, r1
 8006608:	d811      	bhi.n	800662e <__ieee754_sqrt+0x10e>
 800660a:	f1be 0f00 	cmp.w	lr, #0
 800660e:	eb0e 000c 	add.w	r0, lr, ip
 8006612:	da42      	bge.n	800669a <__ieee754_sqrt+0x17a>
 8006614:	2800      	cmp	r0, #0
 8006616:	db40      	blt.n	800669a <__ieee754_sqrt+0x17a>
 8006618:	f102 0801 	add.w	r8, r2, #1
 800661c:	1a9b      	subs	r3, r3, r2
 800661e:	458e      	cmp	lr, r1
 8006620:	bf88      	it	hi
 8006622:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006626:	eba1 010e 	sub.w	r1, r1, lr
 800662a:	4464      	add	r4, ip
 800662c:	4642      	mov	r2, r8
 800662e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8006632:	3f01      	subs	r7, #1
 8006634:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8006638:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800663c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006640:	d1dc      	bne.n	80065fc <__ieee754_sqrt+0xdc>
 8006642:	4319      	orrs	r1, r3
 8006644:	d01b      	beq.n	800667e <__ieee754_sqrt+0x15e>
 8006646:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80066cc <__ieee754_sqrt+0x1ac>
 800664a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80066d0 <__ieee754_sqrt+0x1b0>
 800664e:	e9da 0100 	ldrd	r0, r1, [sl]
 8006652:	e9db 2300 	ldrd	r2, r3, [fp]
 8006656:	f7f9 fe0f 	bl	8000278 <__aeabi_dsub>
 800665a:	e9da 8900 	ldrd	r8, r9, [sl]
 800665e:	4602      	mov	r2, r0
 8006660:	460b      	mov	r3, r1
 8006662:	4640      	mov	r0, r8
 8006664:	4649      	mov	r1, r9
 8006666:	f7fa fa3b 	bl	8000ae0 <__aeabi_dcmple>
 800666a:	b140      	cbz	r0, 800667e <__ieee754_sqrt+0x15e>
 800666c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006670:	e9da 0100 	ldrd	r0, r1, [sl]
 8006674:	e9db 2300 	ldrd	r2, r3, [fp]
 8006678:	d111      	bne.n	800669e <__ieee754_sqrt+0x17e>
 800667a:	3601      	adds	r6, #1
 800667c:	463c      	mov	r4, r7
 800667e:	1072      	asrs	r2, r6, #1
 8006680:	0863      	lsrs	r3, r4, #1
 8006682:	07f1      	lsls	r1, r6, #31
 8006684:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8006688:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800668c:	bf48      	it	mi
 800668e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8006692:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8006696:	4618      	mov	r0, r3
 8006698:	e756      	b.n	8006548 <__ieee754_sqrt+0x28>
 800669a:	4690      	mov	r8, r2
 800669c:	e7be      	b.n	800661c <__ieee754_sqrt+0xfc>
 800669e:	f7f9 fded 	bl	800027c <__adddf3>
 80066a2:	e9da 8900 	ldrd	r8, r9, [sl]
 80066a6:	4602      	mov	r2, r0
 80066a8:	460b      	mov	r3, r1
 80066aa:	4640      	mov	r0, r8
 80066ac:	4649      	mov	r1, r9
 80066ae:	f7fa fa0d 	bl	8000acc <__aeabi_dcmplt>
 80066b2:	b120      	cbz	r0, 80066be <__ieee754_sqrt+0x19e>
 80066b4:	1ca0      	adds	r0, r4, #2
 80066b6:	bf08      	it	eq
 80066b8:	3601      	addeq	r6, #1
 80066ba:	3402      	adds	r4, #2
 80066bc:	e7df      	b.n	800667e <__ieee754_sqrt+0x15e>
 80066be:	1c63      	adds	r3, r4, #1
 80066c0:	f023 0401 	bic.w	r4, r3, #1
 80066c4:	e7db      	b.n	800667e <__ieee754_sqrt+0x15e>
 80066c6:	bf00      	nop
 80066c8:	7ff00000 	.word	0x7ff00000
 80066cc:	20000080 	.word	0x20000080
 80066d0:	20000078 	.word	0x20000078
 80066d4:	00000000 	.word	0x00000000

080066d8 <__kernel_cos>:
 80066d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066dc:	ec57 6b10 	vmov	r6, r7, d0
 80066e0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80066e4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80066e8:	ed8d 1b00 	vstr	d1, [sp]
 80066ec:	d206      	bcs.n	80066fc <__kernel_cos+0x24>
 80066ee:	4630      	mov	r0, r6
 80066f0:	4639      	mov	r1, r7
 80066f2:	f7fa fa29 	bl	8000b48 <__aeabi_d2iz>
 80066f6:	2800      	cmp	r0, #0
 80066f8:	f000 8088 	beq.w	800680c <__kernel_cos+0x134>
 80066fc:	4632      	mov	r2, r6
 80066fe:	463b      	mov	r3, r7
 8006700:	4630      	mov	r0, r6
 8006702:	4639      	mov	r1, r7
 8006704:	f7f9 ff70 	bl	80005e8 <__aeabi_dmul>
 8006708:	4b51      	ldr	r3, [pc, #324]	@ (8006850 <__kernel_cos+0x178>)
 800670a:	2200      	movs	r2, #0
 800670c:	4604      	mov	r4, r0
 800670e:	460d      	mov	r5, r1
 8006710:	f7f9 ff6a 	bl	80005e8 <__aeabi_dmul>
 8006714:	a340      	add	r3, pc, #256	@ (adr r3, 8006818 <__kernel_cos+0x140>)
 8006716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671a:	4682      	mov	sl, r0
 800671c:	468b      	mov	fp, r1
 800671e:	4620      	mov	r0, r4
 8006720:	4629      	mov	r1, r5
 8006722:	f7f9 ff61 	bl	80005e8 <__aeabi_dmul>
 8006726:	a33e      	add	r3, pc, #248	@ (adr r3, 8006820 <__kernel_cos+0x148>)
 8006728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672c:	f7f9 fda6 	bl	800027c <__adddf3>
 8006730:	4622      	mov	r2, r4
 8006732:	462b      	mov	r3, r5
 8006734:	f7f9 ff58 	bl	80005e8 <__aeabi_dmul>
 8006738:	a33b      	add	r3, pc, #236	@ (adr r3, 8006828 <__kernel_cos+0x150>)
 800673a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673e:	f7f9 fd9b 	bl	8000278 <__aeabi_dsub>
 8006742:	4622      	mov	r2, r4
 8006744:	462b      	mov	r3, r5
 8006746:	f7f9 ff4f 	bl	80005e8 <__aeabi_dmul>
 800674a:	a339      	add	r3, pc, #228	@ (adr r3, 8006830 <__kernel_cos+0x158>)
 800674c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006750:	f7f9 fd94 	bl	800027c <__adddf3>
 8006754:	4622      	mov	r2, r4
 8006756:	462b      	mov	r3, r5
 8006758:	f7f9 ff46 	bl	80005e8 <__aeabi_dmul>
 800675c:	a336      	add	r3, pc, #216	@ (adr r3, 8006838 <__kernel_cos+0x160>)
 800675e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006762:	f7f9 fd89 	bl	8000278 <__aeabi_dsub>
 8006766:	4622      	mov	r2, r4
 8006768:	462b      	mov	r3, r5
 800676a:	f7f9 ff3d 	bl	80005e8 <__aeabi_dmul>
 800676e:	a334      	add	r3, pc, #208	@ (adr r3, 8006840 <__kernel_cos+0x168>)
 8006770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006774:	f7f9 fd82 	bl	800027c <__adddf3>
 8006778:	4622      	mov	r2, r4
 800677a:	462b      	mov	r3, r5
 800677c:	f7f9 ff34 	bl	80005e8 <__aeabi_dmul>
 8006780:	4622      	mov	r2, r4
 8006782:	462b      	mov	r3, r5
 8006784:	f7f9 ff30 	bl	80005e8 <__aeabi_dmul>
 8006788:	e9dd 2300 	ldrd	r2, r3, [sp]
 800678c:	4604      	mov	r4, r0
 800678e:	460d      	mov	r5, r1
 8006790:	4630      	mov	r0, r6
 8006792:	4639      	mov	r1, r7
 8006794:	f7f9 ff28 	bl	80005e8 <__aeabi_dmul>
 8006798:	460b      	mov	r3, r1
 800679a:	4602      	mov	r2, r0
 800679c:	4629      	mov	r1, r5
 800679e:	4620      	mov	r0, r4
 80067a0:	f7f9 fd6a 	bl	8000278 <__aeabi_dsub>
 80067a4:	4b2b      	ldr	r3, [pc, #172]	@ (8006854 <__kernel_cos+0x17c>)
 80067a6:	4598      	cmp	r8, r3
 80067a8:	4606      	mov	r6, r0
 80067aa:	460f      	mov	r7, r1
 80067ac:	d810      	bhi.n	80067d0 <__kernel_cos+0xf8>
 80067ae:	4602      	mov	r2, r0
 80067b0:	460b      	mov	r3, r1
 80067b2:	4650      	mov	r0, sl
 80067b4:	4659      	mov	r1, fp
 80067b6:	f7f9 fd5f 	bl	8000278 <__aeabi_dsub>
 80067ba:	460b      	mov	r3, r1
 80067bc:	4926      	ldr	r1, [pc, #152]	@ (8006858 <__kernel_cos+0x180>)
 80067be:	4602      	mov	r2, r0
 80067c0:	2000      	movs	r0, #0
 80067c2:	f7f9 fd59 	bl	8000278 <__aeabi_dsub>
 80067c6:	ec41 0b10 	vmov	d0, r0, r1
 80067ca:	b003      	add	sp, #12
 80067cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067d0:	4b22      	ldr	r3, [pc, #136]	@ (800685c <__kernel_cos+0x184>)
 80067d2:	4921      	ldr	r1, [pc, #132]	@ (8006858 <__kernel_cos+0x180>)
 80067d4:	4598      	cmp	r8, r3
 80067d6:	bf8c      	ite	hi
 80067d8:	4d21      	ldrhi	r5, [pc, #132]	@ (8006860 <__kernel_cos+0x188>)
 80067da:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80067de:	2400      	movs	r4, #0
 80067e0:	4622      	mov	r2, r4
 80067e2:	462b      	mov	r3, r5
 80067e4:	2000      	movs	r0, #0
 80067e6:	f7f9 fd47 	bl	8000278 <__aeabi_dsub>
 80067ea:	4622      	mov	r2, r4
 80067ec:	4680      	mov	r8, r0
 80067ee:	4689      	mov	r9, r1
 80067f0:	462b      	mov	r3, r5
 80067f2:	4650      	mov	r0, sl
 80067f4:	4659      	mov	r1, fp
 80067f6:	f7f9 fd3f 	bl	8000278 <__aeabi_dsub>
 80067fa:	4632      	mov	r2, r6
 80067fc:	463b      	mov	r3, r7
 80067fe:	f7f9 fd3b 	bl	8000278 <__aeabi_dsub>
 8006802:	4602      	mov	r2, r0
 8006804:	460b      	mov	r3, r1
 8006806:	4640      	mov	r0, r8
 8006808:	4649      	mov	r1, r9
 800680a:	e7da      	b.n	80067c2 <__kernel_cos+0xea>
 800680c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8006848 <__kernel_cos+0x170>
 8006810:	e7db      	b.n	80067ca <__kernel_cos+0xf2>
 8006812:	bf00      	nop
 8006814:	f3af 8000 	nop.w
 8006818:	be8838d4 	.word	0xbe8838d4
 800681c:	bda8fae9 	.word	0xbda8fae9
 8006820:	bdb4b1c4 	.word	0xbdb4b1c4
 8006824:	3e21ee9e 	.word	0x3e21ee9e
 8006828:	809c52ad 	.word	0x809c52ad
 800682c:	3e927e4f 	.word	0x3e927e4f
 8006830:	19cb1590 	.word	0x19cb1590
 8006834:	3efa01a0 	.word	0x3efa01a0
 8006838:	16c15177 	.word	0x16c15177
 800683c:	3f56c16c 	.word	0x3f56c16c
 8006840:	5555554c 	.word	0x5555554c
 8006844:	3fa55555 	.word	0x3fa55555
 8006848:	00000000 	.word	0x00000000
 800684c:	3ff00000 	.word	0x3ff00000
 8006850:	3fe00000 	.word	0x3fe00000
 8006854:	3fd33332 	.word	0x3fd33332
 8006858:	3ff00000 	.word	0x3ff00000
 800685c:	3fe90000 	.word	0x3fe90000
 8006860:	3fd20000 	.word	0x3fd20000
 8006864:	00000000 	.word	0x00000000

08006868 <__kernel_sin>:
 8006868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800686c:	ec55 4b10 	vmov	r4, r5, d0
 8006870:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006874:	b085      	sub	sp, #20
 8006876:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800687a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800687e:	4680      	mov	r8, r0
 8006880:	d205      	bcs.n	800688e <__kernel_sin+0x26>
 8006882:	4620      	mov	r0, r4
 8006884:	4629      	mov	r1, r5
 8006886:	f7fa f95f 	bl	8000b48 <__aeabi_d2iz>
 800688a:	2800      	cmp	r0, #0
 800688c:	d052      	beq.n	8006934 <__kernel_sin+0xcc>
 800688e:	4622      	mov	r2, r4
 8006890:	462b      	mov	r3, r5
 8006892:	4620      	mov	r0, r4
 8006894:	4629      	mov	r1, r5
 8006896:	f7f9 fea7 	bl	80005e8 <__aeabi_dmul>
 800689a:	4682      	mov	sl, r0
 800689c:	468b      	mov	fp, r1
 800689e:	4602      	mov	r2, r0
 80068a0:	460b      	mov	r3, r1
 80068a2:	4620      	mov	r0, r4
 80068a4:	4629      	mov	r1, r5
 80068a6:	f7f9 fe9f 	bl	80005e8 <__aeabi_dmul>
 80068aa:	a342      	add	r3, pc, #264	@ (adr r3, 80069b4 <__kernel_sin+0x14c>)
 80068ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b0:	e9cd 0100 	strd	r0, r1, [sp]
 80068b4:	4650      	mov	r0, sl
 80068b6:	4659      	mov	r1, fp
 80068b8:	f7f9 fe96 	bl	80005e8 <__aeabi_dmul>
 80068bc:	a33f      	add	r3, pc, #252	@ (adr r3, 80069bc <__kernel_sin+0x154>)
 80068be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c2:	f7f9 fcd9 	bl	8000278 <__aeabi_dsub>
 80068c6:	4652      	mov	r2, sl
 80068c8:	465b      	mov	r3, fp
 80068ca:	f7f9 fe8d 	bl	80005e8 <__aeabi_dmul>
 80068ce:	a33d      	add	r3, pc, #244	@ (adr r3, 80069c4 <__kernel_sin+0x15c>)
 80068d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d4:	f7f9 fcd2 	bl	800027c <__adddf3>
 80068d8:	4652      	mov	r2, sl
 80068da:	465b      	mov	r3, fp
 80068dc:	f7f9 fe84 	bl	80005e8 <__aeabi_dmul>
 80068e0:	a33a      	add	r3, pc, #232	@ (adr r3, 80069cc <__kernel_sin+0x164>)
 80068e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e6:	f7f9 fcc7 	bl	8000278 <__aeabi_dsub>
 80068ea:	4652      	mov	r2, sl
 80068ec:	465b      	mov	r3, fp
 80068ee:	f7f9 fe7b 	bl	80005e8 <__aeabi_dmul>
 80068f2:	a338      	add	r3, pc, #224	@ (adr r3, 80069d4 <__kernel_sin+0x16c>)
 80068f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f8:	f7f9 fcc0 	bl	800027c <__adddf3>
 80068fc:	4606      	mov	r6, r0
 80068fe:	460f      	mov	r7, r1
 8006900:	f1b8 0f00 	cmp.w	r8, #0
 8006904:	d11b      	bne.n	800693e <__kernel_sin+0xd6>
 8006906:	4602      	mov	r2, r0
 8006908:	460b      	mov	r3, r1
 800690a:	4650      	mov	r0, sl
 800690c:	4659      	mov	r1, fp
 800690e:	f7f9 fe6b 	bl	80005e8 <__aeabi_dmul>
 8006912:	a325      	add	r3, pc, #148	@ (adr r3, 80069a8 <__kernel_sin+0x140>)
 8006914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006918:	f7f9 fcae 	bl	8000278 <__aeabi_dsub>
 800691c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006920:	f7f9 fe62 	bl	80005e8 <__aeabi_dmul>
 8006924:	4602      	mov	r2, r0
 8006926:	460b      	mov	r3, r1
 8006928:	4620      	mov	r0, r4
 800692a:	4629      	mov	r1, r5
 800692c:	f7f9 fca6 	bl	800027c <__adddf3>
 8006930:	4604      	mov	r4, r0
 8006932:	460d      	mov	r5, r1
 8006934:	ec45 4b10 	vmov	d0, r4, r5
 8006938:	b005      	add	sp, #20
 800693a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800693e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006942:	4b1b      	ldr	r3, [pc, #108]	@ (80069b0 <__kernel_sin+0x148>)
 8006944:	2200      	movs	r2, #0
 8006946:	f7f9 fe4f 	bl	80005e8 <__aeabi_dmul>
 800694a:	4632      	mov	r2, r6
 800694c:	4680      	mov	r8, r0
 800694e:	4689      	mov	r9, r1
 8006950:	463b      	mov	r3, r7
 8006952:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006956:	f7f9 fe47 	bl	80005e8 <__aeabi_dmul>
 800695a:	4602      	mov	r2, r0
 800695c:	460b      	mov	r3, r1
 800695e:	4640      	mov	r0, r8
 8006960:	4649      	mov	r1, r9
 8006962:	f7f9 fc89 	bl	8000278 <__aeabi_dsub>
 8006966:	4652      	mov	r2, sl
 8006968:	465b      	mov	r3, fp
 800696a:	f7f9 fe3d 	bl	80005e8 <__aeabi_dmul>
 800696e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006972:	f7f9 fc81 	bl	8000278 <__aeabi_dsub>
 8006976:	a30c      	add	r3, pc, #48	@ (adr r3, 80069a8 <__kernel_sin+0x140>)
 8006978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697c:	4606      	mov	r6, r0
 800697e:	460f      	mov	r7, r1
 8006980:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006984:	f7f9 fe30 	bl	80005e8 <__aeabi_dmul>
 8006988:	4602      	mov	r2, r0
 800698a:	460b      	mov	r3, r1
 800698c:	4630      	mov	r0, r6
 800698e:	4639      	mov	r1, r7
 8006990:	f7f9 fc74 	bl	800027c <__adddf3>
 8006994:	4602      	mov	r2, r0
 8006996:	460b      	mov	r3, r1
 8006998:	4620      	mov	r0, r4
 800699a:	4629      	mov	r1, r5
 800699c:	f7f9 fc6c 	bl	8000278 <__aeabi_dsub>
 80069a0:	e7c6      	b.n	8006930 <__kernel_sin+0xc8>
 80069a2:	bf00      	nop
 80069a4:	f3af 8000 	nop.w
 80069a8:	55555549 	.word	0x55555549
 80069ac:	3fc55555 	.word	0x3fc55555
 80069b0:	3fe00000 	.word	0x3fe00000
 80069b4:	5acfd57c 	.word	0x5acfd57c
 80069b8:	3de5d93a 	.word	0x3de5d93a
 80069bc:	8a2b9ceb 	.word	0x8a2b9ceb
 80069c0:	3e5ae5e6 	.word	0x3e5ae5e6
 80069c4:	57b1fe7d 	.word	0x57b1fe7d
 80069c8:	3ec71de3 	.word	0x3ec71de3
 80069cc:	19c161d5 	.word	0x19c161d5
 80069d0:	3f2a01a0 	.word	0x3f2a01a0
 80069d4:	1110f8a6 	.word	0x1110f8a6
 80069d8:	3f811111 	.word	0x3f811111
 80069dc:	00000000 	.word	0x00000000

080069e0 <__ieee754_asin>:
 80069e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e4:	ec55 4b10 	vmov	r4, r5, d0
 80069e8:	4bc7      	ldr	r3, [pc, #796]	@ (8006d08 <__ieee754_asin+0x328>)
 80069ea:	b087      	sub	sp, #28
 80069ec:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80069f0:	429e      	cmp	r6, r3
 80069f2:	9501      	str	r5, [sp, #4]
 80069f4:	d92d      	bls.n	8006a52 <__ieee754_asin+0x72>
 80069f6:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 80069fa:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 80069fe:	4326      	orrs	r6, r4
 8006a00:	d116      	bne.n	8006a30 <__ieee754_asin+0x50>
 8006a02:	a3a7      	add	r3, pc, #668	@ (adr r3, 8006ca0 <__ieee754_asin+0x2c0>)
 8006a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a08:	4620      	mov	r0, r4
 8006a0a:	4629      	mov	r1, r5
 8006a0c:	f7f9 fdec 	bl	80005e8 <__aeabi_dmul>
 8006a10:	a3a5      	add	r3, pc, #660	@ (adr r3, 8006ca8 <__ieee754_asin+0x2c8>)
 8006a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a16:	4606      	mov	r6, r0
 8006a18:	460f      	mov	r7, r1
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	4629      	mov	r1, r5
 8006a1e:	f7f9 fde3 	bl	80005e8 <__aeabi_dmul>
 8006a22:	4602      	mov	r2, r0
 8006a24:	460b      	mov	r3, r1
 8006a26:	4630      	mov	r0, r6
 8006a28:	4639      	mov	r1, r7
 8006a2a:	f7f9 fc27 	bl	800027c <__adddf3>
 8006a2e:	e009      	b.n	8006a44 <__ieee754_asin+0x64>
 8006a30:	4622      	mov	r2, r4
 8006a32:	462b      	mov	r3, r5
 8006a34:	4620      	mov	r0, r4
 8006a36:	4629      	mov	r1, r5
 8006a38:	f7f9 fc1e 	bl	8000278 <__aeabi_dsub>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	f7f9 fefc 	bl	800083c <__aeabi_ddiv>
 8006a44:	4604      	mov	r4, r0
 8006a46:	460d      	mov	r5, r1
 8006a48:	ec45 4b10 	vmov	d0, r4, r5
 8006a4c:	b007      	add	sp, #28
 8006a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a52:	4bae      	ldr	r3, [pc, #696]	@ (8006d0c <__ieee754_asin+0x32c>)
 8006a54:	429e      	cmp	r6, r3
 8006a56:	d810      	bhi.n	8006a7a <__ieee754_asin+0x9a>
 8006a58:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8006a5c:	f080 80ad 	bcs.w	8006bba <__ieee754_asin+0x1da>
 8006a60:	a393      	add	r3, pc, #588	@ (adr r3, 8006cb0 <__ieee754_asin+0x2d0>)
 8006a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a66:	4620      	mov	r0, r4
 8006a68:	4629      	mov	r1, r5
 8006a6a:	f7f9 fc07 	bl	800027c <__adddf3>
 8006a6e:	4ba8      	ldr	r3, [pc, #672]	@ (8006d10 <__ieee754_asin+0x330>)
 8006a70:	2200      	movs	r2, #0
 8006a72:	f7fa f849 	bl	8000b08 <__aeabi_dcmpgt>
 8006a76:	2800      	cmp	r0, #0
 8006a78:	d1e6      	bne.n	8006a48 <__ieee754_asin+0x68>
 8006a7a:	ec45 4b10 	vmov	d0, r4, r5
 8006a7e:	f7ff fceb 	bl	8006458 <fabs>
 8006a82:	49a3      	ldr	r1, [pc, #652]	@ (8006d10 <__ieee754_asin+0x330>)
 8006a84:	ec53 2b10 	vmov	r2, r3, d0
 8006a88:	2000      	movs	r0, #0
 8006a8a:	f7f9 fbf5 	bl	8000278 <__aeabi_dsub>
 8006a8e:	4ba1      	ldr	r3, [pc, #644]	@ (8006d14 <__ieee754_asin+0x334>)
 8006a90:	2200      	movs	r2, #0
 8006a92:	f7f9 fda9 	bl	80005e8 <__aeabi_dmul>
 8006a96:	a388      	add	r3, pc, #544	@ (adr r3, 8006cb8 <__ieee754_asin+0x2d8>)
 8006a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9c:	4604      	mov	r4, r0
 8006a9e:	460d      	mov	r5, r1
 8006aa0:	f7f9 fda2 	bl	80005e8 <__aeabi_dmul>
 8006aa4:	a386      	add	r3, pc, #536	@ (adr r3, 8006cc0 <__ieee754_asin+0x2e0>)
 8006aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aaa:	f7f9 fbe7 	bl	800027c <__adddf3>
 8006aae:	4622      	mov	r2, r4
 8006ab0:	462b      	mov	r3, r5
 8006ab2:	f7f9 fd99 	bl	80005e8 <__aeabi_dmul>
 8006ab6:	a384      	add	r3, pc, #528	@ (adr r3, 8006cc8 <__ieee754_asin+0x2e8>)
 8006ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abc:	f7f9 fbdc 	bl	8000278 <__aeabi_dsub>
 8006ac0:	4622      	mov	r2, r4
 8006ac2:	462b      	mov	r3, r5
 8006ac4:	f7f9 fd90 	bl	80005e8 <__aeabi_dmul>
 8006ac8:	a381      	add	r3, pc, #516	@ (adr r3, 8006cd0 <__ieee754_asin+0x2f0>)
 8006aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ace:	f7f9 fbd5 	bl	800027c <__adddf3>
 8006ad2:	4622      	mov	r2, r4
 8006ad4:	462b      	mov	r3, r5
 8006ad6:	f7f9 fd87 	bl	80005e8 <__aeabi_dmul>
 8006ada:	a37f      	add	r3, pc, #508	@ (adr r3, 8006cd8 <__ieee754_asin+0x2f8>)
 8006adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae0:	f7f9 fbca 	bl	8000278 <__aeabi_dsub>
 8006ae4:	4622      	mov	r2, r4
 8006ae6:	462b      	mov	r3, r5
 8006ae8:	f7f9 fd7e 	bl	80005e8 <__aeabi_dmul>
 8006aec:	a37c      	add	r3, pc, #496	@ (adr r3, 8006ce0 <__ieee754_asin+0x300>)
 8006aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af2:	f7f9 fbc3 	bl	800027c <__adddf3>
 8006af6:	4622      	mov	r2, r4
 8006af8:	462b      	mov	r3, r5
 8006afa:	f7f9 fd75 	bl	80005e8 <__aeabi_dmul>
 8006afe:	a37a      	add	r3, pc, #488	@ (adr r3, 8006ce8 <__ieee754_asin+0x308>)
 8006b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b08:	4620      	mov	r0, r4
 8006b0a:	4629      	mov	r1, r5
 8006b0c:	f7f9 fd6c 	bl	80005e8 <__aeabi_dmul>
 8006b10:	a377      	add	r3, pc, #476	@ (adr r3, 8006cf0 <__ieee754_asin+0x310>)
 8006b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b16:	f7f9 fbaf 	bl	8000278 <__aeabi_dsub>
 8006b1a:	4622      	mov	r2, r4
 8006b1c:	462b      	mov	r3, r5
 8006b1e:	f7f9 fd63 	bl	80005e8 <__aeabi_dmul>
 8006b22:	a375      	add	r3, pc, #468	@ (adr r3, 8006cf8 <__ieee754_asin+0x318>)
 8006b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b28:	f7f9 fba8 	bl	800027c <__adddf3>
 8006b2c:	4622      	mov	r2, r4
 8006b2e:	462b      	mov	r3, r5
 8006b30:	f7f9 fd5a 	bl	80005e8 <__aeabi_dmul>
 8006b34:	a372      	add	r3, pc, #456	@ (adr r3, 8006d00 <__ieee754_asin+0x320>)
 8006b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3a:	f7f9 fb9d 	bl	8000278 <__aeabi_dsub>
 8006b3e:	4622      	mov	r2, r4
 8006b40:	462b      	mov	r3, r5
 8006b42:	f7f9 fd51 	bl	80005e8 <__aeabi_dmul>
 8006b46:	4b72      	ldr	r3, [pc, #456]	@ (8006d10 <__ieee754_asin+0x330>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f7f9 fb97 	bl	800027c <__adddf3>
 8006b4e:	ec45 4b10 	vmov	d0, r4, r5
 8006b52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b56:	f7ff fce3 	bl	8006520 <__ieee754_sqrt>
 8006b5a:	4b6f      	ldr	r3, [pc, #444]	@ (8006d18 <__ieee754_asin+0x338>)
 8006b5c:	429e      	cmp	r6, r3
 8006b5e:	ec5b ab10 	vmov	sl, fp, d0
 8006b62:	f240 80db 	bls.w	8006d1c <__ieee754_asin+0x33c>
 8006b66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b6e:	f7f9 fe65 	bl	800083c <__aeabi_ddiv>
 8006b72:	4652      	mov	r2, sl
 8006b74:	465b      	mov	r3, fp
 8006b76:	f7f9 fd37 	bl	80005e8 <__aeabi_dmul>
 8006b7a:	4652      	mov	r2, sl
 8006b7c:	465b      	mov	r3, fp
 8006b7e:	f7f9 fb7d 	bl	800027c <__adddf3>
 8006b82:	4602      	mov	r2, r0
 8006b84:	460b      	mov	r3, r1
 8006b86:	f7f9 fb79 	bl	800027c <__adddf3>
 8006b8a:	a347      	add	r3, pc, #284	@ (adr r3, 8006ca8 <__ieee754_asin+0x2c8>)
 8006b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b90:	f7f9 fb72 	bl	8000278 <__aeabi_dsub>
 8006b94:	4602      	mov	r2, r0
 8006b96:	460b      	mov	r3, r1
 8006b98:	a141      	add	r1, pc, #260	@ (adr r1, 8006ca0 <__ieee754_asin+0x2c0>)
 8006b9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b9e:	f7f9 fb6b 	bl	8000278 <__aeabi_dsub>
 8006ba2:	9b01      	ldr	r3, [sp, #4]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	bfdc      	itt	le
 8006ba8:	4602      	movle	r2, r0
 8006baa:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 8006bae:	4604      	mov	r4, r0
 8006bb0:	460d      	mov	r5, r1
 8006bb2:	bfdc      	itt	le
 8006bb4:	4614      	movle	r4, r2
 8006bb6:	461d      	movle	r5, r3
 8006bb8:	e746      	b.n	8006a48 <__ieee754_asin+0x68>
 8006bba:	4622      	mov	r2, r4
 8006bbc:	462b      	mov	r3, r5
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	4629      	mov	r1, r5
 8006bc2:	f7f9 fd11 	bl	80005e8 <__aeabi_dmul>
 8006bc6:	a33c      	add	r3, pc, #240	@ (adr r3, 8006cb8 <__ieee754_asin+0x2d8>)
 8006bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bcc:	4606      	mov	r6, r0
 8006bce:	460f      	mov	r7, r1
 8006bd0:	f7f9 fd0a 	bl	80005e8 <__aeabi_dmul>
 8006bd4:	a33a      	add	r3, pc, #232	@ (adr r3, 8006cc0 <__ieee754_asin+0x2e0>)
 8006bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bda:	f7f9 fb4f 	bl	800027c <__adddf3>
 8006bde:	4632      	mov	r2, r6
 8006be0:	463b      	mov	r3, r7
 8006be2:	f7f9 fd01 	bl	80005e8 <__aeabi_dmul>
 8006be6:	a338      	add	r3, pc, #224	@ (adr r3, 8006cc8 <__ieee754_asin+0x2e8>)
 8006be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bec:	f7f9 fb44 	bl	8000278 <__aeabi_dsub>
 8006bf0:	4632      	mov	r2, r6
 8006bf2:	463b      	mov	r3, r7
 8006bf4:	f7f9 fcf8 	bl	80005e8 <__aeabi_dmul>
 8006bf8:	a335      	add	r3, pc, #212	@ (adr r3, 8006cd0 <__ieee754_asin+0x2f0>)
 8006bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfe:	f7f9 fb3d 	bl	800027c <__adddf3>
 8006c02:	4632      	mov	r2, r6
 8006c04:	463b      	mov	r3, r7
 8006c06:	f7f9 fcef 	bl	80005e8 <__aeabi_dmul>
 8006c0a:	a333      	add	r3, pc, #204	@ (adr r3, 8006cd8 <__ieee754_asin+0x2f8>)
 8006c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c10:	f7f9 fb32 	bl	8000278 <__aeabi_dsub>
 8006c14:	4632      	mov	r2, r6
 8006c16:	463b      	mov	r3, r7
 8006c18:	f7f9 fce6 	bl	80005e8 <__aeabi_dmul>
 8006c1c:	a330      	add	r3, pc, #192	@ (adr r3, 8006ce0 <__ieee754_asin+0x300>)
 8006c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c22:	f7f9 fb2b 	bl	800027c <__adddf3>
 8006c26:	4632      	mov	r2, r6
 8006c28:	463b      	mov	r3, r7
 8006c2a:	f7f9 fcdd 	bl	80005e8 <__aeabi_dmul>
 8006c2e:	a32e      	add	r3, pc, #184	@ (adr r3, 8006ce8 <__ieee754_asin+0x308>)
 8006c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c34:	4680      	mov	r8, r0
 8006c36:	4689      	mov	r9, r1
 8006c38:	4630      	mov	r0, r6
 8006c3a:	4639      	mov	r1, r7
 8006c3c:	f7f9 fcd4 	bl	80005e8 <__aeabi_dmul>
 8006c40:	a32b      	add	r3, pc, #172	@ (adr r3, 8006cf0 <__ieee754_asin+0x310>)
 8006c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c46:	f7f9 fb17 	bl	8000278 <__aeabi_dsub>
 8006c4a:	4632      	mov	r2, r6
 8006c4c:	463b      	mov	r3, r7
 8006c4e:	f7f9 fccb 	bl	80005e8 <__aeabi_dmul>
 8006c52:	a329      	add	r3, pc, #164	@ (adr r3, 8006cf8 <__ieee754_asin+0x318>)
 8006c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c58:	f7f9 fb10 	bl	800027c <__adddf3>
 8006c5c:	4632      	mov	r2, r6
 8006c5e:	463b      	mov	r3, r7
 8006c60:	f7f9 fcc2 	bl	80005e8 <__aeabi_dmul>
 8006c64:	a326      	add	r3, pc, #152	@ (adr r3, 8006d00 <__ieee754_asin+0x320>)
 8006c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6a:	f7f9 fb05 	bl	8000278 <__aeabi_dsub>
 8006c6e:	4632      	mov	r2, r6
 8006c70:	463b      	mov	r3, r7
 8006c72:	f7f9 fcb9 	bl	80005e8 <__aeabi_dmul>
 8006c76:	4b26      	ldr	r3, [pc, #152]	@ (8006d10 <__ieee754_asin+0x330>)
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f7f9 faff 	bl	800027c <__adddf3>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	460b      	mov	r3, r1
 8006c82:	4640      	mov	r0, r8
 8006c84:	4649      	mov	r1, r9
 8006c86:	f7f9 fdd9 	bl	800083c <__aeabi_ddiv>
 8006c8a:	4622      	mov	r2, r4
 8006c8c:	462b      	mov	r3, r5
 8006c8e:	f7f9 fcab 	bl	80005e8 <__aeabi_dmul>
 8006c92:	4602      	mov	r2, r0
 8006c94:	460b      	mov	r3, r1
 8006c96:	4620      	mov	r0, r4
 8006c98:	4629      	mov	r1, r5
 8006c9a:	e6c6      	b.n	8006a2a <__ieee754_asin+0x4a>
 8006c9c:	f3af 8000 	nop.w
 8006ca0:	54442d18 	.word	0x54442d18
 8006ca4:	3ff921fb 	.word	0x3ff921fb
 8006ca8:	33145c07 	.word	0x33145c07
 8006cac:	3c91a626 	.word	0x3c91a626
 8006cb0:	8800759c 	.word	0x8800759c
 8006cb4:	7e37e43c 	.word	0x7e37e43c
 8006cb8:	0dfdf709 	.word	0x0dfdf709
 8006cbc:	3f023de1 	.word	0x3f023de1
 8006cc0:	7501b288 	.word	0x7501b288
 8006cc4:	3f49efe0 	.word	0x3f49efe0
 8006cc8:	b5688f3b 	.word	0xb5688f3b
 8006ccc:	3fa48228 	.word	0x3fa48228
 8006cd0:	0e884455 	.word	0x0e884455
 8006cd4:	3fc9c155 	.word	0x3fc9c155
 8006cd8:	03eb6f7d 	.word	0x03eb6f7d
 8006cdc:	3fd4d612 	.word	0x3fd4d612
 8006ce0:	55555555 	.word	0x55555555
 8006ce4:	3fc55555 	.word	0x3fc55555
 8006ce8:	b12e9282 	.word	0xb12e9282
 8006cec:	3fb3b8c5 	.word	0x3fb3b8c5
 8006cf0:	1b8d0159 	.word	0x1b8d0159
 8006cf4:	3fe6066c 	.word	0x3fe6066c
 8006cf8:	9c598ac8 	.word	0x9c598ac8
 8006cfc:	40002ae5 	.word	0x40002ae5
 8006d00:	1c8a2d4b 	.word	0x1c8a2d4b
 8006d04:	40033a27 	.word	0x40033a27
 8006d08:	3fefffff 	.word	0x3fefffff
 8006d0c:	3fdfffff 	.word	0x3fdfffff
 8006d10:	3ff00000 	.word	0x3ff00000
 8006d14:	3fe00000 	.word	0x3fe00000
 8006d18:	3fef3332 	.word	0x3fef3332
 8006d1c:	4652      	mov	r2, sl
 8006d1e:	465b      	mov	r3, fp
 8006d20:	4650      	mov	r0, sl
 8006d22:	4659      	mov	r1, fp
 8006d24:	f7f9 faaa 	bl	800027c <__adddf3>
 8006d28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d2c:	4606      	mov	r6, r0
 8006d2e:	460f      	mov	r7, r1
 8006d30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d34:	f7f9 fd82 	bl	800083c <__aeabi_ddiv>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	4630      	mov	r0, r6
 8006d3e:	4639      	mov	r1, r7
 8006d40:	f7f9 fc52 	bl	80005e8 <__aeabi_dmul>
 8006d44:	f04f 0800 	mov.w	r8, #0
 8006d48:	4606      	mov	r6, r0
 8006d4a:	460f      	mov	r7, r1
 8006d4c:	4642      	mov	r2, r8
 8006d4e:	465b      	mov	r3, fp
 8006d50:	4640      	mov	r0, r8
 8006d52:	4659      	mov	r1, fp
 8006d54:	f7f9 fc48 	bl	80005e8 <__aeabi_dmul>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	4629      	mov	r1, r5
 8006d60:	f7f9 fa8a 	bl	8000278 <__aeabi_dsub>
 8006d64:	4642      	mov	r2, r8
 8006d66:	4604      	mov	r4, r0
 8006d68:	460d      	mov	r5, r1
 8006d6a:	465b      	mov	r3, fp
 8006d6c:	4650      	mov	r0, sl
 8006d6e:	4659      	mov	r1, fp
 8006d70:	f7f9 fa84 	bl	800027c <__adddf3>
 8006d74:	4602      	mov	r2, r0
 8006d76:	460b      	mov	r3, r1
 8006d78:	4620      	mov	r0, r4
 8006d7a:	4629      	mov	r1, r5
 8006d7c:	f7f9 fd5e 	bl	800083c <__aeabi_ddiv>
 8006d80:	4602      	mov	r2, r0
 8006d82:	460b      	mov	r3, r1
 8006d84:	f7f9 fa7a 	bl	800027c <__adddf3>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	a112      	add	r1, pc, #72	@ (adr r1, 8006dd8 <__ieee754_asin+0x3f8>)
 8006d8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d92:	f7f9 fa71 	bl	8000278 <__aeabi_dsub>
 8006d96:	4602      	mov	r2, r0
 8006d98:	460b      	mov	r3, r1
 8006d9a:	4630      	mov	r0, r6
 8006d9c:	4639      	mov	r1, r7
 8006d9e:	f7f9 fa6b 	bl	8000278 <__aeabi_dsub>
 8006da2:	4642      	mov	r2, r8
 8006da4:	4604      	mov	r4, r0
 8006da6:	460d      	mov	r5, r1
 8006da8:	465b      	mov	r3, fp
 8006daa:	4640      	mov	r0, r8
 8006dac:	4659      	mov	r1, fp
 8006dae:	f7f9 fa65 	bl	800027c <__adddf3>
 8006db2:	4602      	mov	r2, r0
 8006db4:	460b      	mov	r3, r1
 8006db6:	a10a      	add	r1, pc, #40	@ (adr r1, 8006de0 <__ieee754_asin+0x400>)
 8006db8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006dbc:	f7f9 fa5c 	bl	8000278 <__aeabi_dsub>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	4629      	mov	r1, r5
 8006dc8:	f7f9 fa56 	bl	8000278 <__aeabi_dsub>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	460b      	mov	r3, r1
 8006dd0:	a103      	add	r1, pc, #12	@ (adr r1, 8006de0 <__ieee754_asin+0x400>)
 8006dd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006dd6:	e6e2      	b.n	8006b9e <__ieee754_asin+0x1be>
 8006dd8:	33145c07 	.word	0x33145c07
 8006ddc:	3c91a626 	.word	0x3c91a626
 8006de0:	54442d18 	.word	0x54442d18
 8006de4:	3fe921fb 	.word	0x3fe921fb

08006de8 <__ieee754_rem_pio2>:
 8006de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dec:	ec57 6b10 	vmov	r6, r7, d0
 8006df0:	4bc5      	ldr	r3, [pc, #788]	@ (8007108 <__ieee754_rem_pio2+0x320>)
 8006df2:	b08d      	sub	sp, #52	@ 0x34
 8006df4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8006df8:	4598      	cmp	r8, r3
 8006dfa:	4604      	mov	r4, r0
 8006dfc:	9704      	str	r7, [sp, #16]
 8006dfe:	d807      	bhi.n	8006e10 <__ieee754_rem_pio2+0x28>
 8006e00:	2200      	movs	r2, #0
 8006e02:	2300      	movs	r3, #0
 8006e04:	ed80 0b00 	vstr	d0, [r0]
 8006e08:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006e0c:	2500      	movs	r5, #0
 8006e0e:	e028      	b.n	8006e62 <__ieee754_rem_pio2+0x7a>
 8006e10:	4bbe      	ldr	r3, [pc, #760]	@ (800710c <__ieee754_rem_pio2+0x324>)
 8006e12:	4598      	cmp	r8, r3
 8006e14:	d878      	bhi.n	8006f08 <__ieee754_rem_pio2+0x120>
 8006e16:	9b04      	ldr	r3, [sp, #16]
 8006e18:	4dbd      	ldr	r5, [pc, #756]	@ (8007110 <__ieee754_rem_pio2+0x328>)
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	4630      	mov	r0, r6
 8006e1e:	a3ac      	add	r3, pc, #688	@ (adr r3, 80070d0 <__ieee754_rem_pio2+0x2e8>)
 8006e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e24:	4639      	mov	r1, r7
 8006e26:	dd38      	ble.n	8006e9a <__ieee754_rem_pio2+0xb2>
 8006e28:	f7f9 fa26 	bl	8000278 <__aeabi_dsub>
 8006e2c:	45a8      	cmp	r8, r5
 8006e2e:	4606      	mov	r6, r0
 8006e30:	460f      	mov	r7, r1
 8006e32:	d01a      	beq.n	8006e6a <__ieee754_rem_pio2+0x82>
 8006e34:	a3a8      	add	r3, pc, #672	@ (adr r3, 80070d8 <__ieee754_rem_pio2+0x2f0>)
 8006e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3a:	f7f9 fa1d 	bl	8000278 <__aeabi_dsub>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	460b      	mov	r3, r1
 8006e42:	4680      	mov	r8, r0
 8006e44:	4689      	mov	r9, r1
 8006e46:	4630      	mov	r0, r6
 8006e48:	4639      	mov	r1, r7
 8006e4a:	f7f9 fa15 	bl	8000278 <__aeabi_dsub>
 8006e4e:	a3a2      	add	r3, pc, #648	@ (adr r3, 80070d8 <__ieee754_rem_pio2+0x2f0>)
 8006e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e54:	f7f9 fa10 	bl	8000278 <__aeabi_dsub>
 8006e58:	e9c4 8900 	strd	r8, r9, [r4]
 8006e5c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006e60:	2501      	movs	r5, #1
 8006e62:	4628      	mov	r0, r5
 8006e64:	b00d      	add	sp, #52	@ 0x34
 8006e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e6a:	a39d      	add	r3, pc, #628	@ (adr r3, 80070e0 <__ieee754_rem_pio2+0x2f8>)
 8006e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e70:	f7f9 fa02 	bl	8000278 <__aeabi_dsub>
 8006e74:	a39c      	add	r3, pc, #624	@ (adr r3, 80070e8 <__ieee754_rem_pio2+0x300>)
 8006e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7a:	4606      	mov	r6, r0
 8006e7c:	460f      	mov	r7, r1
 8006e7e:	f7f9 f9fb 	bl	8000278 <__aeabi_dsub>
 8006e82:	4602      	mov	r2, r0
 8006e84:	460b      	mov	r3, r1
 8006e86:	4680      	mov	r8, r0
 8006e88:	4689      	mov	r9, r1
 8006e8a:	4630      	mov	r0, r6
 8006e8c:	4639      	mov	r1, r7
 8006e8e:	f7f9 f9f3 	bl	8000278 <__aeabi_dsub>
 8006e92:	a395      	add	r3, pc, #596	@ (adr r3, 80070e8 <__ieee754_rem_pio2+0x300>)
 8006e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e98:	e7dc      	b.n	8006e54 <__ieee754_rem_pio2+0x6c>
 8006e9a:	f7f9 f9ef 	bl	800027c <__adddf3>
 8006e9e:	45a8      	cmp	r8, r5
 8006ea0:	4606      	mov	r6, r0
 8006ea2:	460f      	mov	r7, r1
 8006ea4:	d018      	beq.n	8006ed8 <__ieee754_rem_pio2+0xf0>
 8006ea6:	a38c      	add	r3, pc, #560	@ (adr r3, 80070d8 <__ieee754_rem_pio2+0x2f0>)
 8006ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eac:	f7f9 f9e6 	bl	800027c <__adddf3>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	4680      	mov	r8, r0
 8006eb6:	4689      	mov	r9, r1
 8006eb8:	4630      	mov	r0, r6
 8006eba:	4639      	mov	r1, r7
 8006ebc:	f7f9 f9dc 	bl	8000278 <__aeabi_dsub>
 8006ec0:	a385      	add	r3, pc, #532	@ (adr r3, 80070d8 <__ieee754_rem_pio2+0x2f0>)
 8006ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec6:	f7f9 f9d9 	bl	800027c <__adddf3>
 8006eca:	f04f 35ff 	mov.w	r5, #4294967295
 8006ece:	e9c4 8900 	strd	r8, r9, [r4]
 8006ed2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006ed6:	e7c4      	b.n	8006e62 <__ieee754_rem_pio2+0x7a>
 8006ed8:	a381      	add	r3, pc, #516	@ (adr r3, 80070e0 <__ieee754_rem_pio2+0x2f8>)
 8006eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ede:	f7f9 f9cd 	bl	800027c <__adddf3>
 8006ee2:	a381      	add	r3, pc, #516	@ (adr r3, 80070e8 <__ieee754_rem_pio2+0x300>)
 8006ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee8:	4606      	mov	r6, r0
 8006eea:	460f      	mov	r7, r1
 8006eec:	f7f9 f9c6 	bl	800027c <__adddf3>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	4680      	mov	r8, r0
 8006ef6:	4689      	mov	r9, r1
 8006ef8:	4630      	mov	r0, r6
 8006efa:	4639      	mov	r1, r7
 8006efc:	f7f9 f9bc 	bl	8000278 <__aeabi_dsub>
 8006f00:	a379      	add	r3, pc, #484	@ (adr r3, 80070e8 <__ieee754_rem_pio2+0x300>)
 8006f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f06:	e7de      	b.n	8006ec6 <__ieee754_rem_pio2+0xde>
 8006f08:	4b82      	ldr	r3, [pc, #520]	@ (8007114 <__ieee754_rem_pio2+0x32c>)
 8006f0a:	4598      	cmp	r8, r3
 8006f0c:	f200 80d1 	bhi.w	80070b2 <__ieee754_rem_pio2+0x2ca>
 8006f10:	f7ff faa2 	bl	8006458 <fabs>
 8006f14:	ec57 6b10 	vmov	r6, r7, d0
 8006f18:	a375      	add	r3, pc, #468	@ (adr r3, 80070f0 <__ieee754_rem_pio2+0x308>)
 8006f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1e:	4630      	mov	r0, r6
 8006f20:	4639      	mov	r1, r7
 8006f22:	f7f9 fb61 	bl	80005e8 <__aeabi_dmul>
 8006f26:	4b7c      	ldr	r3, [pc, #496]	@ (8007118 <__ieee754_rem_pio2+0x330>)
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f7f9 f9a7 	bl	800027c <__adddf3>
 8006f2e:	f7f9 fe0b 	bl	8000b48 <__aeabi_d2iz>
 8006f32:	4605      	mov	r5, r0
 8006f34:	f7f9 faee 	bl	8000514 <__aeabi_i2d>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f40:	a363      	add	r3, pc, #396	@ (adr r3, 80070d0 <__ieee754_rem_pio2+0x2e8>)
 8006f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f46:	f7f9 fb4f 	bl	80005e8 <__aeabi_dmul>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	4630      	mov	r0, r6
 8006f50:	4639      	mov	r1, r7
 8006f52:	f7f9 f991 	bl	8000278 <__aeabi_dsub>
 8006f56:	a360      	add	r3, pc, #384	@ (adr r3, 80070d8 <__ieee754_rem_pio2+0x2f0>)
 8006f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5c:	4682      	mov	sl, r0
 8006f5e:	468b      	mov	fp, r1
 8006f60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f64:	f7f9 fb40 	bl	80005e8 <__aeabi_dmul>
 8006f68:	2d1f      	cmp	r5, #31
 8006f6a:	4606      	mov	r6, r0
 8006f6c:	460f      	mov	r7, r1
 8006f6e:	dc0c      	bgt.n	8006f8a <__ieee754_rem_pio2+0x1a2>
 8006f70:	4b6a      	ldr	r3, [pc, #424]	@ (800711c <__ieee754_rem_pio2+0x334>)
 8006f72:	1e6a      	subs	r2, r5, #1
 8006f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f78:	4543      	cmp	r3, r8
 8006f7a:	d006      	beq.n	8006f8a <__ieee754_rem_pio2+0x1a2>
 8006f7c:	4632      	mov	r2, r6
 8006f7e:	463b      	mov	r3, r7
 8006f80:	4650      	mov	r0, sl
 8006f82:	4659      	mov	r1, fp
 8006f84:	f7f9 f978 	bl	8000278 <__aeabi_dsub>
 8006f88:	e00e      	b.n	8006fa8 <__ieee754_rem_pio2+0x1c0>
 8006f8a:	463b      	mov	r3, r7
 8006f8c:	4632      	mov	r2, r6
 8006f8e:	4650      	mov	r0, sl
 8006f90:	4659      	mov	r1, fp
 8006f92:	f7f9 f971 	bl	8000278 <__aeabi_dsub>
 8006f96:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006f9a:	9305      	str	r3, [sp, #20]
 8006f9c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006fa0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8006fa4:	2b10      	cmp	r3, #16
 8006fa6:	dc02      	bgt.n	8006fae <__ieee754_rem_pio2+0x1c6>
 8006fa8:	e9c4 0100 	strd	r0, r1, [r4]
 8006fac:	e039      	b.n	8007022 <__ieee754_rem_pio2+0x23a>
 8006fae:	a34c      	add	r3, pc, #304	@ (adr r3, 80070e0 <__ieee754_rem_pio2+0x2f8>)
 8006fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fb8:	f7f9 fb16 	bl	80005e8 <__aeabi_dmul>
 8006fbc:	4606      	mov	r6, r0
 8006fbe:	460f      	mov	r7, r1
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	4650      	mov	r0, sl
 8006fc6:	4659      	mov	r1, fp
 8006fc8:	f7f9 f956 	bl	8000278 <__aeabi_dsub>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	460b      	mov	r3, r1
 8006fd0:	4680      	mov	r8, r0
 8006fd2:	4689      	mov	r9, r1
 8006fd4:	4650      	mov	r0, sl
 8006fd6:	4659      	mov	r1, fp
 8006fd8:	f7f9 f94e 	bl	8000278 <__aeabi_dsub>
 8006fdc:	4632      	mov	r2, r6
 8006fde:	463b      	mov	r3, r7
 8006fe0:	f7f9 f94a 	bl	8000278 <__aeabi_dsub>
 8006fe4:	a340      	add	r3, pc, #256	@ (adr r3, 80070e8 <__ieee754_rem_pio2+0x300>)
 8006fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fea:	4606      	mov	r6, r0
 8006fec:	460f      	mov	r7, r1
 8006fee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ff2:	f7f9 faf9 	bl	80005e8 <__aeabi_dmul>
 8006ff6:	4632      	mov	r2, r6
 8006ff8:	463b      	mov	r3, r7
 8006ffa:	f7f9 f93d 	bl	8000278 <__aeabi_dsub>
 8006ffe:	4602      	mov	r2, r0
 8007000:	460b      	mov	r3, r1
 8007002:	4606      	mov	r6, r0
 8007004:	460f      	mov	r7, r1
 8007006:	4640      	mov	r0, r8
 8007008:	4649      	mov	r1, r9
 800700a:	f7f9 f935 	bl	8000278 <__aeabi_dsub>
 800700e:	9a05      	ldr	r2, [sp, #20]
 8007010:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	2b31      	cmp	r3, #49	@ 0x31
 8007018:	dc20      	bgt.n	800705c <__ieee754_rem_pio2+0x274>
 800701a:	e9c4 0100 	strd	r0, r1, [r4]
 800701e:	46c2      	mov	sl, r8
 8007020:	46cb      	mov	fp, r9
 8007022:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007026:	4650      	mov	r0, sl
 8007028:	4642      	mov	r2, r8
 800702a:	464b      	mov	r3, r9
 800702c:	4659      	mov	r1, fp
 800702e:	f7f9 f923 	bl	8000278 <__aeabi_dsub>
 8007032:	463b      	mov	r3, r7
 8007034:	4632      	mov	r2, r6
 8007036:	f7f9 f91f 	bl	8000278 <__aeabi_dsub>
 800703a:	9b04      	ldr	r3, [sp, #16]
 800703c:	2b00      	cmp	r3, #0
 800703e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007042:	f6bf af0e 	bge.w	8006e62 <__ieee754_rem_pio2+0x7a>
 8007046:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800704a:	6063      	str	r3, [r4, #4]
 800704c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007050:	f8c4 8000 	str.w	r8, [r4]
 8007054:	60a0      	str	r0, [r4, #8]
 8007056:	60e3      	str	r3, [r4, #12]
 8007058:	426d      	negs	r5, r5
 800705a:	e702      	b.n	8006e62 <__ieee754_rem_pio2+0x7a>
 800705c:	a326      	add	r3, pc, #152	@ (adr r3, 80070f8 <__ieee754_rem_pio2+0x310>)
 800705e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007062:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007066:	f7f9 fabf 	bl	80005e8 <__aeabi_dmul>
 800706a:	4606      	mov	r6, r0
 800706c:	460f      	mov	r7, r1
 800706e:	4602      	mov	r2, r0
 8007070:	460b      	mov	r3, r1
 8007072:	4640      	mov	r0, r8
 8007074:	4649      	mov	r1, r9
 8007076:	f7f9 f8ff 	bl	8000278 <__aeabi_dsub>
 800707a:	4602      	mov	r2, r0
 800707c:	460b      	mov	r3, r1
 800707e:	4682      	mov	sl, r0
 8007080:	468b      	mov	fp, r1
 8007082:	4640      	mov	r0, r8
 8007084:	4649      	mov	r1, r9
 8007086:	f7f9 f8f7 	bl	8000278 <__aeabi_dsub>
 800708a:	4632      	mov	r2, r6
 800708c:	463b      	mov	r3, r7
 800708e:	f7f9 f8f3 	bl	8000278 <__aeabi_dsub>
 8007092:	a31b      	add	r3, pc, #108	@ (adr r3, 8007100 <__ieee754_rem_pio2+0x318>)
 8007094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007098:	4606      	mov	r6, r0
 800709a:	460f      	mov	r7, r1
 800709c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070a0:	f7f9 faa2 	bl	80005e8 <__aeabi_dmul>
 80070a4:	4632      	mov	r2, r6
 80070a6:	463b      	mov	r3, r7
 80070a8:	f7f9 f8e6 	bl	8000278 <__aeabi_dsub>
 80070ac:	4606      	mov	r6, r0
 80070ae:	460f      	mov	r7, r1
 80070b0:	e764      	b.n	8006f7c <__ieee754_rem_pio2+0x194>
 80070b2:	4b1b      	ldr	r3, [pc, #108]	@ (8007120 <__ieee754_rem_pio2+0x338>)
 80070b4:	4598      	cmp	r8, r3
 80070b6:	d935      	bls.n	8007124 <__ieee754_rem_pio2+0x33c>
 80070b8:	4632      	mov	r2, r6
 80070ba:	463b      	mov	r3, r7
 80070bc:	4630      	mov	r0, r6
 80070be:	4639      	mov	r1, r7
 80070c0:	f7f9 f8da 	bl	8000278 <__aeabi_dsub>
 80070c4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80070c8:	e9c4 0100 	strd	r0, r1, [r4]
 80070cc:	e69e      	b.n	8006e0c <__ieee754_rem_pio2+0x24>
 80070ce:	bf00      	nop
 80070d0:	54400000 	.word	0x54400000
 80070d4:	3ff921fb 	.word	0x3ff921fb
 80070d8:	1a626331 	.word	0x1a626331
 80070dc:	3dd0b461 	.word	0x3dd0b461
 80070e0:	1a600000 	.word	0x1a600000
 80070e4:	3dd0b461 	.word	0x3dd0b461
 80070e8:	2e037073 	.word	0x2e037073
 80070ec:	3ba3198a 	.word	0x3ba3198a
 80070f0:	6dc9c883 	.word	0x6dc9c883
 80070f4:	3fe45f30 	.word	0x3fe45f30
 80070f8:	2e000000 	.word	0x2e000000
 80070fc:	3ba3198a 	.word	0x3ba3198a
 8007100:	252049c1 	.word	0x252049c1
 8007104:	397b839a 	.word	0x397b839a
 8007108:	3fe921fb 	.word	0x3fe921fb
 800710c:	4002d97b 	.word	0x4002d97b
 8007110:	3ff921fb 	.word	0x3ff921fb
 8007114:	413921fb 	.word	0x413921fb
 8007118:	3fe00000 	.word	0x3fe00000
 800711c:	08007b24 	.word	0x08007b24
 8007120:	7fefffff 	.word	0x7fefffff
 8007124:	ea4f 5528 	mov.w	r5, r8, asr #20
 8007128:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800712c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8007130:	4630      	mov	r0, r6
 8007132:	460f      	mov	r7, r1
 8007134:	f7f9 fd08 	bl	8000b48 <__aeabi_d2iz>
 8007138:	f7f9 f9ec 	bl	8000514 <__aeabi_i2d>
 800713c:	4602      	mov	r2, r0
 800713e:	460b      	mov	r3, r1
 8007140:	4630      	mov	r0, r6
 8007142:	4639      	mov	r1, r7
 8007144:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007148:	f7f9 f896 	bl	8000278 <__aeabi_dsub>
 800714c:	4b22      	ldr	r3, [pc, #136]	@ (80071d8 <__ieee754_rem_pio2+0x3f0>)
 800714e:	2200      	movs	r2, #0
 8007150:	f7f9 fa4a 	bl	80005e8 <__aeabi_dmul>
 8007154:	460f      	mov	r7, r1
 8007156:	4606      	mov	r6, r0
 8007158:	f7f9 fcf6 	bl	8000b48 <__aeabi_d2iz>
 800715c:	f7f9 f9da 	bl	8000514 <__aeabi_i2d>
 8007160:	4602      	mov	r2, r0
 8007162:	460b      	mov	r3, r1
 8007164:	4630      	mov	r0, r6
 8007166:	4639      	mov	r1, r7
 8007168:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800716c:	f7f9 f884 	bl	8000278 <__aeabi_dsub>
 8007170:	4b19      	ldr	r3, [pc, #100]	@ (80071d8 <__ieee754_rem_pio2+0x3f0>)
 8007172:	2200      	movs	r2, #0
 8007174:	f7f9 fa38 	bl	80005e8 <__aeabi_dmul>
 8007178:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800717c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8007180:	f04f 0803 	mov.w	r8, #3
 8007184:	2600      	movs	r6, #0
 8007186:	2700      	movs	r7, #0
 8007188:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800718c:	4632      	mov	r2, r6
 800718e:	463b      	mov	r3, r7
 8007190:	46c2      	mov	sl, r8
 8007192:	f108 38ff 	add.w	r8, r8, #4294967295
 8007196:	f7f9 fc8f 	bl	8000ab8 <__aeabi_dcmpeq>
 800719a:	2800      	cmp	r0, #0
 800719c:	d1f4      	bne.n	8007188 <__ieee754_rem_pio2+0x3a0>
 800719e:	4b0f      	ldr	r3, [pc, #60]	@ (80071dc <__ieee754_rem_pio2+0x3f4>)
 80071a0:	9301      	str	r3, [sp, #4]
 80071a2:	2302      	movs	r3, #2
 80071a4:	9300      	str	r3, [sp, #0]
 80071a6:	462a      	mov	r2, r5
 80071a8:	4653      	mov	r3, sl
 80071aa:	4621      	mov	r1, r4
 80071ac:	a806      	add	r0, sp, #24
 80071ae:	f000 f817 	bl	80071e0 <__kernel_rem_pio2>
 80071b2:	9b04      	ldr	r3, [sp, #16]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	4605      	mov	r5, r0
 80071b8:	f6bf ae53 	bge.w	8006e62 <__ieee754_rem_pio2+0x7a>
 80071bc:	e9d4 2100 	ldrd	r2, r1, [r4]
 80071c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80071c4:	e9c4 2300 	strd	r2, r3, [r4]
 80071c8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80071cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80071d0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80071d4:	e740      	b.n	8007058 <__ieee754_rem_pio2+0x270>
 80071d6:	bf00      	nop
 80071d8:	41700000 	.word	0x41700000
 80071dc:	08007ba4 	.word	0x08007ba4

080071e0 <__kernel_rem_pio2>:
 80071e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e4:	ed2d 8b02 	vpush	{d8}
 80071e8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80071ec:	f112 0f14 	cmn.w	r2, #20
 80071f0:	9306      	str	r3, [sp, #24]
 80071f2:	9104      	str	r1, [sp, #16]
 80071f4:	4bbe      	ldr	r3, [pc, #760]	@ (80074f0 <__kernel_rem_pio2+0x310>)
 80071f6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80071f8:	9008      	str	r0, [sp, #32]
 80071fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80071fe:	9300      	str	r3, [sp, #0]
 8007200:	9b06      	ldr	r3, [sp, #24]
 8007202:	f103 33ff 	add.w	r3, r3, #4294967295
 8007206:	bfa8      	it	ge
 8007208:	1ed4      	subge	r4, r2, #3
 800720a:	9305      	str	r3, [sp, #20]
 800720c:	bfb2      	itee	lt
 800720e:	2400      	movlt	r4, #0
 8007210:	2318      	movge	r3, #24
 8007212:	fb94 f4f3 	sdivge	r4, r4, r3
 8007216:	f06f 0317 	mvn.w	r3, #23
 800721a:	fb04 3303 	mla	r3, r4, r3, r3
 800721e:	eb03 0b02 	add.w	fp, r3, r2
 8007222:	9b00      	ldr	r3, [sp, #0]
 8007224:	9a05      	ldr	r2, [sp, #20]
 8007226:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 80074e0 <__kernel_rem_pio2+0x300>
 800722a:	eb03 0802 	add.w	r8, r3, r2
 800722e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8007230:	1aa7      	subs	r7, r4, r2
 8007232:	ae20      	add	r6, sp, #128	@ 0x80
 8007234:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007238:	2500      	movs	r5, #0
 800723a:	4545      	cmp	r5, r8
 800723c:	dd13      	ble.n	8007266 <__kernel_rem_pio2+0x86>
 800723e:	9b06      	ldr	r3, [sp, #24]
 8007240:	aa20      	add	r2, sp, #128	@ 0x80
 8007242:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007246:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800724a:	f04f 0800 	mov.w	r8, #0
 800724e:	9b00      	ldr	r3, [sp, #0]
 8007250:	4598      	cmp	r8, r3
 8007252:	dc31      	bgt.n	80072b8 <__kernel_rem_pio2+0xd8>
 8007254:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 80074e0 <__kernel_rem_pio2+0x300>
 8007258:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800725c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007260:	462f      	mov	r7, r5
 8007262:	2600      	movs	r6, #0
 8007264:	e01b      	b.n	800729e <__kernel_rem_pio2+0xbe>
 8007266:	42ef      	cmn	r7, r5
 8007268:	d407      	bmi.n	800727a <__kernel_rem_pio2+0x9a>
 800726a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800726e:	f7f9 f951 	bl	8000514 <__aeabi_i2d>
 8007272:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007276:	3501      	adds	r5, #1
 8007278:	e7df      	b.n	800723a <__kernel_rem_pio2+0x5a>
 800727a:	ec51 0b18 	vmov	r0, r1, d8
 800727e:	e7f8      	b.n	8007272 <__kernel_rem_pio2+0x92>
 8007280:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007284:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007288:	f7f9 f9ae 	bl	80005e8 <__aeabi_dmul>
 800728c:	4602      	mov	r2, r0
 800728e:	460b      	mov	r3, r1
 8007290:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007294:	f7f8 fff2 	bl	800027c <__adddf3>
 8007298:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800729c:	3601      	adds	r6, #1
 800729e:	9b05      	ldr	r3, [sp, #20]
 80072a0:	429e      	cmp	r6, r3
 80072a2:	f1a7 0708 	sub.w	r7, r7, #8
 80072a6:	ddeb      	ble.n	8007280 <__kernel_rem_pio2+0xa0>
 80072a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80072ac:	f108 0801 	add.w	r8, r8, #1
 80072b0:	ecaa 7b02 	vstmia	sl!, {d7}
 80072b4:	3508      	adds	r5, #8
 80072b6:	e7ca      	b.n	800724e <__kernel_rem_pio2+0x6e>
 80072b8:	9b00      	ldr	r3, [sp, #0]
 80072ba:	f8dd 8000 	ldr.w	r8, [sp]
 80072be:	aa0c      	add	r2, sp, #48	@ 0x30
 80072c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80072c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80072c6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80072c8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80072cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80072ce:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80072d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80072d4:	ab98      	add	r3, sp, #608	@ 0x260
 80072d6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80072da:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80072de:	ed8d 7b02 	vstr	d7, [sp, #8]
 80072e2:	ac0c      	add	r4, sp, #48	@ 0x30
 80072e4:	ab70      	add	r3, sp, #448	@ 0x1c0
 80072e6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80072ea:	46a1      	mov	r9, r4
 80072ec:	46c2      	mov	sl, r8
 80072ee:	f1ba 0f00 	cmp.w	sl, #0
 80072f2:	f1a5 0508 	sub.w	r5, r5, #8
 80072f6:	dc77      	bgt.n	80073e8 <__kernel_rem_pio2+0x208>
 80072f8:	4658      	mov	r0, fp
 80072fa:	ed9d 0b02 	vldr	d0, [sp, #8]
 80072fe:	f000 fac7 	bl	8007890 <scalbn>
 8007302:	ec57 6b10 	vmov	r6, r7, d0
 8007306:	2200      	movs	r2, #0
 8007308:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800730c:	4630      	mov	r0, r6
 800730e:	4639      	mov	r1, r7
 8007310:	f7f9 f96a 	bl	80005e8 <__aeabi_dmul>
 8007314:	ec41 0b10 	vmov	d0, r0, r1
 8007318:	f000 fb3a 	bl	8007990 <floor>
 800731c:	4b75      	ldr	r3, [pc, #468]	@ (80074f4 <__kernel_rem_pio2+0x314>)
 800731e:	ec51 0b10 	vmov	r0, r1, d0
 8007322:	2200      	movs	r2, #0
 8007324:	f7f9 f960 	bl	80005e8 <__aeabi_dmul>
 8007328:	4602      	mov	r2, r0
 800732a:	460b      	mov	r3, r1
 800732c:	4630      	mov	r0, r6
 800732e:	4639      	mov	r1, r7
 8007330:	f7f8 ffa2 	bl	8000278 <__aeabi_dsub>
 8007334:	460f      	mov	r7, r1
 8007336:	4606      	mov	r6, r0
 8007338:	f7f9 fc06 	bl	8000b48 <__aeabi_d2iz>
 800733c:	9002      	str	r0, [sp, #8]
 800733e:	f7f9 f8e9 	bl	8000514 <__aeabi_i2d>
 8007342:	4602      	mov	r2, r0
 8007344:	460b      	mov	r3, r1
 8007346:	4630      	mov	r0, r6
 8007348:	4639      	mov	r1, r7
 800734a:	f7f8 ff95 	bl	8000278 <__aeabi_dsub>
 800734e:	f1bb 0f00 	cmp.w	fp, #0
 8007352:	4606      	mov	r6, r0
 8007354:	460f      	mov	r7, r1
 8007356:	dd6c      	ble.n	8007432 <__kernel_rem_pio2+0x252>
 8007358:	f108 31ff 	add.w	r1, r8, #4294967295
 800735c:	ab0c      	add	r3, sp, #48	@ 0x30
 800735e:	9d02      	ldr	r5, [sp, #8]
 8007360:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007364:	f1cb 0018 	rsb	r0, fp, #24
 8007368:	fa43 f200 	asr.w	r2, r3, r0
 800736c:	4415      	add	r5, r2
 800736e:	4082      	lsls	r2, r0
 8007370:	1a9b      	subs	r3, r3, r2
 8007372:	aa0c      	add	r2, sp, #48	@ 0x30
 8007374:	9502      	str	r5, [sp, #8]
 8007376:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800737a:	f1cb 0217 	rsb	r2, fp, #23
 800737e:	fa43 f902 	asr.w	r9, r3, r2
 8007382:	f1b9 0f00 	cmp.w	r9, #0
 8007386:	dd64      	ble.n	8007452 <__kernel_rem_pio2+0x272>
 8007388:	9b02      	ldr	r3, [sp, #8]
 800738a:	2200      	movs	r2, #0
 800738c:	3301      	adds	r3, #1
 800738e:	9302      	str	r3, [sp, #8]
 8007390:	4615      	mov	r5, r2
 8007392:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8007396:	4590      	cmp	r8, r2
 8007398:	f300 80b8 	bgt.w	800750c <__kernel_rem_pio2+0x32c>
 800739c:	f1bb 0f00 	cmp.w	fp, #0
 80073a0:	dd07      	ble.n	80073b2 <__kernel_rem_pio2+0x1d2>
 80073a2:	f1bb 0f01 	cmp.w	fp, #1
 80073a6:	f000 80bf 	beq.w	8007528 <__kernel_rem_pio2+0x348>
 80073aa:	f1bb 0f02 	cmp.w	fp, #2
 80073ae:	f000 80c6 	beq.w	800753e <__kernel_rem_pio2+0x35e>
 80073b2:	f1b9 0f02 	cmp.w	r9, #2
 80073b6:	d14c      	bne.n	8007452 <__kernel_rem_pio2+0x272>
 80073b8:	4632      	mov	r2, r6
 80073ba:	463b      	mov	r3, r7
 80073bc:	494e      	ldr	r1, [pc, #312]	@ (80074f8 <__kernel_rem_pio2+0x318>)
 80073be:	2000      	movs	r0, #0
 80073c0:	f7f8 ff5a 	bl	8000278 <__aeabi_dsub>
 80073c4:	4606      	mov	r6, r0
 80073c6:	460f      	mov	r7, r1
 80073c8:	2d00      	cmp	r5, #0
 80073ca:	d042      	beq.n	8007452 <__kernel_rem_pio2+0x272>
 80073cc:	4658      	mov	r0, fp
 80073ce:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 80074e8 <__kernel_rem_pio2+0x308>
 80073d2:	f000 fa5d 	bl	8007890 <scalbn>
 80073d6:	4630      	mov	r0, r6
 80073d8:	4639      	mov	r1, r7
 80073da:	ec53 2b10 	vmov	r2, r3, d0
 80073de:	f7f8 ff4b 	bl	8000278 <__aeabi_dsub>
 80073e2:	4606      	mov	r6, r0
 80073e4:	460f      	mov	r7, r1
 80073e6:	e034      	b.n	8007452 <__kernel_rem_pio2+0x272>
 80073e8:	4b44      	ldr	r3, [pc, #272]	@ (80074fc <__kernel_rem_pio2+0x31c>)
 80073ea:	2200      	movs	r2, #0
 80073ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073f0:	f7f9 f8fa 	bl	80005e8 <__aeabi_dmul>
 80073f4:	f7f9 fba8 	bl	8000b48 <__aeabi_d2iz>
 80073f8:	f7f9 f88c 	bl	8000514 <__aeabi_i2d>
 80073fc:	4b40      	ldr	r3, [pc, #256]	@ (8007500 <__kernel_rem_pio2+0x320>)
 80073fe:	2200      	movs	r2, #0
 8007400:	4606      	mov	r6, r0
 8007402:	460f      	mov	r7, r1
 8007404:	f7f9 f8f0 	bl	80005e8 <__aeabi_dmul>
 8007408:	4602      	mov	r2, r0
 800740a:	460b      	mov	r3, r1
 800740c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007410:	f7f8 ff32 	bl	8000278 <__aeabi_dsub>
 8007414:	f7f9 fb98 	bl	8000b48 <__aeabi_d2iz>
 8007418:	e9d5 2300 	ldrd	r2, r3, [r5]
 800741c:	f849 0b04 	str.w	r0, [r9], #4
 8007420:	4639      	mov	r1, r7
 8007422:	4630      	mov	r0, r6
 8007424:	f7f8 ff2a 	bl	800027c <__adddf3>
 8007428:	f10a 3aff 	add.w	sl, sl, #4294967295
 800742c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007430:	e75d      	b.n	80072ee <__kernel_rem_pio2+0x10e>
 8007432:	d107      	bne.n	8007444 <__kernel_rem_pio2+0x264>
 8007434:	f108 33ff 	add.w	r3, r8, #4294967295
 8007438:	aa0c      	add	r2, sp, #48	@ 0x30
 800743a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800743e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8007442:	e79e      	b.n	8007382 <__kernel_rem_pio2+0x1a2>
 8007444:	4b2f      	ldr	r3, [pc, #188]	@ (8007504 <__kernel_rem_pio2+0x324>)
 8007446:	2200      	movs	r2, #0
 8007448:	f7f9 fb54 	bl	8000af4 <__aeabi_dcmpge>
 800744c:	2800      	cmp	r0, #0
 800744e:	d143      	bne.n	80074d8 <__kernel_rem_pio2+0x2f8>
 8007450:	4681      	mov	r9, r0
 8007452:	2200      	movs	r2, #0
 8007454:	2300      	movs	r3, #0
 8007456:	4630      	mov	r0, r6
 8007458:	4639      	mov	r1, r7
 800745a:	f7f9 fb2d 	bl	8000ab8 <__aeabi_dcmpeq>
 800745e:	2800      	cmp	r0, #0
 8007460:	f000 80bf 	beq.w	80075e2 <__kernel_rem_pio2+0x402>
 8007464:	f108 33ff 	add.w	r3, r8, #4294967295
 8007468:	2200      	movs	r2, #0
 800746a:	9900      	ldr	r1, [sp, #0]
 800746c:	428b      	cmp	r3, r1
 800746e:	da6e      	bge.n	800754e <__kernel_rem_pio2+0x36e>
 8007470:	2a00      	cmp	r2, #0
 8007472:	f000 8089 	beq.w	8007588 <__kernel_rem_pio2+0x3a8>
 8007476:	f108 38ff 	add.w	r8, r8, #4294967295
 800747a:	ab0c      	add	r3, sp, #48	@ 0x30
 800747c:	f1ab 0b18 	sub.w	fp, fp, #24
 8007480:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d0f6      	beq.n	8007476 <__kernel_rem_pio2+0x296>
 8007488:	4658      	mov	r0, fp
 800748a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80074e8 <__kernel_rem_pio2+0x308>
 800748e:	f000 f9ff 	bl	8007890 <scalbn>
 8007492:	f108 0301 	add.w	r3, r8, #1
 8007496:	00da      	lsls	r2, r3, #3
 8007498:	9205      	str	r2, [sp, #20]
 800749a:	ec55 4b10 	vmov	r4, r5, d0
 800749e:	aa70      	add	r2, sp, #448	@ 0x1c0
 80074a0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 80074fc <__kernel_rem_pio2+0x31c>
 80074a4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80074a8:	4646      	mov	r6, r8
 80074aa:	f04f 0a00 	mov.w	sl, #0
 80074ae:	2e00      	cmp	r6, #0
 80074b0:	f280 80cf 	bge.w	8007652 <__kernel_rem_pio2+0x472>
 80074b4:	4644      	mov	r4, r8
 80074b6:	2c00      	cmp	r4, #0
 80074b8:	f2c0 80fd 	blt.w	80076b6 <__kernel_rem_pio2+0x4d6>
 80074bc:	4b12      	ldr	r3, [pc, #72]	@ (8007508 <__kernel_rem_pio2+0x328>)
 80074be:	461f      	mov	r7, r3
 80074c0:	ab70      	add	r3, sp, #448	@ 0x1c0
 80074c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80074c6:	9306      	str	r3, [sp, #24]
 80074c8:	f04f 0a00 	mov.w	sl, #0
 80074cc:	f04f 0b00 	mov.w	fp, #0
 80074d0:	2600      	movs	r6, #0
 80074d2:	eba8 0504 	sub.w	r5, r8, r4
 80074d6:	e0e2      	b.n	800769e <__kernel_rem_pio2+0x4be>
 80074d8:	f04f 0902 	mov.w	r9, #2
 80074dc:	e754      	b.n	8007388 <__kernel_rem_pio2+0x1a8>
 80074de:	bf00      	nop
	...
 80074ec:	3ff00000 	.word	0x3ff00000
 80074f0:	08007cf0 	.word	0x08007cf0
 80074f4:	40200000 	.word	0x40200000
 80074f8:	3ff00000 	.word	0x3ff00000
 80074fc:	3e700000 	.word	0x3e700000
 8007500:	41700000 	.word	0x41700000
 8007504:	3fe00000 	.word	0x3fe00000
 8007508:	08007cb0 	.word	0x08007cb0
 800750c:	f854 3b04 	ldr.w	r3, [r4], #4
 8007510:	b945      	cbnz	r5, 8007524 <__kernel_rem_pio2+0x344>
 8007512:	b123      	cbz	r3, 800751e <__kernel_rem_pio2+0x33e>
 8007514:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8007518:	f844 3c04 	str.w	r3, [r4, #-4]
 800751c:	2301      	movs	r3, #1
 800751e:	3201      	adds	r2, #1
 8007520:	461d      	mov	r5, r3
 8007522:	e738      	b.n	8007396 <__kernel_rem_pio2+0x1b6>
 8007524:	1acb      	subs	r3, r1, r3
 8007526:	e7f7      	b.n	8007518 <__kernel_rem_pio2+0x338>
 8007528:	f108 32ff 	add.w	r2, r8, #4294967295
 800752c:	ab0c      	add	r3, sp, #48	@ 0x30
 800752e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007532:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007536:	a90c      	add	r1, sp, #48	@ 0x30
 8007538:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800753c:	e739      	b.n	80073b2 <__kernel_rem_pio2+0x1d2>
 800753e:	f108 32ff 	add.w	r2, r8, #4294967295
 8007542:	ab0c      	add	r3, sp, #48	@ 0x30
 8007544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007548:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800754c:	e7f3      	b.n	8007536 <__kernel_rem_pio2+0x356>
 800754e:	a90c      	add	r1, sp, #48	@ 0x30
 8007550:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007554:	3b01      	subs	r3, #1
 8007556:	430a      	orrs	r2, r1
 8007558:	e787      	b.n	800746a <__kernel_rem_pio2+0x28a>
 800755a:	3401      	adds	r4, #1
 800755c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007560:	2a00      	cmp	r2, #0
 8007562:	d0fa      	beq.n	800755a <__kernel_rem_pio2+0x37a>
 8007564:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007566:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800756a:	eb0d 0503 	add.w	r5, sp, r3
 800756e:	9b06      	ldr	r3, [sp, #24]
 8007570:	aa20      	add	r2, sp, #128	@ 0x80
 8007572:	4443      	add	r3, r8
 8007574:	f108 0701 	add.w	r7, r8, #1
 8007578:	3d98      	subs	r5, #152	@ 0x98
 800757a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800757e:	4444      	add	r4, r8
 8007580:	42bc      	cmp	r4, r7
 8007582:	da04      	bge.n	800758e <__kernel_rem_pio2+0x3ae>
 8007584:	46a0      	mov	r8, r4
 8007586:	e6a2      	b.n	80072ce <__kernel_rem_pio2+0xee>
 8007588:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800758a:	2401      	movs	r4, #1
 800758c:	e7e6      	b.n	800755c <__kernel_rem_pio2+0x37c>
 800758e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007590:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8007594:	f7f8 ffbe 	bl	8000514 <__aeabi_i2d>
 8007598:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8007860 <__kernel_rem_pio2+0x680>
 800759c:	e8e6 0102 	strd	r0, r1, [r6], #8
 80075a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80075a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80075a8:	46b2      	mov	sl, r6
 80075aa:	f04f 0800 	mov.w	r8, #0
 80075ae:	9b05      	ldr	r3, [sp, #20]
 80075b0:	4598      	cmp	r8, r3
 80075b2:	dd05      	ble.n	80075c0 <__kernel_rem_pio2+0x3e0>
 80075b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80075b8:	3701      	adds	r7, #1
 80075ba:	eca5 7b02 	vstmia	r5!, {d7}
 80075be:	e7df      	b.n	8007580 <__kernel_rem_pio2+0x3a0>
 80075c0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80075c4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80075c8:	f7f9 f80e 	bl	80005e8 <__aeabi_dmul>
 80075cc:	4602      	mov	r2, r0
 80075ce:	460b      	mov	r3, r1
 80075d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075d4:	f7f8 fe52 	bl	800027c <__adddf3>
 80075d8:	f108 0801 	add.w	r8, r8, #1
 80075dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075e0:	e7e5      	b.n	80075ae <__kernel_rem_pio2+0x3ce>
 80075e2:	f1cb 0000 	rsb	r0, fp, #0
 80075e6:	ec47 6b10 	vmov	d0, r6, r7
 80075ea:	f000 f951 	bl	8007890 <scalbn>
 80075ee:	ec55 4b10 	vmov	r4, r5, d0
 80075f2:	4b9d      	ldr	r3, [pc, #628]	@ (8007868 <__kernel_rem_pio2+0x688>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	4620      	mov	r0, r4
 80075f8:	4629      	mov	r1, r5
 80075fa:	f7f9 fa7b 	bl	8000af4 <__aeabi_dcmpge>
 80075fe:	b300      	cbz	r0, 8007642 <__kernel_rem_pio2+0x462>
 8007600:	4b9a      	ldr	r3, [pc, #616]	@ (800786c <__kernel_rem_pio2+0x68c>)
 8007602:	2200      	movs	r2, #0
 8007604:	4620      	mov	r0, r4
 8007606:	4629      	mov	r1, r5
 8007608:	f7f8 ffee 	bl	80005e8 <__aeabi_dmul>
 800760c:	f7f9 fa9c 	bl	8000b48 <__aeabi_d2iz>
 8007610:	4606      	mov	r6, r0
 8007612:	f7f8 ff7f 	bl	8000514 <__aeabi_i2d>
 8007616:	4b94      	ldr	r3, [pc, #592]	@ (8007868 <__kernel_rem_pio2+0x688>)
 8007618:	2200      	movs	r2, #0
 800761a:	f7f8 ffe5 	bl	80005e8 <__aeabi_dmul>
 800761e:	460b      	mov	r3, r1
 8007620:	4602      	mov	r2, r0
 8007622:	4629      	mov	r1, r5
 8007624:	4620      	mov	r0, r4
 8007626:	f7f8 fe27 	bl	8000278 <__aeabi_dsub>
 800762a:	f7f9 fa8d 	bl	8000b48 <__aeabi_d2iz>
 800762e:	ab0c      	add	r3, sp, #48	@ 0x30
 8007630:	f10b 0b18 	add.w	fp, fp, #24
 8007634:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8007638:	f108 0801 	add.w	r8, r8, #1
 800763c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8007640:	e722      	b.n	8007488 <__kernel_rem_pio2+0x2a8>
 8007642:	4620      	mov	r0, r4
 8007644:	4629      	mov	r1, r5
 8007646:	f7f9 fa7f 	bl	8000b48 <__aeabi_d2iz>
 800764a:	ab0c      	add	r3, sp, #48	@ 0x30
 800764c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8007650:	e71a      	b.n	8007488 <__kernel_rem_pio2+0x2a8>
 8007652:	ab0c      	add	r3, sp, #48	@ 0x30
 8007654:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007658:	f7f8 ff5c 	bl	8000514 <__aeabi_i2d>
 800765c:	4622      	mov	r2, r4
 800765e:	462b      	mov	r3, r5
 8007660:	f7f8 ffc2 	bl	80005e8 <__aeabi_dmul>
 8007664:	4652      	mov	r2, sl
 8007666:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800766a:	465b      	mov	r3, fp
 800766c:	4620      	mov	r0, r4
 800766e:	4629      	mov	r1, r5
 8007670:	f7f8 ffba 	bl	80005e8 <__aeabi_dmul>
 8007674:	3e01      	subs	r6, #1
 8007676:	4604      	mov	r4, r0
 8007678:	460d      	mov	r5, r1
 800767a:	e718      	b.n	80074ae <__kernel_rem_pio2+0x2ce>
 800767c:	9906      	ldr	r1, [sp, #24]
 800767e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8007682:	9106      	str	r1, [sp, #24]
 8007684:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8007688:	f7f8 ffae 	bl	80005e8 <__aeabi_dmul>
 800768c:	4602      	mov	r2, r0
 800768e:	460b      	mov	r3, r1
 8007690:	4650      	mov	r0, sl
 8007692:	4659      	mov	r1, fp
 8007694:	f7f8 fdf2 	bl	800027c <__adddf3>
 8007698:	3601      	adds	r6, #1
 800769a:	4682      	mov	sl, r0
 800769c:	468b      	mov	fp, r1
 800769e:	9b00      	ldr	r3, [sp, #0]
 80076a0:	429e      	cmp	r6, r3
 80076a2:	dc01      	bgt.n	80076a8 <__kernel_rem_pio2+0x4c8>
 80076a4:	42b5      	cmp	r5, r6
 80076a6:	dae9      	bge.n	800767c <__kernel_rem_pio2+0x49c>
 80076a8:	ab48      	add	r3, sp, #288	@ 0x120
 80076aa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80076ae:	e9c5 ab00 	strd	sl, fp, [r5]
 80076b2:	3c01      	subs	r4, #1
 80076b4:	e6ff      	b.n	80074b6 <__kernel_rem_pio2+0x2d6>
 80076b6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	dc0b      	bgt.n	80076d4 <__kernel_rem_pio2+0x4f4>
 80076bc:	2b00      	cmp	r3, #0
 80076be:	dc39      	bgt.n	8007734 <__kernel_rem_pio2+0x554>
 80076c0:	d05d      	beq.n	800777e <__kernel_rem_pio2+0x59e>
 80076c2:	9b02      	ldr	r3, [sp, #8]
 80076c4:	f003 0007 	and.w	r0, r3, #7
 80076c8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80076cc:	ecbd 8b02 	vpop	{d8}
 80076d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076d4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80076d6:	2b03      	cmp	r3, #3
 80076d8:	d1f3      	bne.n	80076c2 <__kernel_rem_pio2+0x4e2>
 80076da:	9b05      	ldr	r3, [sp, #20]
 80076dc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80076e0:	eb0d 0403 	add.w	r4, sp, r3
 80076e4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80076e8:	4625      	mov	r5, r4
 80076ea:	46c2      	mov	sl, r8
 80076ec:	f1ba 0f00 	cmp.w	sl, #0
 80076f0:	f1a5 0508 	sub.w	r5, r5, #8
 80076f4:	dc6b      	bgt.n	80077ce <__kernel_rem_pio2+0x5ee>
 80076f6:	4645      	mov	r5, r8
 80076f8:	2d01      	cmp	r5, #1
 80076fa:	f1a4 0408 	sub.w	r4, r4, #8
 80076fe:	f300 8087 	bgt.w	8007810 <__kernel_rem_pio2+0x630>
 8007702:	9c05      	ldr	r4, [sp, #20]
 8007704:	ab48      	add	r3, sp, #288	@ 0x120
 8007706:	441c      	add	r4, r3
 8007708:	2000      	movs	r0, #0
 800770a:	2100      	movs	r1, #0
 800770c:	f1b8 0f01 	cmp.w	r8, #1
 8007710:	f300 809c 	bgt.w	800784c <__kernel_rem_pio2+0x66c>
 8007714:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8007718:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800771c:	f1b9 0f00 	cmp.w	r9, #0
 8007720:	f040 80a6 	bne.w	8007870 <__kernel_rem_pio2+0x690>
 8007724:	9b04      	ldr	r3, [sp, #16]
 8007726:	e9c3 7800 	strd	r7, r8, [r3]
 800772a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800772e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007732:	e7c6      	b.n	80076c2 <__kernel_rem_pio2+0x4e2>
 8007734:	9d05      	ldr	r5, [sp, #20]
 8007736:	ab48      	add	r3, sp, #288	@ 0x120
 8007738:	441d      	add	r5, r3
 800773a:	4644      	mov	r4, r8
 800773c:	2000      	movs	r0, #0
 800773e:	2100      	movs	r1, #0
 8007740:	2c00      	cmp	r4, #0
 8007742:	da35      	bge.n	80077b0 <__kernel_rem_pio2+0x5d0>
 8007744:	f1b9 0f00 	cmp.w	r9, #0
 8007748:	d038      	beq.n	80077bc <__kernel_rem_pio2+0x5dc>
 800774a:	4602      	mov	r2, r0
 800774c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007750:	9c04      	ldr	r4, [sp, #16]
 8007752:	e9c4 2300 	strd	r2, r3, [r4]
 8007756:	4602      	mov	r2, r0
 8007758:	460b      	mov	r3, r1
 800775a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800775e:	f7f8 fd8b 	bl	8000278 <__aeabi_dsub>
 8007762:	ad4a      	add	r5, sp, #296	@ 0x128
 8007764:	2401      	movs	r4, #1
 8007766:	45a0      	cmp	r8, r4
 8007768:	da2b      	bge.n	80077c2 <__kernel_rem_pio2+0x5e2>
 800776a:	f1b9 0f00 	cmp.w	r9, #0
 800776e:	d002      	beq.n	8007776 <__kernel_rem_pio2+0x596>
 8007770:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007774:	4619      	mov	r1, r3
 8007776:	9b04      	ldr	r3, [sp, #16]
 8007778:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800777c:	e7a1      	b.n	80076c2 <__kernel_rem_pio2+0x4e2>
 800777e:	9c05      	ldr	r4, [sp, #20]
 8007780:	ab48      	add	r3, sp, #288	@ 0x120
 8007782:	441c      	add	r4, r3
 8007784:	2000      	movs	r0, #0
 8007786:	2100      	movs	r1, #0
 8007788:	f1b8 0f00 	cmp.w	r8, #0
 800778c:	da09      	bge.n	80077a2 <__kernel_rem_pio2+0x5c2>
 800778e:	f1b9 0f00 	cmp.w	r9, #0
 8007792:	d002      	beq.n	800779a <__kernel_rem_pio2+0x5ba>
 8007794:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007798:	4619      	mov	r1, r3
 800779a:	9b04      	ldr	r3, [sp, #16]
 800779c:	e9c3 0100 	strd	r0, r1, [r3]
 80077a0:	e78f      	b.n	80076c2 <__kernel_rem_pio2+0x4e2>
 80077a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80077a6:	f7f8 fd69 	bl	800027c <__adddf3>
 80077aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80077ae:	e7eb      	b.n	8007788 <__kernel_rem_pio2+0x5a8>
 80077b0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80077b4:	f7f8 fd62 	bl	800027c <__adddf3>
 80077b8:	3c01      	subs	r4, #1
 80077ba:	e7c1      	b.n	8007740 <__kernel_rem_pio2+0x560>
 80077bc:	4602      	mov	r2, r0
 80077be:	460b      	mov	r3, r1
 80077c0:	e7c6      	b.n	8007750 <__kernel_rem_pio2+0x570>
 80077c2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80077c6:	f7f8 fd59 	bl	800027c <__adddf3>
 80077ca:	3401      	adds	r4, #1
 80077cc:	e7cb      	b.n	8007766 <__kernel_rem_pio2+0x586>
 80077ce:	ed95 7b00 	vldr	d7, [r5]
 80077d2:	ed8d 7b00 	vstr	d7, [sp]
 80077d6:	ed95 7b02 	vldr	d7, [r5, #8]
 80077da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077de:	ec53 2b17 	vmov	r2, r3, d7
 80077e2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80077e6:	f7f8 fd49 	bl	800027c <__adddf3>
 80077ea:	4602      	mov	r2, r0
 80077ec:	460b      	mov	r3, r1
 80077ee:	4606      	mov	r6, r0
 80077f0:	460f      	mov	r7, r1
 80077f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077f6:	f7f8 fd3f 	bl	8000278 <__aeabi_dsub>
 80077fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80077fe:	f7f8 fd3d 	bl	800027c <__adddf3>
 8007802:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007806:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800780a:	e9c5 6700 	strd	r6, r7, [r5]
 800780e:	e76d      	b.n	80076ec <__kernel_rem_pio2+0x50c>
 8007810:	ed94 7b00 	vldr	d7, [r4]
 8007814:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8007818:	ec51 0b17 	vmov	r0, r1, d7
 800781c:	4652      	mov	r2, sl
 800781e:	465b      	mov	r3, fp
 8007820:	ed8d 7b00 	vstr	d7, [sp]
 8007824:	f7f8 fd2a 	bl	800027c <__adddf3>
 8007828:	4602      	mov	r2, r0
 800782a:	460b      	mov	r3, r1
 800782c:	4606      	mov	r6, r0
 800782e:	460f      	mov	r7, r1
 8007830:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007834:	f7f8 fd20 	bl	8000278 <__aeabi_dsub>
 8007838:	4652      	mov	r2, sl
 800783a:	465b      	mov	r3, fp
 800783c:	f7f8 fd1e 	bl	800027c <__adddf3>
 8007840:	3d01      	subs	r5, #1
 8007842:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007846:	e9c4 6700 	strd	r6, r7, [r4]
 800784a:	e755      	b.n	80076f8 <__kernel_rem_pio2+0x518>
 800784c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007850:	f7f8 fd14 	bl	800027c <__adddf3>
 8007854:	f108 38ff 	add.w	r8, r8, #4294967295
 8007858:	e758      	b.n	800770c <__kernel_rem_pio2+0x52c>
 800785a:	bf00      	nop
 800785c:	f3af 8000 	nop.w
	...
 8007868:	41700000 	.word	0x41700000
 800786c:	3e700000 	.word	0x3e700000
 8007870:	9b04      	ldr	r3, [sp, #16]
 8007872:	9a04      	ldr	r2, [sp, #16]
 8007874:	601f      	str	r7, [r3, #0]
 8007876:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800787a:	605c      	str	r4, [r3, #4]
 800787c:	609d      	str	r5, [r3, #8]
 800787e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007882:	60d3      	str	r3, [r2, #12]
 8007884:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007888:	6110      	str	r0, [r2, #16]
 800788a:	6153      	str	r3, [r2, #20]
 800788c:	e719      	b.n	80076c2 <__kernel_rem_pio2+0x4e2>
 800788e:	bf00      	nop

08007890 <scalbn>:
 8007890:	b570      	push	{r4, r5, r6, lr}
 8007892:	ec55 4b10 	vmov	r4, r5, d0
 8007896:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800789a:	4606      	mov	r6, r0
 800789c:	462b      	mov	r3, r5
 800789e:	b991      	cbnz	r1, 80078c6 <scalbn+0x36>
 80078a0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80078a4:	4323      	orrs	r3, r4
 80078a6:	d03d      	beq.n	8007924 <scalbn+0x94>
 80078a8:	4b35      	ldr	r3, [pc, #212]	@ (8007980 <scalbn+0xf0>)
 80078aa:	4620      	mov	r0, r4
 80078ac:	4629      	mov	r1, r5
 80078ae:	2200      	movs	r2, #0
 80078b0:	f7f8 fe9a 	bl	80005e8 <__aeabi_dmul>
 80078b4:	4b33      	ldr	r3, [pc, #204]	@ (8007984 <scalbn+0xf4>)
 80078b6:	429e      	cmp	r6, r3
 80078b8:	4604      	mov	r4, r0
 80078ba:	460d      	mov	r5, r1
 80078bc:	da0f      	bge.n	80078de <scalbn+0x4e>
 80078be:	a328      	add	r3, pc, #160	@ (adr r3, 8007960 <scalbn+0xd0>)
 80078c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c4:	e01e      	b.n	8007904 <scalbn+0x74>
 80078c6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80078ca:	4291      	cmp	r1, r2
 80078cc:	d10b      	bne.n	80078e6 <scalbn+0x56>
 80078ce:	4622      	mov	r2, r4
 80078d0:	4620      	mov	r0, r4
 80078d2:	4629      	mov	r1, r5
 80078d4:	f7f8 fcd2 	bl	800027c <__adddf3>
 80078d8:	4604      	mov	r4, r0
 80078da:	460d      	mov	r5, r1
 80078dc:	e022      	b.n	8007924 <scalbn+0x94>
 80078de:	460b      	mov	r3, r1
 80078e0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80078e4:	3936      	subs	r1, #54	@ 0x36
 80078e6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80078ea:	4296      	cmp	r6, r2
 80078ec:	dd0d      	ble.n	800790a <scalbn+0x7a>
 80078ee:	2d00      	cmp	r5, #0
 80078f0:	a11d      	add	r1, pc, #116	@ (adr r1, 8007968 <scalbn+0xd8>)
 80078f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078f6:	da02      	bge.n	80078fe <scalbn+0x6e>
 80078f8:	a11d      	add	r1, pc, #116	@ (adr r1, 8007970 <scalbn+0xe0>)
 80078fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078fe:	a31a      	add	r3, pc, #104	@ (adr r3, 8007968 <scalbn+0xd8>)
 8007900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007904:	f7f8 fe70 	bl	80005e8 <__aeabi_dmul>
 8007908:	e7e6      	b.n	80078d8 <scalbn+0x48>
 800790a:	1872      	adds	r2, r6, r1
 800790c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8007910:	428a      	cmp	r2, r1
 8007912:	dcec      	bgt.n	80078ee <scalbn+0x5e>
 8007914:	2a00      	cmp	r2, #0
 8007916:	dd08      	ble.n	800792a <scalbn+0x9a>
 8007918:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800791c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007920:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007924:	ec45 4b10 	vmov	d0, r4, r5
 8007928:	bd70      	pop	{r4, r5, r6, pc}
 800792a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800792e:	da08      	bge.n	8007942 <scalbn+0xb2>
 8007930:	2d00      	cmp	r5, #0
 8007932:	a10b      	add	r1, pc, #44	@ (adr r1, 8007960 <scalbn+0xd0>)
 8007934:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007938:	dac1      	bge.n	80078be <scalbn+0x2e>
 800793a:	a10f      	add	r1, pc, #60	@ (adr r1, 8007978 <scalbn+0xe8>)
 800793c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007940:	e7bd      	b.n	80078be <scalbn+0x2e>
 8007942:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007946:	3236      	adds	r2, #54	@ 0x36
 8007948:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800794c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007950:	4620      	mov	r0, r4
 8007952:	4b0d      	ldr	r3, [pc, #52]	@ (8007988 <scalbn+0xf8>)
 8007954:	4629      	mov	r1, r5
 8007956:	2200      	movs	r2, #0
 8007958:	e7d4      	b.n	8007904 <scalbn+0x74>
 800795a:	bf00      	nop
 800795c:	f3af 8000 	nop.w
 8007960:	c2f8f359 	.word	0xc2f8f359
 8007964:	01a56e1f 	.word	0x01a56e1f
 8007968:	8800759c 	.word	0x8800759c
 800796c:	7e37e43c 	.word	0x7e37e43c
 8007970:	8800759c 	.word	0x8800759c
 8007974:	fe37e43c 	.word	0xfe37e43c
 8007978:	c2f8f359 	.word	0xc2f8f359
 800797c:	81a56e1f 	.word	0x81a56e1f
 8007980:	43500000 	.word	0x43500000
 8007984:	ffff3cb0 	.word	0xffff3cb0
 8007988:	3c900000 	.word	0x3c900000
 800798c:	00000000 	.word	0x00000000

08007990 <floor>:
 8007990:	ec51 0b10 	vmov	r0, r1, d0
 8007994:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800799c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80079a0:	2e13      	cmp	r6, #19
 80079a2:	460c      	mov	r4, r1
 80079a4:	4605      	mov	r5, r0
 80079a6:	4680      	mov	r8, r0
 80079a8:	dc34      	bgt.n	8007a14 <floor+0x84>
 80079aa:	2e00      	cmp	r6, #0
 80079ac:	da17      	bge.n	80079de <floor+0x4e>
 80079ae:	a332      	add	r3, pc, #200	@ (adr r3, 8007a78 <floor+0xe8>)
 80079b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b4:	f7f8 fc62 	bl	800027c <__adddf3>
 80079b8:	2200      	movs	r2, #0
 80079ba:	2300      	movs	r3, #0
 80079bc:	f7f9 f8a4 	bl	8000b08 <__aeabi_dcmpgt>
 80079c0:	b150      	cbz	r0, 80079d8 <floor+0x48>
 80079c2:	2c00      	cmp	r4, #0
 80079c4:	da55      	bge.n	8007a72 <floor+0xe2>
 80079c6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80079ca:	432c      	orrs	r4, r5
 80079cc:	2500      	movs	r5, #0
 80079ce:	42ac      	cmp	r4, r5
 80079d0:	4c2b      	ldr	r4, [pc, #172]	@ (8007a80 <floor+0xf0>)
 80079d2:	bf08      	it	eq
 80079d4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80079d8:	4621      	mov	r1, r4
 80079da:	4628      	mov	r0, r5
 80079dc:	e023      	b.n	8007a26 <floor+0x96>
 80079de:	4f29      	ldr	r7, [pc, #164]	@ (8007a84 <floor+0xf4>)
 80079e0:	4137      	asrs	r7, r6
 80079e2:	ea01 0307 	and.w	r3, r1, r7
 80079e6:	4303      	orrs	r3, r0
 80079e8:	d01d      	beq.n	8007a26 <floor+0x96>
 80079ea:	a323      	add	r3, pc, #140	@ (adr r3, 8007a78 <floor+0xe8>)
 80079ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f0:	f7f8 fc44 	bl	800027c <__adddf3>
 80079f4:	2200      	movs	r2, #0
 80079f6:	2300      	movs	r3, #0
 80079f8:	f7f9 f886 	bl	8000b08 <__aeabi_dcmpgt>
 80079fc:	2800      	cmp	r0, #0
 80079fe:	d0eb      	beq.n	80079d8 <floor+0x48>
 8007a00:	2c00      	cmp	r4, #0
 8007a02:	bfbe      	ittt	lt
 8007a04:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8007a08:	4133      	asrlt	r3, r6
 8007a0a:	18e4      	addlt	r4, r4, r3
 8007a0c:	ea24 0407 	bic.w	r4, r4, r7
 8007a10:	2500      	movs	r5, #0
 8007a12:	e7e1      	b.n	80079d8 <floor+0x48>
 8007a14:	2e33      	cmp	r6, #51	@ 0x33
 8007a16:	dd0a      	ble.n	8007a2e <floor+0x9e>
 8007a18:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8007a1c:	d103      	bne.n	8007a26 <floor+0x96>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	460b      	mov	r3, r1
 8007a22:	f7f8 fc2b 	bl	800027c <__adddf3>
 8007a26:	ec41 0b10 	vmov	d0, r0, r1
 8007a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a2e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8007a32:	f04f 37ff 	mov.w	r7, #4294967295
 8007a36:	40df      	lsrs	r7, r3
 8007a38:	4207      	tst	r7, r0
 8007a3a:	d0f4      	beq.n	8007a26 <floor+0x96>
 8007a3c:	a30e      	add	r3, pc, #56	@ (adr r3, 8007a78 <floor+0xe8>)
 8007a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a42:	f7f8 fc1b 	bl	800027c <__adddf3>
 8007a46:	2200      	movs	r2, #0
 8007a48:	2300      	movs	r3, #0
 8007a4a:	f7f9 f85d 	bl	8000b08 <__aeabi_dcmpgt>
 8007a4e:	2800      	cmp	r0, #0
 8007a50:	d0c2      	beq.n	80079d8 <floor+0x48>
 8007a52:	2c00      	cmp	r4, #0
 8007a54:	da0a      	bge.n	8007a6c <floor+0xdc>
 8007a56:	2e14      	cmp	r6, #20
 8007a58:	d101      	bne.n	8007a5e <floor+0xce>
 8007a5a:	3401      	adds	r4, #1
 8007a5c:	e006      	b.n	8007a6c <floor+0xdc>
 8007a5e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8007a62:	2301      	movs	r3, #1
 8007a64:	40b3      	lsls	r3, r6
 8007a66:	441d      	add	r5, r3
 8007a68:	4545      	cmp	r5, r8
 8007a6a:	d3f6      	bcc.n	8007a5a <floor+0xca>
 8007a6c:	ea25 0507 	bic.w	r5, r5, r7
 8007a70:	e7b2      	b.n	80079d8 <floor+0x48>
 8007a72:	2500      	movs	r5, #0
 8007a74:	462c      	mov	r4, r5
 8007a76:	e7af      	b.n	80079d8 <floor+0x48>
 8007a78:	8800759c 	.word	0x8800759c
 8007a7c:	7e37e43c 	.word	0x7e37e43c
 8007a80:	bff00000 	.word	0xbff00000
 8007a84:	000fffff 	.word	0x000fffff

08007a88 <_init>:
 8007a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a8a:	bf00      	nop
 8007a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a8e:	bc08      	pop	{r3}
 8007a90:	469e      	mov	lr, r3
 8007a92:	4770      	bx	lr

08007a94 <_fini>:
 8007a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a96:	bf00      	nop
 8007a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a9a:	bc08      	pop	{r3}
 8007a9c:	469e      	mov	lr, r3
 8007a9e:	4770      	bx	lr
